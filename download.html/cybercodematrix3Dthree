<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>CyberCode Matrix - Advanced 3D Neural IDE</title>
    <style>
        @import url('https://fonts.googleapis.com/css2?family=Orbitron:wght@300;400;700;900&family=Fira+Code:wght@300;400;500;600;700&family=Rajdhani:wght@300;400;500;600;700&display=swap');
        
        :root {
            --neon-cyan: #00ffff;
            --electric-purple: #8a2be2;
            --cyber-pink: #ff0080;
            --neural-green: #39ff14;
            --quantum-blue: #0080ff;
            --solar-orange: #ff4500;
            --void-black: #000000;
            --matrix-red: #ff3333;
            --holo-yellow: #ffff00;
            --neon-magenta: #ff00ff;
            --electric-lime: #ccff00;
            --cyber-teal: #00ffcc;
            --plasma-violet: #9933ff;
            --glass-primary: rgba(255, 255, 255, 0.15);
            --glass-secondary: rgba(255, 255, 255, 0.08);
            --glass-border: rgba(255, 255, 255, 0.25);
            --glow-intensity: 0 0 40px;
            --shadow-depth: 0 15px 50px;
        }
        
        * {
            margin: 0;
            padding: 0;
            box-sizing: border-box;
        }
        
        body {
            font-family: 'Fira Code', monospace;
            background: 
                radial-gradient(ellipse at 15% 15%, rgba(0, 255, 255, 0.3) 0%, transparent 70%),
                radial-gradient(ellipse at 85% 15%, rgba(138, 43, 226, 0.25) 0%, transparent 70%),
                radial-gradient(ellipse at 15% 85%, rgba(255, 0, 128, 0.2) 0%, transparent 70%),
                radial-gradient(ellipse at 85% 85%, rgba(57, 255, 20, 0.18) 0%, transparent 70%),
                radial-gradient(ellipse at 50% 30%, rgba(0, 128, 255, 0.15) 0%, transparent 80%),
                radial-gradient(ellipse at 30% 70%, rgba(255, 68, 0, 0.12) 0%, transparent 75%),
                linear-gradient(135deg, #0a0a0a 0%, #1a0a1a 25%, #0a1a1a 50%, #1a1a0a 75%, #0a0a0a 100%);
            color: var(--neon-cyan);
            min-height: 100vh;
            overflow-x: hidden;
            position: relative;
            perspective: 3000px;
            transform-style: preserve-3d;
        }
        
        /* Advanced Holographic Grid with Circuit Patterns */
        body::before {
            content: '';
            position: fixed;
            top: 0;
            left: 0;
            width: 100%;
            height: 100%;
            background-image: 
                linear-gradient(rgba(0, 255, 255, 0.2) 1px, transparent 1px),
                linear-gradient(90deg, rgba(0, 255, 255, 0.2) 1px, transparent 1px),
                linear-gradient(45deg, rgba(138, 43, 226, 0.15) 1px, transparent 1px),
                linear-gradient(135deg, rgba(255, 0, 128, 0.12) 1px, transparent 1px),
                radial-gradient(circle at 20% 20%, rgba(57, 255, 20, 0.1) 2px, transparent 4px),
                radial-gradient(circle at 80% 80%, rgba(255, 68, 0, 0.08) 2px, transparent 4px);
            background-size: 30px 30px, 30px 30px, 20px 20px, 20px 20px, 50px 50px, 50px 50px;
            pointer-events: none;
            z-index: -2;
            animation: holoGrid 25s linear infinite;
            filter: blur(0.5px) brightness(1.2);
        }
        
        @keyframes holoGrid {
            0% { 
                transform: translate3d(0, 0, 0) rotateZ(0deg); 
                opacity: 0.4; 
                filter: blur(0.5px) hue-rotate(0deg);
            }
            25% { 
                transform: translate3d(15px, 15px, 10px) rotateZ(90deg); 
                opacity: 0.7; 
                filter: blur(0.3px) hue-rotate(90deg);
            }
            50% { 
                transform: translate3d(30px, 30px, 20px) rotateZ(180deg); 
                opacity: 0.5; 
                filter: blur(0.7px) hue-rotate(180deg);
            }
            75% { 
                transform: translate3d(15px, 45px, 10px) rotateZ(270deg); 
                opacity: 0.6; 
                filter: blur(0.4px) hue-rotate(270deg);
            }
            100% { 
                transform: translate3d(0, 60px, 0) rotateZ(360deg); 
                opacity: 0.4; 
                filter: blur(0.5px) hue-rotate(360deg);
            }
        }
        
        /* Digital Glitch Effects with Color Shifting */
        .glitch-overlay {
            position: fixed;
            top: 0;
            left: 0;
            width: 100%;
            height: 100%;
            pointer-events: none;
            z-index: 5;
            background: 
                linear-gradient(90deg, transparent 97%, rgba(255, 0, 128, 0.15) 98%, rgba(0, 255, 255, 0.12) 99%, transparent 100%),
                linear-gradient(180deg, transparent 96%, rgba(138, 43, 226, 0.12) 97%, rgba(57, 255, 20, 0.1) 98%, transparent 100%);
            background-size: 2px 100%, 100% 3px;
            animation: 
                glitchScan 0.08s linear infinite, 
                glitchColorShift 3s ease-in-out infinite,
                glitchDistortion 5s ease-in-out infinite;
            mix-blend-mode: screen;
        }
        
        @keyframes glitchScan {
            0% { background-position: 0 0, 0 0; }
            100% { background-position: 2px 0, 0 3px; }
        }
        
        @keyframes glitchColorShift {
            0%, 100% { 
                filter: hue-rotate(0deg) contrast(1.2) brightness(1.1);
                transform: translate(0) scale(1);
            }
            33% { 
                filter: hue-rotate(120deg) contrast(1.4) brightness(1.3);
                transform: translate(1px, -1px) scale(1.001);
            }
            66% { 
                filter: hue-rotate(240deg) contrast(1.1) brightness(1.2);
                transform: translate(-1px, 1px) scale(0.999);
            }
        }
        
        @keyframes glitchDistortion {
            0%, 100% { 
                transform: scale(1) skew(0deg);
                opacity: 0.8;
            }
            25% { 
                transform: scale(1.002) skew(0.2deg);
                opacity: 1;
            }
            50% { 
                transform: scale(0.998) skew(-0.1deg);
                opacity: 0.6;
            }
            75% { 
                transform: scale(1.001) skew(0.1deg);
                opacity: 0.9;
            }
        }
        
        /* Enhanced Scan Lines */
        .scan-lines {
            position: fixed;
            top: 0;
            left: 0;
            width: 100%;
            height: 100%;
            pointer-events: none;
            z-index: 4;
            background: 
                linear-gradient(
                    transparent 96%,
                    rgba(0, 255, 255, 0.1) 97%,
                    rgba(138, 43, 226, 0.08) 98%,
                    rgba(57, 255, 20, 0.06) 99%,
                    transparent 100%
                );
            background-size: 100% 2px;
            animation: scanLines 0.06s linear infinite;
            mix-blend-mode: screen;
        }
        
        @keyframes scanLines {
            0% { transform: translateY(0); }
            100% { transform: translateY(2px); }
        }
        
        .container {
            max-width: 1800px;
            margin: 0 auto;
            padding: 30px;
            position: relative;
            z-index: 10;
        }
        
        /* Enhanced Header with 3D Effects */
        .cyber-header {
            display: flex;
            justify-content: space-between;
            align-items: center;
            margin-bottom: 30px;
            padding: 40px 60px;
            background: 
                linear-gradient(135deg, var(--glass-primary) 0%, var(--glass-secondary) 50%, var(--glass-primary) 100%),
                radial-gradient(circle at 25% 25%, rgba(0, 255, 255, 0.2) 0%, transparent 70%),
                radial-gradient(circle at 75% 75%, rgba(138, 43, 226, 0.15) 0%, transparent 70%),
                rgba(0, 0, 0, 0.5);
            border: 3px solid var(--glass-border);
            border-radius: 25px;
            backdrop-filter: blur(30px) saturate(200%);
            box-shadow: 
                var(--shadow-depth) rgba(0, 0, 0, 0.5),
                inset 0 3px 0 rgba(255, 255, 255, 0.2),
                var(--glow-intensity) rgba(0, 255, 255, 0.4);
            position: relative;
            overflow: hidden;
            transform-style: preserve-3d;
            animation: headerFloat 6s ease-in-out infinite;
        }
        
        @keyframes headerFloat {
            0%, 100% { 
                transform: translateY(0) rotateX(0deg) scale(1);
            }
            50% { 
                transform: translateY(-5px) rotateX(1deg) scale(1.005);
            }
        }
        
        .cyber-header::before {
            content: '';
            position: absolute;
            top: 0;
            left: -100%;
            width: 100%;
            height: 4px;
            background: linear-gradient(90deg, 
                transparent, 
                var(--neon-cyan), 
                var(--electric-purple), 
                var(--cyber-pink), 
                var(--neural-green),
                transparent
            );
            animation: headerScan 6s linear infinite;
        }
        
        @keyframes headerScan {
            0% { left: -100%; opacity: 0.6; }
            50% { opacity: 1; }
            100% { left: 100%; opacity: 0.6; }
        }
        
        .cyber-title {
            font-family: 'Orbitron', monospace;
            font-size: 3.5rem;
            font-weight: 900;
            background: linear-gradient(45deg, 
                var(--neon-cyan), var(--electric-purple), var(--cyber-pink), 
                var(--neural-green), var(--quantum-blue), var(--solar-orange)
            );
            background-size: 600% 600%;
            -webkit-background-clip: text;
            -webkit-text-fill-color: transparent;
            background-clip: text;
            animation: 
                titleFlow 8s ease-in-out infinite, 
                titleGlitch 10s ease-in-out infinite;
            text-transform: uppercase;
            letter-spacing: 6px;
            text-shadow: 0 0 30px rgba(0, 255, 255, 0.5);
        }
        
        @keyframes titleFlow {
            0%, 100% { background-position: 0% 50%; }
            25% { background-position: 100% 25%; }
            50% { background-position: 50% 100%; }
            75% { background-position: 0% 75%; }
        }
        
        @keyframes titleGlitch {
            0%, 90%, 100% { transform: translate(0); }
            91% { transform: translate(2px, -1px); }
            92% { transform: translate(-2px, 1px); }
            93% { transform: translate(1px, 1px); }
            94% { transform: translate(-1px, -1px); }
            95% { transform: translate(0); }
        }
        
        .neural-status {
            display: flex;
            align-items: center;
            gap: 20px;
            background: 
                linear-gradient(135deg, rgba(57, 255, 20, 0.2) 0%, rgba(57, 255, 20, 0.1) 100%),
                rgba(0, 0, 0, 0.4);
            padding: 20px 30px;
            border-radius: 20px;
            border: 2px solid rgba(57, 255, 20, 0.5);
            font-size: 1.1rem;
            color: var(--neural-green);
            backdrop-filter: blur(20px);
            box-shadow: 
                0 10px 30px rgba(57, 255, 20, 0.4),
                inset 0 2px 0 rgba(255, 255, 255, 0.15);
            animation: statusPulse 4s ease-in-out infinite;
        }
        
        @keyframes statusPulse {
            0%, 100% { 
                box-shadow: 
                    0 10px 30px rgba(57, 255, 20, 0.4),
                    inset 0 2px 0 rgba(255, 255, 255, 0.15);
            }
            50% { 
                box-shadow: 
                    0 15px 40px rgba(57, 255, 20, 0.6),
                    inset 0 2px 0 rgba(255, 255, 255, 0.25),
                    var(--glow-intensity) var(--neural-green);
            }
        }
        
        /* Main 3D Interface Layout */
        .cyber-interface {
            display: grid;
            grid-template-columns: 400px 1fr 450px;
            gap: 30px;
            margin-bottom: 30px;
            transform-style: preserve-3d;
            perspective: 2000px;
        }
        
        /* Enhanced 3D Glass Morphism Panels */
        .holo-panel {
            background: 
                linear-gradient(135deg, var(--glass-primary) 0%, var(--glass-secondary) 50%, var(--glass-primary) 100%),
                radial-gradient(circle at 30% 30%, rgba(0, 255, 255, 0.15) 0%, transparent 70%),
                radial-gradient(circle at 70% 70%, rgba(138, 43, 226, 0.12) 0%, transparent 70%),
                rgba(0, 0, 0, 0.4);
            border: 3px solid var(--glass-border);
            border-radius: 25px;
            padding: 30px;
            backdrop-filter: blur(30px) saturate(200%);
            position: relative;
            overflow: hidden;
            box-shadow: 
                var(--shadow-depth) rgba(0, 0, 0, 0.5),
                inset 0 3px 0 rgba(255, 255, 255, 0.2);
            transition: all 0.5s cubic-bezier(0.4, 0, 0.2, 1);
            transform-style: preserve-3d;
            animation: panelFloat 8s ease-in-out infinite;
        }
        
        @keyframes panelFloat {
            0%, 100% { 
                transform: translateY(0) rotateX(0deg) scale(1);
            }
            50% { 
                transform: translateY(-3px) rotateX(1deg) scale(1.002);
            }
        }
        
        .holo-panel:hover {
            transform: translateY(-10px) rotateX(5deg) rotateY(2deg) scale(1.02);
            box-shadow: 
                0 25px 70px rgba(0, 0, 0, 0.6),
                inset 0 3px 0 rgba(255, 255, 255, 0.3),
                var(--glow-intensity) var(--neon-cyan);
            border-color: rgba(255, 255, 255, 0.5);
        }
        
        .holo-panel::before {
            content: '';
            position: absolute;
            top: 0;
            left: 0;
            right: 0;
            bottom: 0;
            border-radius: 22px;
            padding: 3px;
            background: linear-gradient(135deg, 
                var(--neon-cyan), transparent, var(--electric-purple), 
                transparent, var(--cyber-pink), transparent, var(--neural-green)
            );
            background-size: 600% 600%;
            mask: linear-gradient(#fff 0 0) content-box, linear-gradient(#fff 0 0);
            mask-composite: exclude;
            animation: panelGlow 12s ease-in-out infinite;
        }
        
        @keyframes panelGlow {
            0%, 100% { background-position: 0% 50%; opacity: 0.6; }
            50% { background-position: 100% 50%; opacity: 1; }
        }
        
        /* Advanced 3D Interactive File Explorer */
        .file-explorer {
            perspective: 1200px;
            transform-style: preserve-3d;
        }
        
        .file-tree {
            list-style: none;
            transform-style: preserve-3d;
        }
        
        .file-item {
            padding: 15px 20px;
            margin: 6px 0;
            border-radius: 15px;
            cursor: pointer;
            transition: all 0.4s cubic-bezier(0.4, 0, 0.2, 1);
            display: flex;
            align-items: center;
            gap: 15px;
            position: relative;
            overflow: hidden;
            transform-style: preserve-3d;
            background: 
                linear-gradient(135deg, rgba(0, 0, 0, 0.3) 0%, rgba(0, 0, 0, 0.1) 100%),
                rgba(0, 255, 255, 0.05);
            border: 2px solid rgba(0, 255, 255, 0.2);
            animation: fileItemFloat 10s ease-in-out infinite;
        }
        
        @keyframes fileItemFloat {
            0%, 100% { transform: translateY(0); }
            50% { transform: translateY(-1px); }
        }
        
        .file-item::before {
            content: '';
            position: absolute;
            left: 0;
            top: 0;
            bottom: 0;
            width: 0;
            background: linear-gradient(90deg, 
                var(--neon-cyan), 
                var(--electric-purple), 
                var(--cyber-pink)
            );
            transition: width 0.4s ease;
            border-radius: 15px 0 0 15px;
        }
        
        .file-item:hover {
            background: 
                linear-gradient(135deg, rgba(0, 255, 255, 0.2) 0%, rgba(0, 255, 255, 0.1) 100%),
                rgba(0, 0, 0, 0.3);
            transform: translateX(15px) translateZ(20px) rotateY(5deg) scale(1.05);
            box-shadow: 
                0 10px 30px rgba(0, 255, 255, 0.4),
                inset 0 2px 0 rgba(255, 255, 255, 0.15);
            border-color: rgba(0, 255, 255, 0.6);
        }
        
        .file-item:hover::before {
            width: 6px;
        }
        
        .file-item.active {
            background: 
                linear-gradient(135deg, rgba(0, 255, 255, 0.3) 0%, rgba(0, 255, 255, 0.15) 100%),
                rgba(0, 0, 0, 0.4);
            border-left: 6px solid var(--neon-cyan);
            box-shadow: 
                0 12px 35px rgba(0, 255, 255, 0.5),
                inset 0 2px 0 rgba(255, 255, 255, 0.2);
            transform: translateX(10px) translateZ(15px) rotateY(2deg);
        }
        
        /* Advanced Animated File Icons with Glowing Halos */
        .file-icon {
            width: 28px;
            height: 28px;
            display: flex;
            align-items: center;
            justify-content: center;
            font-size: 18px;
            filter: 
                drop-shadow(0 0 10px currentColor) 
                drop-shadow(0 0 5px rgba(255, 255, 255, 0.3));
            transition: all 0.4s cubic-bezier(0.4, 0, 0.2, 1);
            transform-style: preserve-3d;
            animation: iconFloat 8s ease-in-out infinite;
            position: relative;
        }
        
        .file-icon::before {
            content: '';
            position: absolute;
            top: -3px;
            left: -3px;
            right: -3px;
            bottom: -3px;
            background: radial-gradient(circle, rgba(0, 255, 255, 0.2) 0%, transparent 70%);
            border-radius: 50%;
            opacity: 0;
            transition: all 0.4s ease;
            z-index: -1;
            animation: iconHalo 6s linear infinite;
        }
        
        @keyframes iconHalo {
            0% { transform: rotate(0deg) scale(1); }
            100% { transform: rotate(360deg) scale(1); }
        }
        
        .file-item:hover .file-icon {
            transform: rotateY(720deg) rotateX(15deg) scale(1.3) translateZ(10px);
            filter: 
                drop-shadow(0 0 20px currentColor) 
                drop-shadow(0 0 10px rgba(255, 255, 255, 0.5));
            animation: iconHover 2s ease-in-out infinite;
        }
        
        .file-item:hover .file-icon::before {
            opacity: 1;
            transform: scale(1.2);
        }
        
        @keyframes iconFloat {
            0%, 100% { 
                transform: translateY(0) rotateZ(0deg); 
            }
            50% { 
                transform: translateY(-2px) rotateZ(1deg); 
            }
        }
        
        @keyframes iconHover {
            0%, 100% { 
                transform: rotateY(720deg) rotateX(15deg) scale(1.3) translateZ(10px);
            }
            50% { 
                transform: rotateY(720deg) rotateX(15deg) scale(1.4) translateZ(15px);
            }
        }
        
        .file-name {
            font-weight: 600;
            color: #e0e0e0;
            transition: all 0.3s ease;
            text-shadow: 0 0 5px rgba(255, 255, 255, 0.3);
        }
        
        .file-item:hover .file-name,
        .file-item.active .file-name {
            color: var(--neon-cyan);
            text-shadow: 
                0 0 15px rgba(0, 255, 255, 0.7),
                0 0 30px rgba(0, 255, 255, 0.3);
            transform: translateX(3px);
        }
        
        /* Enhanced Code Editor with 3D Effects */
        .cyber-code-editor {
            background: 
                linear-gradient(135deg, rgba(0, 0, 0, 0.9) 0%, rgba(0, 40, 20, 0.8) 50%, rgba(0, 30, 15, 0.8) 100%),
                radial-gradient(circle at 25% 25%, rgba(57, 255, 20, 0.08) 0%, transparent 70%),
                rgba(0, 0, 0, 0.7);
            border: 3px solid var(--neural-green);
            border-radius: 20px;
            padding: 30px;
            font-family: 'Fira Code', monospace;
            font-size: 16px;
            color: var(--neural-green);
            min-height: 700px;
            position: relative;
            overflow: hidden;
            box-shadow: 
                inset 0 0 80px rgba(57, 255, 20, 0.2),
                var(--glow-intensity) var(--neural-green);
            transform-style: preserve-3d;
            animation: codeEditorPulse 10s ease-in-out infinite;
        }
        
        @keyframes codeEditorPulse {
            0%, 100% { 
                box-shadow: 
                    inset 0 0 80px rgba(57, 255, 20, 0.2),
                    var(--glow-intensity) var(--neural-green);
            }
            50% { 
                box-shadow: 
                    inset 0 0 100px rgba(57, 255, 20, 0.3),
                    0 0 60px var(--neural-green);
            }
        }
        
        .cyber-code-editor::before {
            content: '';
            position: absolute;
            top: 0;
            left: -100%;
            width: 100%;
            height: 6px;
            background: linear-gradient(90deg, 
                transparent, 
                var(--neural-green), 
                var(--neon-cyan), 
                var(--electric-purple), 
                transparent
            );
            animation: codeScan 8s linear infinite;
        }
        
        @keyframes codeScan {
            0% { left: -100%; opacity: 0.7; }
            50% { opacity: 1; }
            100% { left: 100%; opacity: 0.7; }
        }
        
        .code-line {
            display: flex;
            margin-bottom: 15px;
            padding: 10px 0;
            border-radius: 10px;
            transition: all 0.4s cubic-bezier(0.4, 0, 0.2, 1);
            animation: codeLineAppear 2s ease-out;
            position: relative;
            transform-style: preserve-3d;
        }
        
        .code-line:hover {
            background: 
                linear-gradient(135deg, rgba(57, 255, 20, 0.2) 0%, rgba(0, 255, 255, 0.15) 100%),
                rgba(0, 0, 0, 0.4);
            transform: translateX(20px) translateZ(10px) rotateY(2deg) scale(1.02);
            box-shadow: 
                0 8px 25px rgba(57, 255, 20, 0.5), 
                inset 0 0 20px rgba(0, 255, 255, 0.3);
            border: 2px solid rgba(57, 255, 20, 0.5);
        }
        
        @keyframes codeLineAppear {
            from { 
                opacity: 0; 
                transform: translateX(-50px) scale(0.8);
                filter: blur(5px);
            }
            to { 
                opacity: 1; 
                transform: translateX(0) scale(1);
                filter: blur(0);
            }
        }
        
        .line-number {
            color: rgba(255, 255, 255, 0.6);
            margin-right: 30px;
            width: 60px;
            text-align: right;
            font-weight: 700;
            user-select: none;
            text-shadow: 0 0 5px rgba(255, 255, 255, 0.3);
            animation: lineNumberGlow 5s ease-in-out infinite;
        }
        
        @keyframes lineNumberGlow {
            0%, 100% { 
                text-shadow: 0 0 5px rgba(255, 255, 255, 0.3);
            }
            50% { 
                text-shadow: 
                    0 0 8px rgba(255, 255, 255, 0.5),
                    0 0 15px rgba(0, 255, 255, 0.2);
            }
        }
        
        .line-number::after {
            content: '';
            position: absolute;
            right: -15px;
            top: 0;
            bottom: 0;
            width: 3px;
            background: linear-gradient(180deg, 
                transparent, 
                rgba(0, 255, 255, 0.6), 
                rgba(138, 43, 226, 0.4),
                transparent
            );
            border-radius: 2px;
            animation: lineBar 6s ease-in-out infinite;
        }
        
        @keyframes lineBar {
            0%, 100% { 
                background: linear-gradient(180deg, 
                    transparent, 
                    rgba(0, 255, 255, 0.6), 
                    rgba(138, 43, 226, 0.4),
                    transparent
                );
            }
            50% { 
                background: linear-gradient(180deg, 
                    transparent, 
                    rgba(57, 255, 20, 0.7), 
                    rgba(255, 0, 128, 0.5),
                    transparent
                );
            }
        }
        
        /* Enhanced Syntax Highlighting with Glow Effects */
        .keyword { 
            color: #ff6b6b; 
            font-weight: 800;
            text-shadow: 
                0 0 20px rgba(255, 107, 107, 0.8),
                0 0 40px rgba(255, 107, 107, 0.3);
            animation: keywordPulse 10s ease-in-out infinite;
        }
        
        @keyframes keywordPulse {
            0%, 100% { 
                text-shadow: 
                    0 0 20px rgba(255, 107, 107, 0.8),
                    0 0 40px rgba(255, 107, 107, 0.3);
            }
            50% { 
                text-shadow: 
                    0 0 30px rgba(255, 107, 107, 1),
                    0 0 60px rgba(255, 107, 107, 0.4);
            }
        }
        
        .string { 
            color: #4ecdc4; 
            font-weight: 700;
            text-shadow: 
                0 0 18px rgba(78, 205, 196, 0.7),
                0 0 35px rgba(78, 205, 196, 0.25);
            animation: stringShimmer 12s ease-in-out infinite;
        }
        
        @keyframes stringShimmer {
            0%, 100% { 
                text-shadow: 
                    0 0 18px rgba(78, 205, 196, 0.7),
                    0 0 35px rgba(78, 205, 196, 0.25);
            }
            50% { 
                text-shadow: 
                    0 0 25px rgba(78, 205, 196, 0.9),
                    0 0 50px rgba(78, 205, 196, 0.35);
            }
        }
        
        .function { 
            color: #ffe66d; 
            font-weight: 800;
            text-shadow: 
                0 0 20px rgba(255, 230, 109, 0.7),
                0 0 40px rgba(255, 230, 109, 0.25);
            animation: functionGlow 11s ease-in-out infinite;
        }
        
        @keyframes functionGlow {
            0%, 100% { 
                text-shadow: 
                    0 0 20px rgba(255, 230, 109, 0.7),
                    0 0 40px rgba(255, 230, 109, 0.25);
            }
            50% { 
                text-shadow: 
                    0 0 30px rgba(255, 230, 109, 0.9),
                    0 0 60px rgba(255, 230, 109, 0.35);
            }
        }
        
        .comment {
            color: #888;
            font-style: italic;
            text-shadow: 0 0 3px rgba(136, 136, 136, 0.2);
        }
        
        .property {
            color: #a8e6cf;
            font-weight: 600;
            text-shadow: 0 0 8px rgba(168, 230, 207, 0.3);
        }
        
        .operator {
            color: #ff8b94;
            font-weight: 700;
            text-shadow: 0 0 10px rgba(255, 139, 148, 0.4);
        }
        
        /* Panel Headers */
        .panel-header {
            display: flex;
            justify-content: space-between;
            align-items: center;
            margin-bottom: 25px;
            padding-bottom: 15px;
            border-bottom: 2px solid rgba(0, 255, 255, 0.3);
            position: relative;
        }
        
        .panel-header::after {
            content: '';
            position: absolute;
            bottom: -2px;
            left: 0;
            width: 0;
            height: 2px;
            background: linear-gradient(90deg, 
                var(--neon-cyan), 
                var(--electric-purple), 
                var(--cyber-pink)
            );
            animation: headerUnderline 3s ease-in-out infinite;
        }
        
        @keyframes headerUnderline {
            0%, 100% { width: 0; }
            50% { width: 100%; }
        }
        
        .panel-title {
            font-family: 'Orbitron', monospace;
            font-size: 1.3rem;
            font-weight: 700;
            color: var(--neon-cyan);
            text-shadow: 
                0 0 15px rgba(0, 255, 255, 0.6),
                0 0 30px rgba(0, 255, 255, 0.2);
            text-transform: uppercase;
            letter-spacing: 2px;
            animation: panelTitleGlow 6s ease-in-out infinite;
        }
        
        @keyframes panelTitleGlow {
            0%, 100% { 
                text-shadow: 
                    0 0 15px rgba(0, 255, 255, 0.6),
                    0 0 30px rgba(0, 255, 255, 0.2);
            }
            50% { 
                text-shadow: 
                    0 0 25px rgba(0, 255, 255, 0.8),
                    0 0 50px rgba(0, 255, 255, 0.3);
            }
        }
        
        /* Analytics Panel */
        .analytics-grid {
            display: grid;
            grid-template-columns: 1fr 1fr;
            gap: 20px;
            margin-bottom: 30px;
        }
        
        .metric-card {
            background: 
                linear-gradient(135deg, rgba(0, 0, 0, 0.6) 0%, rgba(0, 0, 0, 0.3) 100%),
                rgba(0, 255, 255, 0.05);
            border: 2px solid rgba(0, 255, 255, 0.3);
            border-radius: 15px;
            padding: 20px;
            position: relative;
            overflow: hidden;
            transition: all 0.4s ease;
            animation: metricCardFloat 12s ease-in-out infinite;
        }
        
        @keyframes metricCardFloat {
            0%, 100% { transform: translateY(0); }
            50% { transform: translateY(-2px); }
        }
        
        .metric-card:hover {
            transform: translateY(-5px) scale(1.02);
            border-color: rgba(0, 255, 255, 0.6);
            box-shadow: 
                0 10px 30px rgba(0, 255, 255, 0.3),
                inset 0 0 20px rgba(0, 255, 255, 0.1);
        }
        
        .metric-label {
            font-size: 0.9rem;
            color: #ccc;
            margin-bottom: 10px;
            text-transform: uppercase;
            letter-spacing: 1px;
            font-weight: 500;
        }
        
        .metric-value {
            font-size: 1.8rem;
            font-weight: 800;
            color: var(--neon-cyan);
            text-shadow: 
                0 0 15px rgba(0, 255, 255, 0.6),
                0 0 30px rgba(0, 255, 255, 0.2);
            margin-bottom: 12px;
            animation: metricValuePulse 5s ease-in-out infinite;
        }
        
        @keyframes metricValuePulse {
            0%, 100% { 
                text-shadow: 
                    0 0 15px rgba(0, 255, 255, 0.6),
                    0 0 30px rgba(0, 255, 255, 0.2);
            }
            50% { 
                text-shadow: 
                    0 0 25px rgba(0, 255, 255, 0.8),
                    0 0 50px rgba(0, 255, 255, 0.3);
            }
        }
        
        .metric-bar {
            width: 100%;
            height: 6px;
            background: rgba(0, 0, 0, 0.5);
            border-radius: 3px;
            overflow: hidden;
            position: relative;
        }
        
        .metric-fill {
            height: 100%;
            border-radius: 3px;
            transition: width 1s ease;
            position: relative;
            animation: metricFillPulse 3s ease-in-out infinite;
        }
        
        @keyframes metricFillPulse {
            0%, 100% { filter: brightness(1); }
            50% { filter: brightness(1.2); }
        }
        
        .cpu-fill {
            background: linear-gradient(90deg, 
                var(--cyber-pink), 
                var(--electric-purple)
            );
            width: 85%;
            box-shadow: 0 0 15px rgba(255, 0, 128, 0.5);
        }
        
        .memory-fill {
            background: linear-gradient(90deg, 
                var(--neural-green), 
                var(--neon-cyan)
            );
            width: 72%;
            box-shadow: 0 0 15px rgba(57, 255, 20, 0.5);
        }
        
        .network-fill {
            background: linear-gradient(90deg, 
                var(--quantum-blue), 
                var(--neon-cyan)
            );
            width: 66%;
            box-shadow: 0 0 15px rgba(0, 128, 255, 0.5);
        }
        
        .storage-fill {
            background: linear-gradient(90deg, 
                var(--solar-orange), 
                var(--holo-yellow)
            );
            width: 58%;
            box-shadow: 0 0 15px rgba(255, 68, 0, 0.5);
        }
        
        /* Data Visualization */
        .data-viz {
            height: 120px;
            position: relative;
            background: 
                linear-gradient(135deg, rgba(0, 0, 0, 0.8) 0%, rgba(0, 0, 0, 0.4) 100%),
                rgba(0, 255, 255, 0.08);
            border: 2px solid rgba(0, 255, 255, 0.25);
            border-radius: 12px;
            margin-bottom: 25px;
            overflow: hidden;
            animation: dataVizPulse 6s ease-in-out infinite;
        }
        
        @keyframes dataVizPulse {
            0%, 100% { 
                border-color: rgba(0, 255, 255, 0.25);
            }
            50% { 
                border-color: rgba(0, 255, 255, 0.4);
                box-shadow: 0 0 15px rgba(0, 255, 255, 0.2);
            }
        }
        
        .viz-line {
            position: absolute;
            bottom: 0;
            width: 4px;
            background: linear-gradient(180deg, 
                transparent, 
                var(--neon-cyan), 
                var(--electric-purple)
            );
            border-radius: 2px 2px 0 0;
            animation: vizPulse 3s ease-in-out infinite;
            box-shadow: 0 0 10px rgba(0, 255, 255, 0.5);
        }
        
        @keyframes vizPulse {
            0%, 100% { 
                height: 20%; 
                opacity: 0.6;
            }
            25% { 
                height: 80%; 
                opacity: 1;
            }
            50% { 
                height: 60%; 
                opacity: 0.8;
            }
            75% { 
                height: 90%; 
                opacity: 1;
            }
        }
        
        /* Activity Feed */
        .activity-feed {
            max-height: 300px;
            overflow-y: auto;
            padding-right: 10px;
        }
        
        .activity-item {
            display: flex;
            align-items: flex-start;
            gap: 15px;
            padding: 12px 0;
            border-bottom: 1px solid rgba(0, 255, 255, 0.1);
            animation: activityAppear 1.2s ease-out;
            transition: all 0.3s ease;
        }
        
        .activity-item:hover {
            background: rgba(0, 255, 255, 0.03);
            transform: translateX(8px);
            border-bottom-color: rgba(0, 255, 255, 0.2);
        }
        
        .activity-time {
            font-size: 0.85rem;
            color: rgba(255, 255, 255, 0.6);
            font-weight: 600;
            min-width: 60px;
            text-shadow: 0 0 5px rgba(255, 255, 255, 0.3);
        }
        
        .activity-message {
            font-size: 0.95rem;
            color: #ddd;
            line-height: 1.4;
        }
        
        @keyframes activityAppear {
            from { 
                opacity: 0; 
                transform: translateX(-20px);
            }
            to { 
                opacity: 1; 
                transform: translateX(0);
            }
        }
        
        /* Enhanced Custom Scrollbar */
        ::-webkit-scrollbar {
            width: 12px;
        }
        
        ::-webkit-scrollbar-track {
            background: 
                linear-gradient(135deg, rgba(0, 0, 0, 0.8) 0%, rgba(0, 0, 0, 0.6) 100%),
                rgba(0, 255, 255, 0.03);
            border-radius: 6px;
        }
        
        ::-webkit-scrollbar-thumb {
            background: linear-gradient(45deg, 
                var(--neon-cyan), 
                var(--electric-purple), 
                var(--cyber-pink)
            );
            background-size: 300% 300%;
            border-radius: 6px;
            box-shadow: 
                var(--glow-intensity) var(--neon-cyan),
                inset 0 1px 0 rgba(255, 255, 255, 0.2);
            transition: all 0.3s ease;
            animation: scrollbarGlow 6s ease-in-out infinite;
        }
        
        @keyframes scrollbarGlow {
            0%, 100% { background-position: 0% 50%; }
            50% { background-position: 100% 50%; }
        }
        
        ::-webkit-scrollbar-thumb:hover {
            background: linear-gradient(45deg, 
                var(--cyber-pink), 
                var(--neural-green), 
                var(--quantum-blue)
            );
            box-shadow: 
                0 0 50px var(--cyber-pink),
                inset 0 1px 0 rgba(255, 255, 255, 0.4);
        }
        
        /* Responsive Design */
        @media (max-width: 1400px) {
            .cyber-interface {
                grid-template-columns: 350px 1fr 400px;
                gap: 25px;
            }
            
            .cyber-title {
                font-size: 3rem;
                letter-spacing: 5px;
            }
        }
        
        @media (max-width: 1200px) {
            .cyber-interface {
                grid-template-columns: 300px 1fr 350px;
                gap: 20px;
            }
            
            .cyber-title {
                font-size: 2.5rem;
                letter-spacing: 4px;
            }
        }
        
        @media (max-width: 900px) {
            .cyber-interface {
                grid-template-columns: 1fr;
                gap: 25px;
            }
            
            .cyber-header {
                flex-direction: column;
                gap: 25px;
                padding: 30px;
            }
            
            .cyber-title {
                font-size: 2rem;
                letter-spacing: 3px;
            }
        }
    </style>
</head>
<body>
    <!-- Digital Glitch and Scan Effects -->
    <div class="glitch-overlay"></div>
    <div class="scan-lines"></div>

    <div class="container">
        <!-- Enhanced Header -->
        <header class="cyber-header">
            <h1 class="cyber-title">CyberCode Matrix</h1>
            <div class="neural-status">
                <div class="status-indicator"></div>
                <span>Neural Link Active • 3D Mode • Holographic Interface</span>
            </div>
        </header>
        
        <!-- Main 3D Interface -->
        <div class="cyber-interface">
            <!-- Left Panel: 3D Interactive File Explorer -->
            <div class="holo-panel">
                <div class="panel-header">
                    <h2 class="panel-title">Neural Explorer</h2>
                    <span style="color: #666; font-size: 1.2rem;">🗂️</span>
                </div>
                
                <div class="file-explorer">
                    <ul class="file-tree">
                        <li class="file-item active" data-file="neural_system.js">
                            <span class="file-icon">🧠</span>
                            <span class="file-name">neural_system.js</span>
                        </li>
                        <li class="file-item" data-file="cyber_core.ts">
                            <span class="file-icon">⚡</span>
                            <span class="file-name">cyber_core.ts</span>
                        </li>
                        <li class="file-item" data-file="holo_interface.jsx">
                            <span class="file-icon">🔮</span>
                            <span class="file-name">holo_interface.jsx</span>
                        </li>
                        <li class="file-item" data-file="quantum_data.py">
                            <span class="file-icon">🌌</span>
                            <span class="file-name">quantum_data.py</span>
                        </li>
                        <li class="file-item" data-file="matrix_ai.cpp">
                            <span class="file-icon">🤖</span>
                            <span class="file-name">matrix_ai.cpp</span>
                        </li>
                        <li class="file-item" data-file="hologram_engine.rs">
                            <span class="file-icon">🔷</span>
                            <span class="file-name">hologram_engine.rs</span>
                        </li>
                        <li class="file-item">
                            <span class="file-icon">📁</span>
                            <span class="file-name">components/</span>
                        </li>
                        <li class="file-item" style="margin-left: 30px;" data-file="HoloPanel.jsx">
                            <span class="file-icon">🔷</span>
                            <span class="file-name">HoloPanel.jsx</span>
                        </li>
                        <li class="file-item" style="margin-left: 30px;" data-file="NeuralFeed.jsx">
                            <span class="file-icon">📡</span>
                            <span class="file-name">NeuralFeed.jsx</span>
                        </li>
                        <li class="file-item" style="margin-left: 30px;" data-file="DataViz3D.jsx">
                            <span class="file-icon">📊</span>
                            <span class="file-name">DataViz3D.jsx</span>
                        </li>
                        <li class="file-item" data-file="config.json">
                            <span class="file-icon">⚙️</span>
                            <span class="file-name">config.json</span>
                        </li>
                    </ul>
                </div>
            </div>
            
            <!-- Center Panel: Enhanced 3D Code Editor -->
            <div class="holo-panel">
                <div class="panel-header">
                    <h2 class="panel-title">Neural Code Matrix</h2>
                    <span style="color: #666; font-size: 1rem;" id="currentFile">neural_system.js</span>
                </div>
                
                <div class="cyber-code-editor" id="codeEditor">
                    <div class="code-line">
                        <span class="line-number">1</span>
                        <span class="code-content"><span class="keyword">import</span> { <span class="function">NeuralProcessor</span>, <span class="function">HoloCore</span>, <span class="function">QuantumMatrix</span> } <span class="keyword">from</span> <span class="string">'@cyber/neural-core'</span>;</span>
                    </div>
                    <div class="code-line">
                        <span class="line-number">2</span>
                        <span class="code-content"><span class="keyword">import</span> { <span class="function">Analytics</span>, <span class="function">DataViz</span>, <span class="function">RealTimeMonitor</span> } <span class="keyword">from</span> <span class="string">'@cyber/analytics'</span>;</span>
                    </div>
                    <div class="code-line">
                        <span class="line-number">3</span>
                        <span class="code-content"><span class="keyword">import</span> { <span class="function">GlassMorphism</span>, <span class="function">ParticleSystem</span>, <span class="function">GlitchEngine</span> } <span class="keyword">from</span> <span class="string">'@cyber/effects'</span>;</span>
                    </div>
                    <div class="code-line">
                        <span class="line-number">4</span>
                        <span class="code-content"></span>
                    </div>
                    <div class="code-line">
                        <span class="line-number">5</span>
                        <span class="code-content"><span class="comment">// Advanced Cyberpunk Neural System with Holographic Interface</span></span>
                    </div>
                    <div class="code-line">
                        <span class="line-number">6</span>
                        <span class="code-content"><span class="keyword">class</span> <span class="function">CyberNeuralSystem</span> {</span>
                    </div>
                    <div class="code-line">
                        <span class="line-number">7</span>
                        <span class="code-content">  <span class="keyword">constructor</span>(<span class="property">config</span>) {</span>
                    </div>
                    <div class="code-line">
                        <span class="line-number">8</span>
                        <span class="code-content">    <span class="keyword">this</span><span class="operator">.</span><span class="property">neuralProcessor</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="function">NeuralProcessor</span>(<span class="property">config</span>);</span>
                    </div>
                    <div class="code-line">
                        <span class="line-number">9</span>
                        <span class="code-content">    <span class="keyword">this</span><span class="operator">.</span><span class="property">holoCore</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="function">HoloCore</span>({ <span class="property">dimension</span>: <span class="string">'3D'</span>, <span class="property">holographic</span>: <span class="keyword">true</span> });</span>
                    </div>
                    <div class="code-line">
                        <span class="line-number">10</span>
                        <span class="code-content">    <span class="keyword">this</span><span class="operator">.</span><span class="property">quantumMatrix</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="function">QuantumMatrix</span>({ <span class="property">neural</span>: <span class="keyword">true</span>, <span class="property">cyberpunk</span>: <span class="keyword">true</span> });</span>
                    </div>
                    <div class="code-line">
                        <span class="line-number">11</span>
                        <span class="code-content">    <span class="keyword">this</span><span class="operator">.</span><span class="property">analytics</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="function">Analytics</span>({ <span class="property">realTime</span>: <span class="keyword">true</span>, <span class="property">cyberpunk</span>: <span class="keyword">true</span> });</span>
                    </div>
                    <div class="code-line">
                        <span class="line-number">12</span>
                        <span class="code-content">    <span class="keyword">this</span><span class="operator">.</span><span class="property">dataViz</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="function">DataViz</span>({ <span class="property">holographic</span>: <span class="keyword">true</span>, <span class="property">interactive</span>: <span class="keyword">true</span> });</span>
                    </div>
                    <div class="code-line">
                        <span class="line-number">13</span>
                        <span class="code-content">    <span class="keyword">this</span><span class="operator">.</span><span class="property">monitor</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="function">RealTimeMonitor</span>({ <span class="property">neural</span>: <span class="keyword">true</span>, <span class="property">quantum</span>: <span class="keyword">true</span> });</span>
                    </div>
                    <div class="code-line">
                        <span class="line-number">14</span>
                        <span class="code-content">    <span class="keyword">this</span><span class="operator">.</span><span class="property">glassMorphism</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="function">GlassMorphism</span>({ <span class="property">blur</span>: <span class="string">'30px'</span>, <span class="property">opacity</span>: <span class="string">0.15</span> });</span>
                    </div>
                    <div class="code-line">
                        <span class="line-number">15</span>
                        <span class="code-content">    <span class="keyword">this</span><span class="operator">.</span><span class="property">particles</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="function">ParticleSystem</span>({ <span class="property">neural</span>: <span class="keyword">true</span>, <span class="property">floating</span>: <span class="keyword">true</span> });</span>
                    </div>
                    <div class="code-line">
                        <span class="line-number">16</span>
                        <span class="code-content">    <span class="keyword">this</span><span class="operator">.</span><span class="property">glitchEngine</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="function">GlitchEngine</span>({ <span class="property">intensity</span>: <span class="string">'high'</span>, <span class="property">scanLines</span>: <span class="keyword">true</span> });</span>
                    </div>
                    <div class="code-line">
                        <span class="line-number">17</span>
                        <span class="code-content">  }</span>
                    </div>
                    <div class="code-line">
                        <span class="line-number">18</span>
                        <span class="code-content"></span>
                    </div>
                    <div class="code-line">
                        <span class="line-number">19</span>
                        <span class="code-content">  <span class="keyword">async</span> <span class="function">initializeNeuralNetwork</span>() {</span>
                    </div>
                    <div class="code-line">
                        <span class="line-number">20</span>
                        <span class="code-content">    <span class="keyword">try</span> {</span>
                    </div>
                    <div class="code-line">
                        <span class="line-number">21</span>
                        <span class="code-content">      <span class="keyword">await</span> <span class="keyword">this</span><span class="operator">.</span><span class="property">neuralProcessor</span><span class="operator">.</span><span class="function">connect</span>();</span>
                    </div>
                    <div class="code-line">
                        <span class="line-number">22</span>
                        <span class="code-content">      <span class="keyword">await</span> <span class="keyword">this</span><span class="operator">.</span><span class="property">holoCore</span><span class="operator">.</span><span class="function">activate</span>();</span>
                    </div>
                    <div class="code-line">
                        <span class="line-number">23</span>
                        <span class="code-content">      <span class="keyword">await</span> <span class="keyword">this</span><span class="operator">.</span><span class="property">quantumMatrix</span><span class="operator">.</span><span class="function">synchronize</span>();</span>
                    </div>
                    <div class="code-line">
                        <span class="line-number">24</span>
                        <span class="code-content">      <span class="keyword">this</span><span class="operator">.</span><span class="function">startRealTimeMonitoring</span>();</span>
                    </div>
                    <div class="code-line">
                        <span class="line-number">25</span>
                        <span class="code-content">      <span class="keyword">this</span><span class="operator">.</span><span class="function">enableHolographicInterface</span>();</span>
                    </div>
                    <div class="code-line">
                        <span class="line-number">26</span>
                        <span class="code-content">    } <span class="keyword">catch</span> (<span class="property">error</span>) {</span>
                    </div>
                    <div class="code-line">
                        <span class="line-number">27</span>
                        <span class="code-content">      <span class="property">console</span><span class="operator">.</span><span class="function">error</span>(<span class="string">'Neural network initialization failed:'</span>, <span class="property">error</span>);</span>
                    </div>
                    <div class="code-line">
                        <span class="line-number">28</span>
                        <span class="code-content">    }</span>
                    </div>
                    <div class="code-line">
                        <span class="line-number">29</span>
                        <span class="code-content">  }</span>
                    </div>
                    <div class="code-line">
                        <span class="line-number">30</span>
                        <span class="code-content">}</span>
                    </div>
                </div>
            </div>
            
            <!-- Right Panel: Analytics and Activity Feed -->
            <div class="holo-panel">
                <div class="panel-header">
                    <h2 class="panel-title">Neural Analytics</h2>
                    <span style="color: #666; font-size: 1.2rem;">📊</span>
                </div>
                
                <div class="analytics-grid">
                    <div class="metric-card">
                        <div class="metric-label">CPU Usage</div>
                        <div class="metric-value">85%</div>
                        <div class="metric-bar">
                            <div class="metric-fill cpu-fill"></div>
                        </div>
                    </div>
                    <div class="metric-card">
                        <div class="metric-label">Memory</div>
                        <div class="metric-value">72%</div>
                        <div class="metric-bar">
                            <div class="metric-fill memory-fill"></div>
                        </div>
                    </div>
                    <div class="metric-card">
                        <div class="metric-label">Network</div>
                        <div class="metric-value">66%</div>
                        <div class="metric-bar">
                            <div class="metric-fill network-fill"></div>
                        </div>
                    </div>
                    <div class="metric-card">
                        <div class="metric-label">Storage</div>
                        <div class="metric-value">58%</div>
                        <div class="metric-bar">
                            <div class="metric-fill storage-fill"></div>
                        </div>
                    </div>
                </div>
                
                <div class="data-viz">
                    <div class="viz-line" style="left: 5%; animation-delay: 0s;"></div>
                    <div class="viz-line" style="left: 15%; animation-delay: 0.2s;"></div>
                    <div class="viz-line" style="left: 25%; animation-delay: 0.4s;"></div>
                    <div class="viz-line" style="left: 35%; animation-delay: 0.6s;"></div>
                    <div class="viz-line" style="left: 45%; animation-delay: 0.8s;"></div>
                    <div class="viz-line" style="left: 55%; animation-delay: 1s;"></div>
                    <div class="viz-line" style="left: 65%; animation-delay: 1.2s;"></div>
                    <div class="viz-line" style="left: 75%; animation-delay: 1.4s;"></div>
                    <div class="viz-line" style="left: 85%; animation-delay: 1.6s;"></div>
                    <div class="viz-line" style="left: 95%; animation-delay: 1.8s;"></div>
                </div>
                
                <div class="panel-header">
                    <h3 class="panel-title" style="font-size: 1.1rem;">Neural Activity Feed</h3>
                </div>
                
                <div class="activity-feed">
                    <div class="activity-item">
                        <div class="activity-time">14:32</div>
                        <div class="activity-message">Neural network synchronized with quantum matrix</div>
                    </div>
                    <div class="activity-item">
                        <div class="activity-time">14:31</div>
                        <div class="activity-message">Holographic interface projection activated</div>
                    </div>
                    <div class="activity-item">
                        <div class="activity-time">14:30</div>
                        <div class="activity-message">Real-time monitoring system online</div>
                    </div>
                    <div class="activity-item">
                        <div class="activity-time">14:29</div>
                        <div class="activity-message">Glass morphism effects initialized</div>
                    </div>
                    <div class="activity-item">
                        <div class="activity-time">14:28</div>
                        <div class="activity-message">Particle system activated</div>
                    </div>
                    <div class="activity-item">
                        <div class="activity-time">14:27</div>
                        <div class="activity-message">Glitch engine calibrated</div>
                    </div>
                    <div class="activity-item">
                        <div class="activity-time">14:26</div>
                        <div class="activity-message">Neural processor connection established</div>
                    </div>
                    <div class="activity-item">
                        <div class="activity-time">14:25</div>
                        <div class="activity-message">Cyberpunk interface theme loaded</div>
                    </div>
                    <div class="activity-item">
                        <div class="activity-time">14:24</div>
                        <div class="activity-message">3D rendering engine initialized</div>
                    </div>
                    <div class="activity-item">
                        <div class="activity-time">14:23</div>
                        <div class="activity-message">System boot sequence completed</div>
                    </div>
                </div>
            </div>
        </div>
    </div>

    <script>
        // File Explorer Interaction
        document.querySelectorAll('.file-item').forEach(item => {
            item.addEventListener('click', function() {
                // Remove active class from all items
                document.querySelectorAll('.file-item').forEach(i => i.classList.remove('active'));
                
                // Add active class to clicked item
                this.classList.add('active');
                
                // Update current file display
                const fileName = this.getAttribute('data-file');
                if (fileName) {
                    document.getElementById('currentFile').textContent = fileName;
                }
                
                // Add visual feedback
                this.style.transform = 'translateX(20px) translateZ(25px) rotateY(8deg) scale(1.08)';
                setTimeout(() => {
                    this.style.transform = '';
                }, 300);
            });
        });

        // Code Editor Line Interaction
        document.querySelectorAll('.code-line').forEach(line => {
            line.addEventListener('mouseenter', function() {
                this.style.background = 'linear-gradient(135deg, rgba(57, 255, 20, 0.2) 0%, rgba(0, 255, 255, 0.15) 100%)';
                this.style.transform = 'translateX(20px) translateZ(10px) rotateY(2deg) scale(1.02)';
                this.style.boxShadow = '0 8px 25px rgba(57, 255, 20, 0.5), inset 0 0 20px rgba(0, 255, 255, 0.3)';
                this.style.border = '2px solid rgba(57, 255, 20, 0.5)';
            });
            
            line.addEventListener('mouseleave', function() {
                this.style.background = '';
                this.style.transform = '';
                this.style.boxShadow = '';
                this.style.border = '';
            });
        });

        // Dynamic Metrics Animation
        function updateMetrics() {
            const metrics = [
                { element: '.cpu-fill', min: 70, max: 95 },
                { element: '.memory-fill', min: 60, max: 85 },
                { element: '.network-fill', min: 50, max: 80 },
                { element: '.storage-fill', min: 45, max: 70 }
            ];

            metrics.forEach(metric => {
                const element = document.querySelector(metric.element);
                const value = Math.floor(Math.random() * (metric.max - metric.min + 1)) + metric.min;
                element.style.width = value + '%';
                
                // Update corresponding value display
                const card = element.closest('.metric-card');
                const valueElement = card.querySelector('.metric-value');
                valueElement.textContent = value + '%';
            });
        }

        // Update metrics every 3 seconds
        setInterval(updateMetrics, 3000);

        // Enhanced Visual Effects
        function createFloatingParticles() {
            const container = document.body;
            
            for (let i = 0; i < 20; i++) {
                const particle = document.createElement('div');
                particle.style.position = 'fixed';
                particle.style.width = Math.random() * 4 + 2 + 'px';
                particle.style.height = particle.style.width;
                particle.style.background = `rgba(${Math.random() * 255}, ${Math.random() * 255}, 255, 0.6)`;
                particle.style.borderRadius = '50%';
                particle.style.pointerEvents = 'none';
                particle.style.zIndex = '1';
                particle.style.left = Math.random() * window.innerWidth + 'px';
                particle.style.top = Math.random() * window.innerHeight + 'px';
                particle.style.filter = 'blur(1px)';
                particle.style.boxShadow = '0 0 10px currentColor';
                
                const duration = Math.random() * 20 + 10;
                particle.style.animation = `floatParticle ${duration}s linear infinite`;
                
                container.appendChild(particle);
                
                // Remove particle after animation
                setTimeout(() => {
                    if (particle.parentNode) {
                        particle.parentNode.removeChild(particle);
                    }
                }, duration * 1000);
            }
        }

        // Add floating particle animation
        const style = document.createElement('style');
        style.textContent = `
            @keyframes floatParticle {
                0% {
                    transform: translateY(100vh) translateX(0) rotate(0deg);
                    opacity: 0;
                }
                10% {
                    opacity: 1;
                }
                90% {
                    opacity: 1;
                }
                100% {
                    transform: translateY(-100px) translateX(${Math.random() * 200 - 100}px) rotate(360deg);
                    opacity: 0;
                }
            }
        `;
        document.head.appendChild(style);

        // Create particles periodically
        setInterval(createFloatingParticles, 5000);
        createFloatingParticles(); // Initial particles

        // Enhanced Glitch Effect
        function triggerGlitch() {
            const elements = document.querySelectorAll('.cyber-title, .panel-title, .file-name, .metric-value');
            const randomElement = elements[Math.floor(Math.random() * elements.length)];
            
            randomElement.style.animation = 'none';
            randomElement.offsetHeight; // Trigger reflow
            randomElement.style.animation = 'titleGlitch 0.5s ease-out';
            
            setTimeout(() => {
                randomElement.style.animation = '';
            }, 500);
        }

        // Trigger random glitches
        setInterval(triggerGlitch, 8000);

        // Initialize the interface
        console.log('🚀 CyberCode Matrix initialized');
        console.log('🧠 Neural systems online');
        console.log('🔮 Holographic interface active');
        console.log('⚡ 3D rendering engine loaded');
    </script>
<script>(function(){function c(){var b=a.contentDocument||a.contentWindow.document;if(b){var d=b.createElement('script');d.innerHTML="window.__CF$cv$params={r:'96e8852e577d237e',t:'MTc1NTA5MTMzNS4wMDAwMDA='};var a=document.createElement('script');a.nonce='';a.src='/cdn-cgi/challenge-platform/scripts/jsd/main.js';document.getElementsByTagName('head')[0].appendChild(a);";b.getElementsByTagName('head')[0].appendChild(d)}}if(document.body){var a=document.createElement('iframe');a.height=1;a.width=1;a.style.position='absolute';a.style.top=0;a.style.left=0;a.style.border='none';a.style.visibility='hidden';document.body.appendChild(a);if('loading'!==document.readyState)c();else if(window.addEventListener)document.addEventListener('DOMContentLoaded',c);else{var e=document.onreadystatechange||function(){};document.onreadystatechange=function(b){e(b);'loading'!==document.readyState&&(document.onreadystatechange=e,c())}}}})();</script></body>
</html>
