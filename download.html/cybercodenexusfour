<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>CyberCode Nexus - Future IDE</title>
    <style>
        @import url('https://fonts.googleapis.com/css2?family=Orbitron:wght@300;400;700;900&family=Fira+Code:wght@300;400;500;600;700&family=Rajdhani:wght@300;400;500;600;700&display=swap');
        
        :root {
            --neon-cyan: #00ffff;
            --neon-pink: #ff0080;
            --neon-purple: #8a2be2;
            --neon-green: #39ff14;
            --neon-blue: #0080ff;
            --neon-orange: #ff4500;
            --neon-yellow: #ffff00;
            --neon-magenta: #ff00ff;
            --dark-primary: #0a0a0a;
            --dark-secondary: #1a1a1a;
            --glass-primary: rgba(255, 255, 255, 0.15);
            --glass-secondary: rgba(255, 255, 255, 0.08);
            --glass-border: rgba(255, 255, 255, 0.25);
            --shadow-glow: 0 0 50px;
        }
        
        * {
            margin: 0;
            padding: 0;
            box-sizing: border-box;
        }
        
        body {
            font-family: 'Fira Code', monospace;
            background: 
                radial-gradient(ellipse at 15% 15%, rgba(0, 255, 255, 0.4) 0%, transparent 60%),
                radial-gradient(ellipse at 85% 15%, rgba(255, 0, 128, 0.35) 0%, transparent 60%),
                radial-gradient(ellipse at 15% 85%, rgba(138, 43, 226, 0.3) 0%, transparent 60%),
                radial-gradient(ellipse at 85% 85%, rgba(57, 255, 20, 0.25) 0%, transparent 60%),
                radial-gradient(ellipse at 50% 50%, rgba(0, 128, 255, 0.2) 0%, transparent 70%),
                linear-gradient(135deg, #0a0a0a 0%, #1a0a3a 20%, #0a3a3a 40%, #3a3a0a 60%, #3a0a1a 80%, #0a0a0a 100%);
            color: var(--neon-cyan);
            min-height: 100vh;
            overflow-x: hidden;
            position: relative;
            perspective: 2000px;
        }
        
        /* Enhanced Multi-Layer Grid System */
        body::before {
            content: '';
            position: fixed;
            top: 0;
            left: 0;
            width: 100%;
            height: 100%;
            background-image: 
                linear-gradient(rgba(0, 255, 255, 0.2) 1px, transparent 1px),
                linear-gradient(90deg, rgba(0, 255, 255, 0.2) 1px, transparent 1px),
                linear-gradient(45deg, rgba(255, 0, 128, 0.15) 1px, transparent 1px),
                linear-gradient(135deg, rgba(138, 43, 226, 0.12) 1px, transparent 1px),
                radial-gradient(circle at 25% 25%, rgba(57, 255, 20, 0.1) 2px, transparent 4px),
                radial-gradient(circle at 75% 75%, rgba(0, 128, 255, 0.08) 3px, transparent 6px);
            background-size: 40px 40px, 40px 40px, 20px 20px, 20px 20px, 60px 60px, 80px 80px;
            pointer-events: none;
            z-index: -2;
            animation: gridFlow 25s linear infinite;
            filter: blur(0.5px);
        }
        
        @keyframes gridFlow {
            0% { 
                transform: translate(0, 0) rotate(0deg); 
                opacity: 0.7; 
            }
            25% { 
                transform: translate(10px, 10px) rotate(90deg); 
                opacity: 1; 
            }
            50% { 
                transform: translate(20px, 20px) rotate(180deg); 
                opacity: 0.8; 
            }
            75% { 
                transform: translate(10px, 30px) rotate(270deg); 
                opacity: 0.9; 
            }
            100% { 
                transform: translate(0, 40px) rotate(360deg); 
                opacity: 0.7; 
            }
        }
        
        /* Advanced Circuit Pattern Overlay */
        body::after {
            content: '';
            position: fixed;
            top: 0;
            left: 0;
            width: 100%;
            height: 100%;
            background-image: 
                linear-gradient(0deg, transparent 49%, rgba(0, 255, 255, 0.1) 50%, rgba(0, 255, 255, 0.1) 51%, transparent 52%),
                linear-gradient(90deg, transparent 49%, rgba(255, 0, 128, 0.08) 50%, rgba(255, 0, 128, 0.08) 51%, transparent 52%);
            background-size: 100px 100px, 100px 100px;
            pointer-events: none;
            z-index: -1;
            animation: circuitPulse 20s linear infinite;
            opacity: 0.6;
        }
        
        @keyframes circuitPulse {
            0% { background-position: 0 0, 0 0; }
            100% { background-position: 100px 100px, -100px 100px; }
        }
        
        /* Enhanced Glitch Effects */
        .glitch-overlay {
            position: fixed;
            top: 0;
            left: 0;
            width: 100%;
            height: 100%;
            pointer-events: none;
            z-index: 5;
            background: 
                linear-gradient(90deg, transparent 98%, rgba(255, 0, 128, 0.2) 99%, rgba(0, 255, 255, 0.15) 100%),
                linear-gradient(180deg, transparent 97%, rgba(138, 43, 226, 0.15) 98%, rgba(57, 255, 20, 0.1) 99%, transparent 100%);
            background-size: 3px 100%, 100% 4px;
            animation: 
                glitchScan 0.08s linear infinite, 
                glitchFlicker 0.15s linear infinite,
                glitchColorShift 8s ease-in-out infinite;
            mix-blend-mode: screen;
        }
        
        @keyframes glitchScan {
            0% { background-position: 0 0, 0 0; }
            100% { background-position: 3px 0, 0 4px; }
        }
        
        @keyframes glitchFlicker {
            0%, 90%, 100% { opacity: 0.8; }
            95% { opacity: 0.1; }
        }
        
        @keyframes glitchColorShift {
            0%, 100% { filter: hue-rotate(0deg) contrast(1.2); }
            25% { filter: hue-rotate(90deg) contrast(1.5); }
            50% { filter: hue-rotate(180deg) contrast(1.1); }
            75% { filter: hue-rotate(270deg) contrast(1.4); }
        }
        
        /* Advanced Scan Lines */
        .scan-lines {
            position: fixed;
            top: 0;
            left: 0;
            width: 100%;
            height: 100%;
            pointer-events: none;
            z-index: 4;
            background: linear-gradient(
                transparent 95%,
                rgba(0, 255, 255, 0.1) 96%,
                rgba(255, 0, 128, 0.08) 97%,
                rgba(138, 43, 226, 0.06) 98%,
                rgba(57, 255, 20, 0.04) 99%,
                transparent 100%
            );
            background-size: 100% 3px;
            animation: scanMove 0.05s linear infinite;
            mix-blend-mode: screen;
        }
        
        @keyframes scanMove {
            0% { transform: translateY(0); }
            100% { transform: translateY(3px); }
        }
        
        /* Enhanced Particle System */
        .particle-system {
            position: fixed;
            top: 0;
            left: 0;
            width: 100%;
            height: 100%;
            pointer-events: none;
            z-index: 2;
            overflow: hidden;
        }
        
        .particle {
            position: absolute;
            width: 4px;
            height: 4px;
            background: var(--neon-cyan);
            border-radius: 50%;
            filter: blur(1px);
            box-shadow: 
                0 0 10px currentColor,
                0 0 20px currentColor,
                0 0 30px rgba(0, 255, 255, 0.3);
            animation: particleFloat 12s linear infinite;
        }
        
        @keyframes particleFloat {
            0% {
                transform: translateY(100vh) translateX(0) rotate(0deg) scale(0);
                opacity: 0;
            }
            5% {
                opacity: 1;
                transform: translateY(95vh) translateX(20px) rotate(45deg) scale(1);
            }
            95% {
                opacity: 1;
                transform: translateY(5vh) translateX(-20px) rotate(315deg) scale(1);
            }
            100% {
                transform: translateY(0) translateX(0) rotate(360deg) scale(0);
                opacity: 0;
            }
        }
        
        .container {
            max-width: 1900px;
            margin: 0 auto;
            padding: 40px;
            position: relative;
            z-index: 10;
        }
        
        /* Enhanced Header with 3D Effects */
        .cyber-header {
            display: flex;
            justify-content: space-between;
            align-items: center;
            margin-bottom: 40px;
            padding: 50px 80px;
            background: 
                linear-gradient(135deg, var(--glass-primary) 0%, var(--glass-secondary) 50%, var(--glass-primary) 100%),
                radial-gradient(circle at 30% 30%, rgba(0, 255, 255, 0.2) 0%, transparent 60%),
                radial-gradient(circle at 70% 70%, rgba(255, 0, 128, 0.15) 0%, transparent 60%),
                rgba(0, 0, 0, 0.6);
            border: 3px solid var(--glass-border);
            border-radius: 25px;
            backdrop-filter: blur(30px) saturate(200%);
            box-shadow: 
                0 25px 50px rgba(0, 0, 0, 0.6),
                inset 0 3px 0 rgba(255, 255, 255, 0.2),
                var(--shadow-glow) rgba(0, 255, 255, 0.4);
            position: relative;
            overflow: hidden;
            transform-style: preserve-3d;
            animation: headerFloat 8s ease-in-out infinite;
        }
        
        @keyframes headerFloat {
            0%, 100% { 
                transform: translateY(0) rotateX(0deg) rotateY(0deg); 
            }
            50% { 
                transform: translateY(-5px) rotateX(2deg) rotateY(1deg); 
            }
        }
        
        .cyber-header::before {
            content: '';
            position: absolute;
            top: 0;
            left: -100%;
            width: 100%;
            height: 5px;
            background: linear-gradient(90deg, 
                transparent, 
                var(--neon-cyan), 
                var(--neon-pink), 
                var(--neon-purple),
                var(--neon-green),
                var(--neon-blue),
                transparent
            );
            animation: headerScan 6s linear infinite;
            filter: blur(1px);
        }
        
        @keyframes headerScan {
            0% { left: -100%; opacity: 0.8; }
            50% { opacity: 1; }
            100% { left: 100%; opacity: 0.8; }
        }
        
        .cyber-header::after {
            content: '';
            position: absolute;
            top: 0;
            left: 0;
            right: 0;
            bottom: 0;
            border-radius: 22px;
            background: linear-gradient(45deg, 
                transparent 30%, 
                rgba(255, 255, 255, 0.1) 50%, 
                transparent 70%
            );
            animation: headerShimmer 5s ease-in-out infinite;
            pointer-events: none;
        }
        
        @keyframes headerShimmer {
            0%, 100% { transform: translateX(-100%) skewX(-15deg); opacity: 0; }
            50% { transform: translateX(100%) skewX(-15deg); opacity: 1; }
        }
        
        .cyber-title {
            font-family: 'Orbitron', monospace;
            font-size: 3.5rem;
            font-weight: 900;
            background: linear-gradient(45deg, 
                var(--neon-cyan), var(--neon-pink), var(--neon-purple), 
                var(--neon-green), var(--neon-blue), var(--neon-orange),
                var(--neon-magenta), var(--neon-yellow)
            );
            background-size: 800% 800%;
            -webkit-background-clip: text;
            -webkit-text-fill-color: transparent;
            background-clip: text;
            animation: 
                titleFlow 8s ease-in-out infinite, 
                titleGlitch 12s ease-in-out infinite,
                titlePulse 4s ease-in-out infinite;
            text-transform: uppercase;
            letter-spacing: 8px;
            text-shadow: 
                0 0 30px rgba(0, 255, 255, 0.6),
                0 0 60px rgba(255, 0, 128, 0.4),
                0 0 90px rgba(138, 43, 226, 0.3);
            position: relative;
        }
        
        @keyframes titleFlow {
            0%, 100% { background-position: 0% 50%; }
            25% { background-position: 100% 25%; }
            50% { background-position: 50% 100%; }
            75% { background-position: 0% 75%; }
        }
        
        @keyframes titleGlitch {
            0%, 90%, 100% { transform: translate(0) scale(1); }
            91% { transform: translate(2px, -2px) scale(1.01); }
            92% { transform: translate(-2px, 2px) scale(0.99); }
            93% { transform: translate(1px, 1px) scale(1.005); }
            94% { transform: translate(0) scale(1); }
        }
        
        @keyframes titlePulse {
            0%, 100% { 
                text-shadow: 
                    0 0 30px rgba(0, 255, 255, 0.6),
                    0 0 60px rgba(255, 0, 128, 0.4),
                    0 0 90px rgba(138, 43, 226, 0.3);
            }
            50% { 
                text-shadow: 
                    0 0 50px rgba(0, 255, 255, 0.8),
                    0 0 100px rgba(255, 0, 128, 0.6),
                    0 0 150px rgba(138, 43, 226, 0.5);
            }
        }
        
        .status-panel {
            display: flex;
            align-items: center;
            gap: 25px;
            background: 
                linear-gradient(135deg, rgba(57, 255, 20, 0.2) 0%, rgba(57, 255, 20, 0.1) 100%),
                rgba(0, 0, 0, 0.5);
            padding: 25px 40px;
            border-radius: 20px;
            border: 3px solid rgba(57, 255, 20, 0.6);
            font-size: 1.2rem;
            color: var(--neon-green);
            backdrop-filter: blur(20px);
            box-shadow: 
                0 15px 40px rgba(57, 255, 20, 0.4),
                inset 0 2px 0 rgba(255, 255, 255, 0.2),
                var(--shadow-glow) var(--neon-green);
            animation: statusPulse 4s ease-in-out infinite;
            position: relative;
            overflow: hidden;
        }
        
        @keyframes statusPulse {
            0%, 100% { 
                box-shadow: 
                    0 15px 40px rgba(57, 255, 20, 0.4),
                    inset 0 2px 0 rgba(255, 255, 255, 0.2),
                    var(--shadow-glow) var(--neon-green);
            }
            50% { 
                box-shadow: 
                    0 20px 60px rgba(57, 255, 20, 0.6),
                    inset 0 2px 0 rgba(255, 255, 255, 0.3),
                    0 0 80px var(--neon-green);
            }
        }
        
        .status-panel::before {
            content: '';
            position: absolute;
            top: 0;
            left: -100%;
            width: 100%;
            height: 100%;
            background: linear-gradient(90deg, 
                transparent, 
                rgba(255, 255, 255, 0.2), 
                transparent
            );
            animation: statusShimmer 3s ease-in-out infinite;
        }
        
        @keyframes statusShimmer {
            0% { left: -100%; }
            100% { left: 100%; }
        }
        
        .status-dot {
            width: 15px;
            height: 15px;
            background: var(--neon-green);
            border-radius: 50%;
            box-shadow: 
                0 0 15px var(--neon-green),
                0 0 30px rgba(57, 255, 20, 0.5);
            animation: statusDotPulse 2s ease-in-out infinite;
        }
        
        @keyframes statusDotPulse {
            0%, 100% { 
                opacity: 1; 
                transform: scale(1); 
                box-shadow: 
                    0 0 15px var(--neon-green),
                    0 0 30px rgba(57, 255, 20, 0.5);
            }
            50% { 
                opacity: 0.7; 
                transform: scale(1.3); 
                box-shadow: 
                    0 0 25px var(--neon-green),
                    0 0 50px rgba(57, 255, 20, 0.7);
            }
        }
        
        /* Advanced 3D Interface Layout */
        .cyber-interface {
            display: grid;
            grid-template-columns: 450px 1fr 500px;
            gap: 40px;
            margin-bottom: 40px;
            transform-style: preserve-3d;
            perspective: 3000px;
        }
        
        /* Enhanced Glass Morphism Panels */
        .holo-panel {
            background: 
                linear-gradient(135deg, var(--glass-primary) 0%, var(--glass-secondary) 25%, var(--glass-primary) 50%, var(--glass-secondary) 75%, var(--glass-primary) 100%),
                radial-gradient(circle at 25% 25%, rgba(0, 255, 255, 0.2) 0%, transparent 60%),
                radial-gradient(circle at 75% 75%, rgba(255, 0, 128, 0.15) 0%, transparent 60%),
                radial-gradient(circle at 50% 50%, rgba(138, 43, 226, 0.1) 0%, transparent 70%),
                rgba(0, 0, 0, 0.5);
            border: 3px solid var(--glass-border);
            border-radius: 25px;
            padding: 40px;
            backdrop-filter: blur(40px) saturate(250%);
            position: relative;
            overflow: hidden;
            box-shadow: 
                0 25px 50px rgba(0, 0, 0, 0.6),
                inset 0 3px 0 rgba(255, 255, 255, 0.2),
                0 0 60px rgba(0, 255, 255, 0.2);
            transition: all 0.5s cubic-bezier(0.4, 0, 0.2, 1);
            transform-style: preserve-3d;
            animation: panelFloat 10s ease-in-out infinite;
        }
        
        @keyframes panelFloat {
            0%, 100% { 
                transform: translateY(0) rotateX(0deg) rotateY(0deg); 
            }
            50% { 
                transform: translateY(-8px) rotateX(2deg) rotateY(1deg); 
            }
        }
        
        .holo-panel:hover {
            transform: translateY(-15px) rotateX(8deg) rotateY(4deg) scale(1.02);
            box-shadow: 
                0 35px 70px rgba(0, 0, 0, 0.7),
                inset 0 3px 0 rgba(255, 255, 255, 0.3),
                var(--shadow-glow) var(--neon-cyan);
            border-color: rgba(255, 255, 255, 0.5);
        }
        
        .holo-panel::before {
            content: '';
            position: absolute;
            top: 0;
            left: 0;
            right: 0;
            bottom: 0;
            border-radius: 22px;
            padding: 3px;
            background: linear-gradient(135deg, 
                var(--neon-cyan), transparent, var(--neon-pink), 
                transparent, var(--neon-purple), transparent, var(--neon-green),
                transparent, var(--neon-blue), transparent
            );
            background-size: 600% 600%;
            mask: linear-gradient(#fff 0 0) content-box, linear-gradient(#fff 0 0);
            mask-composite: exclude;
            animation: panelGlow 12s ease-in-out infinite;
        }
        
        @keyframes panelGlow {
            0%, 100% { background-position: 0% 50%; opacity: 0.6; }
            25% { background-position: 100% 25%; opacity: 1; }
            50% { background-position: 50% 100%; opacity: 0.8; }
            75% { background-position: 0% 75%; opacity: 0.9; }
        }
        
        .holo-panel::after {
            content: '';
            position: absolute;
            top: 0;
            left: 0;
            right: 0;
            bottom: 0;
            border-radius: 22px;
            background: linear-gradient(45deg, 
                transparent 40%, 
                rgba(255, 255, 255, 0.15) 50%, 
                transparent 60%
            );
            animation: panelShimmer 7s ease-in-out infinite;
            pointer-events: none;
        }
        
        @keyframes panelShimmer {
            0%, 100% { transform: translateX(-100%) skewX(-20deg); opacity: 0; }
            50% { transform: translateX(100%) skewX(-20deg); opacity: 1; }
        }
        
        /* Enhanced 3D Interactive File Explorer */
        .file-explorer {
            perspective: 1500px;
            transform-style: preserve-3d;
        }
        
        .panel-header {
            display: flex;
            justify-content: space-between;
            align-items: center;
            margin-bottom: 30px;
            padding-bottom: 20px;
            border-bottom: 3px solid rgba(0, 255, 255, 0.4);
            position: relative;
        }
        
        .panel-header::after {
            content: '';
            position: absolute;
            bottom: -3px;
            left: 0;
            width: 0;
            height: 3px;
            background: linear-gradient(90deg, 
                var(--neon-cyan), 
                var(--neon-pink), 
                var(--neon-purple),
                var(--neon-green)
            );
            animation: headerUnderline 4s ease-in-out infinite;
        }
        
        @keyframes headerUnderline {
            0%, 100% { width: 0; }
            50% { width: 100%; }
        }
        
        .panel-title {
            font-family: 'Orbitron', monospace;
            font-size: 1.4rem;
            font-weight: 800;
            color: var(--neon-cyan);
            text-shadow: 
                0 0 20px rgba(0, 255, 255, 0.6),
                0 0 40px rgba(0, 255, 255, 0.3);
            text-transform: uppercase;
            letter-spacing: 3px;
            animation: panelTitleGlow 6s ease-in-out infinite;
        }
        
        @keyframes panelTitleGlow {
            0%, 100% { 
                text-shadow: 
                    0 0 20px rgba(0, 255, 255, 0.6),
                    0 0 40px rgba(0, 255, 255, 0.3);
            }
            50% { 
                text-shadow: 
                    0 0 30px rgba(0, 255, 255, 0.8),
                    0 0 60px rgba(0, 255, 255, 0.4);
            }
        }
        
        .file-tree {
            list-style: none;
            transform-style: preserve-3d;
        }
        
        .file-item {
            padding: 18px 25px;
            margin: 12px 0;
            border-radius: 18px;
            cursor: pointer;
            transition: all 0.4s cubic-bezier(0.4, 0, 0.2, 1);
            display: flex;
            align-items: center;
            gap: 20px;
            position: relative;
            overflow: hidden;
            transform-style: preserve-3d;
            background: 
                linear-gradient(135deg, rgba(0, 0, 0, 0.4) 0%, rgba(0, 0, 0, 0.2) 100%),
                rgba(0, 255, 255, 0.08);
            border: 2px solid rgba(0, 255, 255, 0.2);
            animation: fileItemFloat 12s ease-in-out infinite;
            backdrop-filter: blur(15px);
        }
        
        @keyframes fileItemFloat {
            0%, 100% { transform: translateY(0) rotateY(0deg); }
            50% { transform: translateY(-3px) rotateY(1deg); }
        }
        
        .file-item::before {
            content: '';
            position: absolute;
            left: 0;
            top: 0;
            bottom: 0;
            width: 0;
            background: linear-gradient(90deg, 
                var(--neon-cyan), 
                var(--neon-pink), 
                var(--neon-purple),
                var(--neon-green)
            );
            transition: width 0.4s ease;
            border-radius: 18px 0 0 18px;
            filter: blur(1px);
        }
        
        .file-item::after {
            content: '';
            position: absolute;
            top: 0;
            left: 0;
            right: 0;
            bottom: 0;
            border-radius: 16px;
            background: linear-gradient(45deg, 
                transparent 30%, 
                rgba(255, 255, 255, 0.1) 50%, 
                transparent 70%
            );
            transform: translateX(-100%) skewX(-15deg);
            transition: transform 0.6s ease;
            pointer-events: none;
        }
        
        .file-item:hover {
            background: 
                linear-gradient(135deg, rgba(0, 255, 255, 0.2) 0%, rgba(0, 255, 255, 0.1) 100%),
                rgba(0, 0, 0, 0.4);
            transform: translateX(20px) translateZ(30px) rotateY(8deg) rotateX(2deg) scale(1.05);
            box-shadow: 
                0 15px 40px rgba(0, 255, 255, 0.4),
                inset 0 2px 0 rgba(255, 255, 255, 0.2),
                var(--shadow-glow) rgba(0, 255, 255, 0.5);
            border-color: rgba(0, 255, 255, 0.6);
        }
        
        .file-item:hover::before {
            width: 8px;
        }
        
        .file-item:hover::after {
            transform: translateX(100%) skewX(-15deg);
        }
        
        .file-item.active {
            background: 
                linear-gradient(135deg, rgba(0, 255, 255, 0.3) 0%, rgba(0, 255, 255, 0.2) 100%),
                rgba(0, 0, 0, 0.5);
            border-left: 8px solid var(--neon-cyan);
            box-shadow: 
                0 20px 50px rgba(0, 255, 255, 0.5),
                inset 0 2px 0 rgba(255, 255, 255, 0.25),
                var(--shadow-glow) var(--neon-cyan);
            transform: translateX(15px) translateZ(20px) rotateY(3deg) scale(1.03);
        }
        
        /* Enhanced Animated File Icons */
        .file-icon {
            width: 30px;
            height: 30px;
            display: flex;
            align-items: center;
            justify-content: center;
            font-size: 20px;
            filter: 
                drop-shadow(0 0 15px currentColor) 
                drop-shadow(0 0 8px rgba(255, 255, 255, 0.4));
            transition: all 0.4s cubic-bezier(0.4, 0, 0.2, 1);
            transform-style: preserve-3d;
            animation: iconFloat 8s ease-in-out infinite;
            position: relative;
        }
        
        .file-icon::before {
            content: '';
            position: absolute;
            top: -6px;
            left: -6px;
            right: -6px;
            bottom: -6px;
            background: radial-gradient(circle, rgba(0, 255, 255, 0.3) 0%, transparent 70%);
            border-radius: 50%;
            opacity: 0;
            transition: all 0.4s ease;
            z-index: -1;
            animation: iconHalo 8s linear infinite;
        }
        
        @keyframes iconHalo {
            0% { transform: rotate(0deg) scale(1); opacity: 0.3; }
            50% { transform: rotate(180deg) scale(1.2); opacity: 0.6; }
            100% { transform: rotate(360deg) scale(1); opacity: 0.3; }
        }
        
        .file-item:hover .file-icon {
            transform: rotateY(720deg) rotateX(15deg) rotateZ(10deg) scale(1.3) translateZ(15px);
            filter: 
                drop-shadow(0 0 25px currentColor) 
                drop-shadow(0 0 15px rgba(255, 255, 255, 0.6));
            animation: iconHover 3s ease-in-out infinite;
        }
        
        .file-item:hover .file-icon::before {
            opacity: 1;
            transform: scale(1.5) rotate(180deg);
        }
        
        @keyframes iconFloat {
            0%, 100% { 
                transform: translateY(0) rotateZ(0deg); 
            }
            50% { 
                transform: translateY(-3px) rotateZ(2deg); 
            }
        }
        
        @keyframes iconHover {
            0%, 100% { 
                transform: rotateY(720deg) rotateX(15deg) rotateZ(10deg) scale(1.3) translateZ(15px);
            }
            50% { 
                transform: rotateY(720deg) rotateX(15deg) rotateZ(10deg) scale(1.5) translateZ(20px);
            }
        }
        
        .file-name {
            font-weight: 700;
            color: #f0f0f0;
            transition: all 0.4s ease;
            text-shadow: 
                0 0 8px rgba(255, 255, 255, 0.3);
            font-size: 1.05rem;
        }
        
        .file-item:hover .file-name,
        .file-item.active .file-name {
            color: var(--neon-cyan);
            text-shadow: 
                0 0 15px rgba(0, 255, 255, 0.7),
                0 0 30px rgba(0, 255, 255, 0.4);
            transform: translateX(5px) scale(1.05);
        }
        
        /* Enhanced Code Editor */
        .cyber-code-editor {
            background: 
                linear-gradient(135deg, rgba(0, 0, 0, 0.95) 0%, rgba(0, 40, 20, 0.9) 50%, rgba(0, 30, 15, 0.92) 100%),
                radial-gradient(circle at 20% 20%, rgba(57, 255, 20, 0.1) 0%, transparent 60%),
                radial-gradient(circle at 80% 80%, rgba(0, 255, 255, 0.08) 0%, transparent 60%),
                rgba(0, 0, 0, 0.8);
            border: 3px solid var(--neon-green);
            border-radius: 20px;
            padding: 40px;
            font-family: 'Fira Code', monospace;
            font-size: 17px;
            color: var(--neon-green);
            min-height: 700px;
            position: relative;
            overflow: hidden;
            box-shadow: 
                inset 0 0 80px rgba(57, 255, 20, 0.2),
                var(--shadow-glow) var(--neon-green);
            transform-style: preserve-3d;
            animation: codeEditorPulse 10s ease-in-out infinite;
            backdrop-filter: blur(20px);
        }
        
        @keyframes codeEditorPulse {
            0%, 100% { 
                box-shadow: 
                    inset 0 0 80px rgba(57, 255, 20, 0.2),
                    var(--shadow-glow) var(--neon-green);
                border-color: var(--neon-green);
            }
            50% { 
                box-shadow: 
                    inset 0 0 100px rgba(57, 255, 20, 0.3),
                    0 0 80px var(--neon-green);
                border-color: rgba(57, 255, 20, 0.8);
            }
        }
        
        .cyber-code-editor::before {
            content: '';
            position: absolute;
            top: 0;
            left: -100%;
            width: 100%;
            height: 6px;
            background: linear-gradient(90deg, 
                transparent, 
                var(--neon-green), 
                var(--neon-cyan), 
                var(--neon-pink),
                var(--neon-purple),
                transparent
            );
            animation: codeScan 8s linear infinite;
            filter: blur(2px);
        }
        
        @keyframes codeScan {
            0% { left: -100%; opacity: 0.8; }
            50% { opacity: 1; }
            100% { left: 100%; opacity: 0.8; }
        }
        
        .cyber-code-editor::after {
            content: '';
            position: absolute;
            top: 0;
            left: 0;
            right: 0;
            bottom: 0;
            border-radius: 17px;
            background: 
                linear-gradient(135deg, transparent 30%, rgba(57, 255, 20, 0.05) 50%, transparent 70%),
                radial-gradient(circle at 50% 50%, rgba(255, 255, 255, 0.03) 0%, transparent 70%);
            pointer-events: none;
            animation: codeEditorShimmer 8s ease-in-out infinite;
        }
        
        @keyframes codeEditorShimmer {
            0%, 100% { opacity: 0.3; }
            50% { opacity: 0.6; }
        }
        
        .code-line {
            display: flex;
            margin-bottom: 15px;
            padding: 12px 0;
            border-radius: 12px;
            transition: all 0.4s cubic-bezier(0.4, 0, 0.2, 1);
            animation: codeLineAppear 2s ease-out;
            position: relative;
            transform-style: preserve-3d;
        }
        
        .code-line:hover {
            background: 
                linear-gradient(135deg, rgba(57, 255, 20, 0.2) 0%, rgba(0, 255, 255, 0.15) 50%, rgba(138, 43, 226, 0.1) 100%),
                rgba(0, 0, 0, 0.5);
            transform: translateX(20px) translateZ(15px) rotateY(2deg) scale(1.02);
            box-shadow: 
                0 10px 30px rgba(57, 255, 20, 0.5), 
                inset 0 0 20px rgba(0, 255, 255, 0.3);
            border: 2px solid rgba(57, 255, 20, 0.5);
            backdrop-filter: blur(15px);
        }
        
        @keyframes codeLineAppear {
            from { 
                opacity: 0; 
                transform: translateX(-50px) scale(0.8) rotateY(-10deg);
                filter: blur(8px);
            }
            to { 
                opacity: 1; 
                transform: translateX(0) scale(1) rotateY(0deg);
                filter: blur(0);
            }
        }
        
        .line-number {
            color: rgba(255, 255, 255, 0.7);
            margin-right: 40px;
            width: 80px;
            text-align: right;
            font-weight: 800;
            user-select: none;
            text-shadow: 
                0 0 8px rgba(255, 255, 255, 0.4);
            animation: lineNumberGlow 6s ease-in-out infinite;
            position: relative;
        }
        
        @keyframes lineNumberGlow {
            0%, 100% { 
                text-shadow: 
                    0 0 8px rgba(255, 255, 255, 0.4);
            }
            50% { 
                text-shadow: 
                    0 0 15px rgba(255, 255, 255, 0.6),
                    0 0 25px rgba(0, 255, 255, 0.3);
            }
        }
        
        .line-number::after {
            content: '';
            position: absolute;
            right: -20px;
            top: 0;
            bottom: 0;
            width: 3px;
            background: linear-gradient(180deg, 
                transparent, 
                rgba(0, 255, 255, 0.6), 
                rgba(255, 0, 128, 0.4),
                rgba(138, 43, 226, 0.3),
                transparent
            );
            border-radius: 2px;
            animation: lineBar 8s ease-in-out infinite;
        }
        
        @keyframes lineBar {
            0%, 100% { 
                background: linear-gradient(180deg, 
                    transparent, 
                    rgba(0, 255, 255, 0.6), 
                    rgba(255, 0, 128, 0.4),
                    rgba(138, 43, 226, 0.3),
                    transparent
                );
            }
            50% { 
                background: linear-gradient(180deg, 
                    transparent, 
                    rgba(57, 255, 20, 0.7), 
                    rgba(0, 128, 255, 0.5),
                    rgba(255, 0, 255, 0.4),
                    transparent
                );
            }
        }
        
        /* Enhanced Syntax Highlighting */
        .keyword { 
            color: #ff6b9d; 
            font-weight: 800;
            text-shadow: 
                0 0 20px rgba(255, 107, 157, 0.8),
                0 0 40px rgba(255, 107, 157, 0.4);
            animation: keywordPulse 10s ease-in-out infinite;
        }
        
        @keyframes keywordPulse {
            0%, 100% { 
                text-shadow: 
                    0 0 20px rgba(255, 107, 157, 0.8),
                    0 0 40px rgba(255, 107, 157, 0.4);
            }
            50% { 
                text-shadow: 
                    0 0 30px rgba(255, 107, 157, 1),
                    0 0 60px rgba(255, 107, 157, 0.5);
            }
        }
        
        .string { 
            color: #4ecdc4; 
            font-weight: 700;
            text-shadow: 
                0 0 18px rgba(78, 205, 196, 0.7),
                0 0 35px rgba(78, 205, 196, 0.3);
            animation: stringShimmer 12s ease-in-out infinite;
        }
        
        @keyframes stringShimmer {
            0%, 100% { 
                text-shadow: 
                    0 0 18px rgba(78, 205, 196, 0.7),
                    0 0 35px rgba(78, 205, 196, 0.3);
            }
            50% { 
                text-shadow: 
                    0 0 25px rgba(78, 205, 196, 0.9),
                    0 0 50px rgba(78, 205, 196, 0.4);
            }
        }
        
        .function { 
            color: #ffe66d; 
            font-weight: 800;
            text-shadow: 
                0 0 20px rgba(255, 230, 109, 0.7),
                0 0 40px rgba(255, 230, 109, 0.3);
            animation: functionGlow 11s ease-in-out infinite;
        }
        
        @keyframes functionGlow {
            0%, 100% { 
                text-shadow: 
                    0 0 20px rgba(255, 230, 109, 0.7),
                    0 0 40px rgba(255, 230, 109, 0.3);
            }
            50% { 
                text-shadow: 
                    0 0 30px rgba(255, 230, 109, 0.9),
                    0 0 60px rgba(255, 230, 109, 0.4);
            }
        }
        
        .comment {
            color: #999;
            font-style: italic;
            text-shadow: 0 0 5px rgba(153, 153, 153, 0.3);
            opacity: 0.8;
        }
        
        .property {
            color: #a8e6cf;
            font-weight: 600;
            text-shadow: 
                0 0 10px rgba(168, 230, 207, 0.4);
        }
        
        .operator {
            color: #ff8b94;
            font-weight: 700;
            text-shadow: 
                0 0 12px rgba(255, 139, 148, 0.5);
        }
        
        /* Enhanced Analytics Panel */
        .analytics-grid {
            display: grid;
            grid-template-columns: 1fr 1fr;
            gap: 25px;
            margin-bottom: 30px;
        }
        
        .metric-card {
            background: 
                linear-gradient(135deg, rgba(0, 0, 0, 0.7) 0%, rgba(0, 0, 0, 0.4) 100%),
                rgba(0, 255, 255, 0.08);
            border: 2px solid rgba(0, 255, 255, 0.4);
            border-radius: 18px;
            padding: 25px;
            position: relative;
            overflow: hidden;
            transition: all 0.4s ease;
            animation: metricCardFloat 14s ease-in-out infinite;
            backdrop-filter: blur(15px);
        }
        
        @keyframes metricCardFloat {
            0%, 100% { transform: translateY(0) scale(1); }
            50% { transform: translateY(-5px) scale(1.01); }
        }
        
        .metric-card:hover {
            transform: translateY(-8px) scale(1.05);
            border-color: rgba(0, 255, 255, 0.7);
            box-shadow: 
                0 15px 40px rgba(0, 255, 255, 0.3),
                inset 0 0 25px rgba(0, 255, 255, 0.1);
        }
        
        .metric-card::before {
            content: '';
            position: absolute;
            top: 0;
            left: 0;
            right: 0;
            bottom: 0;
            border-radius: 16px;
            background: linear-gradient(45deg, 
                transparent 40%, 
                rgba(255, 255, 255, 0.1) 50%, 
                transparent 60%
            );
            transform: translateX(-100%) skewX(-15deg);
            transition: transform 0.8s ease;
            pointer-events: none;
        }
        
        .metric-card:hover::before {
            transform: translateX(100%) skewX(-15deg);
        }
        
        .metric-label {
            font-size: 1rem;
            color: #ddd;
            margin-bottom: 12px;
            text-transform: uppercase;
            letter-spacing: 2px;
            font-weight: 600;
        }
        
        .metric-value {
            font-size: 2rem;
            font-weight: 800;
            color: var(--neon-cyan);
            text-shadow: 
                0 0 20px rgba(0, 255, 255, 0.6),
                0 0 40px rgba(0, 255, 255, 0.3);
            margin-bottom: 15px;
            animation: metricValuePulse 6s ease-in-out infinite;
        }
        
        @keyframes metricValuePulse {
            0%, 100% { 
                text-shadow: 
                    0 0 20px rgba(0, 255, 255, 0.6),
                    0 0 40px rgba(0, 255, 255, 0.3);
            }
            50% { 
                text-shadow: 
                    0 0 30px rgba(0, 255, 255, 0.8),
                    0 0 60px rgba(0, 255, 255, 0.4);
            }
        }
        
        .metric-bar {
            width: 100%;
            height: 8px;
            background: rgba(0, 0, 0, 0.6);
            border-radius: 4px;
            overflow: hidden;
            position: relative;
        }
        
        .metric-fill {
            height: 100%;
            border-radius: 4px;
            transition: width 2s ease;
            position: relative;
            animation: metricFillPulse 4s ease-in-out infinite;
        }
        
        @keyframes metricFillPulse {
            0%, 100% { filter: brightness(1) saturate(1); }
            50% { filter: brightness(1.3) saturate(1.5); }
        }
        
        .cpu-fill {
            background: linear-gradient(90deg, 
                var(--neon-pink), 
                var(--neon-purple),
                var(--neon-magenta)
            );
            width: 85%;
            box-shadow: 0 0 15px rgba(255, 0, 128, 0.5);
        }
        
        .memory-fill {
            background: linear-gradient(90deg, 
                var(--neon-green), 
                var(--neon-cyan),
                var(--neon-blue)
            );
            width: 72%;
            box-shadow: 0 0 15px rgba(57, 255, 20, 0.5);
        }
        
        .network-fill {
            background: linear-gradient(90deg, 
                var(--neon-blue), 
                var(--neon-cyan),
                var(--neon-green)
            );
            width: 68%;
            box-shadow: 0 0 15px rgba(0, 128, 255, 0.5);
        }
        
        .storage-fill {
            background: linear-gradient(90deg, 
                var(--neon-orange), 
                var(--neon-yellow),
                var(--neon-pink)
            );
            width: 59%;
            box-shadow: 0 0 15px rgba(255, 68, 0, 0.5);
        }
        
        /* Enhanced Data Visualization */
        .data-viz {
            height: 140px;
            position: relative;
            background: 
                linear-gradient(135deg, rgba(0, 0, 0, 0.8) 0%, rgba(0, 0, 0, 0.5) 100%),
                rgba(0, 255, 255, 0.1);
            border: 2px solid rgba(0, 255, 255, 0.3);
            border-radius: 15px;
            margin-bottom: 30px;
            overflow: hidden;
            animation: dataVizPulse 8s ease-in-out infinite;
            backdrop-filter: blur(15px);
        }
        
        @keyframes dataVizPulse {
            0%, 100% { 
                border-color: rgba(0, 255, 255, 0.3);
                box-shadow: 0 0 20px rgba(0, 255, 255, 0.2);
            }
            50% { 
                border-color: rgba(0, 255, 255, 0.5);
                box-shadow: 0 0 40px rgba(0, 255, 255, 0.3);
            }
        }
        
        .viz-line {
            position: absolute;
            bottom: 0;
            width: 5px;
            background: linear-gradient(180deg, 
                transparent, 
                var(--neon-cyan), 
                var(--neon-pink),
                var(--neon-purple)
            );
            border-radius: 3px 3px 0 0;
            animation: vizPulse 4s ease-in-out infinite;
            box-shadow: 0 0 15px rgba(0, 255, 255, 0.5);
        }
        
        @keyframes vizPulse {
            0%, 100% { 
                height: 25%; 
                opacity: 0.7;
                transform: scaleY(1);
            }
            25% { 
                height: 85%; 
                opacity: 1;
                transform: scaleY(1.1);
            }
            50% { 
                height: 65%; 
                opacity: 0.9;
                transform: scaleY(1.05);
            }
            75% { 
                height: 95%; 
                opacity: 1;
                transform: scaleY(1.15);
            }
        }
        
        /* Enhanced Activity Feed */
        .activity-feed {
            max-height: 350px;
            overflow-y: auto;
            padding-right: 15px;
        }
        
        .activity-item {
            display: flex;
            align-items: flex-start;
            gap: 20px;
            padding: 15px 0;
            border-bottom: 2px solid rgba(0, 255, 255, 0.15);
            animation: activityAppear 1.5s ease-out;
            transition: all 0.4s ease;
        }
        
        .activity-item:hover {
            background: rgba(0, 255, 255, 0.06);
            transform: translateX(10px);
            border-bottom-color: rgba(0, 255, 255, 0.3);
            backdrop-filter: blur(10px);
        }
        
        .activity-time {
            font-size: 1rem;
            color: rgba(255, 255, 255, 0.7);
            font-weight: 700;
            min-width: 70px;
            text-shadow: 0 0 8px rgba(255, 255, 255, 0.3);
        }
        
        .activity-message {
            font-size: 1.05rem;
            color: #f0f0f0;
            line-height: 1.5;
            font-weight: 500;
        }
        
        @keyframes activityAppear {
            from { 
                opacity: 0; 
                transform: translateX(-30px) scale(0.9);
                filter: blur(3px);
            }
            to { 
                opacity: 1; 
                transform: translateX(0) scale(1);
                filter: blur(0);
            }
        }
        
        /* Enhanced Custom Scrollbar */
        ::-webkit-scrollbar {
            width: 14px;
        }
        
        ::-webkit-scrollbar-track {
            background: 
                linear-gradient(135deg, rgba(0, 0, 0, 0.8) 0%, rgba(0, 0, 0, 0.6) 100%),
                rgba(0, 255, 255, 0.05);
            border-radius: 8px;
            border: 2px solid rgba(0, 255, 255, 0.2);
        }
        
        ::-webkit-scrollbar-thumb {
            background: linear-gradient(45deg, 
                var(--neon-cyan), 
                var(--neon-pink), 
                var(--neon-purple),
                var(--neon-green)
            );
            background-size: 400% 400%;
            border-radius: 8px;
            box-shadow: 
                var(--shadow-glow) var(--neon-cyan),
                inset 0 2px 0 rgba(255, 255, 255, 0.2);
            transition: all 0.3s ease;
            animation: scrollbarGlow 8s ease-in-out infinite;
        }
        
        @keyframes scrollbarGlow {
            0%, 100% { background-position: 0% 50%; }
            25% { background-position: 100% 25%; }
            50% { background-position: 50% 100%; }
            75% { background-position: 0% 75%; }
        }
        
        ::-webkit-scrollbar-thumb:hover {
            background: linear-gradient(45deg, 
                var(--neon-pink), 
                var(--neon-purple), 
                var(--neon-blue),
                var(--neon-orange)
            );
            box-shadow: 
                0 0 60px var(--neon-pink),
                inset 0 2px 0 rgba(255, 255, 255, 0.4);
            transform: scale(1.1);
        }
        
        /* Responsive Design */
        @media (max-width: 1600px) {
            .cyber-interface {
                grid-template-columns: 400px 1fr 450px;
                gap: 35px;
            }
            
            .cyber-title {
                font-size: 3rem;
                letter-spacing: 6px;
            }
        }
        
        @media (max-width: 1400px) {
            .cyber-interface {
                grid-template-columns: 350px 1fr 400px;
                gap: 30px;
            }
            
            .cyber-title {
                font-size: 2.5rem;
                letter-spacing: 5px;
            }
        }
        
        @media (max-width: 1200px) {
            .cyber-interface {
                grid-template-columns: 300px 1fr 350px;
                gap: 25px;
            }
            
            .cyber-title {
                font-size: 2rem;
                letter-spacing: 4px;
            }
        }
        
        @media (max-width: 1000px) {
            .cyber-interface {
                grid-template-columns: 1fr;
                gap: 25px;
            }
            
            .cyber-header {
                flex-direction: column;
                gap: 25px;
                padding: 35px;
            }
            
            .cyber-title {
                font-size: 1.8rem;
                letter-spacing: 3px;
            }
        }
        
        @media (max-width: 768px) {
            .container {
                padding: 20px;
            }
            
            .cyber-header {
                padding: 25px;
            }
            
            .cyber-title {
                font-size: 1.5rem;
                letter-spacing: 2px;
            }
            
            .holo-panel {
                padding: 25px;
            }
        }
    </style>
</head>
<body>
    <!-- Enhanced Digital Effects -->
    <div class="glitch-overlay"></div>
    <div class="scan-lines"></div>
    
    <!-- Enhanced Floating Particles -->
    <div class="particle-system" id="particleSystem"></div>

    <div class="container">
        <!-- Enhanced Header -->
        <header class="cyber-header">
            <h1 class="cyber-title">CyberCode Nexus</h1>
            <div class="status-panel">
                <div class="status-dot"></div>
                <span>Neural Link Active • Holographic Matrix Online • Quantum Processing</span>
            </div>
        </header>
        
        <!-- Enhanced 3D Interface -->
        <div class="cyber-interface">
            <!-- Enhanced File Explorer -->
            <div class="holo-panel">
                <div class="panel-header">
                    <h2 class="panel-title">Neural Explorer</h2>
                    <span style="color: #666; font-size: 1.2rem;">🧠</span>
                </div>
                
                <div class="file-explorer">
                    <ul class="file-tree">
                        <li class="file-item active" data-file="neural_core.js">
                            <span class="file-icon">🧠</span>
                            <span class="file-name">neural_core.js</span>
                        </li>
                        <li class="file-item" data-file="cyber_matrix.ts">
                            <span class="file-icon">⚡</span>
                            <span class="file-name">cyber_matrix.ts</span>
                        </li>
                        <li class="file-item" data-file="holo_interface.jsx">
                            <span class="file-icon">🔮</span>
                            <span class="file-name">holo_interface.jsx</span>
                        </li>
                        <li class="file-item" data-file="quantum_ai.py">
                            <span class="file-icon">🌌</span>
                            <span class="file-name">quantum_ai.py</span>
                        </li>
                        <li class="file-item" data-file="cyber_security.cpp">
                            <span class="file-icon">🛡️</span>
                            <span class="file-name">cyber_security.cpp</span>
                        </li>
                        <li class="file-item" data-file="data_stream.rs">
                            <span class="file-icon">📡</span>
                            <span class="file-name">data_stream.rs</span>
                        </li>
                        <li class="file-item" data-file="neural_net.go">
                            <span class="file-icon">🔗</span>
                            <span class="file-name">neural_net.go</span>
                        </li>
                        <li class="file-item" data-file="hologram.swift">
                            <span class="file-icon">🌈</span>
                            <span class="file-name">hologram.swift</span>
                        </li>
                        <li class="file-item">
                            <span class="file-icon">📁</span>
                            <span class="file-name">components/</span>
                        </li>
                        <li class="file-item" style="margin-left: 35px;" data-file="HoloPanel.jsx">
                            <span class="file-icon">🔷</span>
                            <span class="file-name">HoloPanel.jsx</span>
                        </li>
                        <li class="file-item" style="margin-left: 35px;" data-file="DataViz3D.jsx">
                            <span class="file-icon">📊</span>
                            <span class="file-name">DataViz3D.jsx</span>
                        </li>
                        <li class="file-item" style="margin-left: 35px;" data-file="NeuralCore.jsx">
                            <span class="file-icon">🧬</span>
                            <span class="file-name">NeuralCore.jsx</span>
                        </li>
                        <li class="file-item" style="margin-left: 35px;" data-file="GlitchEngine.jsx">
                            <span class="file-icon">⚡</span>
                            <span class="file-name">GlitchEngine.jsx</span>
                        </li>
                        <li class="file-item" data-file="config.json">
                            <span class="file-icon">⚙️</span>
                            <span class="file-name">config.json</span>
                        </li>
                    </ul>
                </div>
            </div>
            
            <!-- Enhanced Code Editor -->
            <div class="holo-panel">
                <div class="panel-header">
                    <h2 class="panel-title">Quantum Code Matrix</h2>
                    <span style="color: #666; font-size: 0.9rem;" id="currentFile">neural_core.js</span>
                </div>
                
                <div class="cyber-code-editor" id="codeEditor">
                    <div class="code-line">
                        <span class="line-number">1</span>
                        <span class="code-content"><span class="keyword">import</span> { <span class="function">NeuralProcessor</span>, <span class="function">HoloCore</span>, <span class="function">CyberMatrix</span>, <span class="function">QuantumAI</span> } <span class="keyword">from</span> <span class="string">'@cyber/neural-core'</span>;</span>
                    </div>
                    <div class="code-line">
                        <span class="line-number">2</span>
                        <span class="code-content"><span class="keyword">import</span> { <span class="function">Analytics</span>, <span class="function">DataViz3D</span>, <span class="function">RealTimeMonitor</span>, <span class="function">MetricsEngine</span> } <span class="keyword">from</span> <span class="string">'@cyber/analytics'</span>;</span>
                    </div>
                    <div class="code-line">
                        <span class="line-number">3</span>
                        <span class="code-content"><span class="keyword">import</span> { <span class="function">GlassMorphism</span>, <span class="function">ParticleSystem</span>, <span class="function">GlitchEngine</span>, <span class="function">HolographicUI</span> } <span class="keyword">from</span> <span class="string">'@cyber/effects'</span>;</span>
                    </div>
                    <div class="code-line">
                        <span class="line-number">4</span>
                        <span class="code-content"><span class="keyword">import</span> { <span class="function">NeonShaders</span>, <span class="function">CyberTheme</span>, <span class="function">QuantumRenderer</span> } <span class="keyword">from</span> <span class="string">'@cyber/visual-engine'</span>;</span>
                    </div>
                    <div class="code-line">
                        <span class="line-number">5</span>
                        <span class="code-content"></span>
                    </div>
                    <div class="code-line">
                        <span class="line-number">6</span>
                        <span class="code-content"><span class="comment">// Advanced Neural Network System with Holographic 3D Interface</span></span>
                    </div>
                    <div class="code-line">
                        <span class="line-number">7</span>
                        <span class="code-content"><span class="keyword">class</span> <span class="function">NeuralCoreSystem</span> <span class="keyword">extends</span> <span class="function">QuantumCyberSystem</span> {</span>
                    </div>
                    <div class="code-line">
                        <span class="line-number">8</span>
                        <span class="code-content">  <span class="keyword">constructor</span>(<span class="property">config</span>) {</span>
                    </div>
                    <div class="code-line">
                        <span class="line-number">9</span>
                        <span class="code-content">    <span class="keyword">super</span>(<span class="property">config</span>);</span>
                    </div>
                    <div class="code-line">
                        <span class="line-number">10</span>
                        <span class="code-content">    <span class="keyword">this</span><span class="operator">.</span><span class="property">neuralProcessor</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="function">NeuralProcessor</span>(<span class="property">config</span>);</span>
                    </div>
                    <div class="code-line">
                        <span class="line-number">11</span>
                        <span class="code-content">    <span class="keyword">this</span><span class="operator">.</span><span class="property">holoCore</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="function">HoloCore</span>({ <span class="property">dimension</span>: <span class="string">'3D'</span>, <span class="property">holographic</span>: <span class="keyword">true</span>, <span class="property">quantum</span>: <span class="keyword">true</span> });</span>
                    </div>
                    <div class="code-line">
                        <span class="line-number">12</span>
                        <span class="code-content">    <span class="keyword">this</span><span class="operator">.</span><span class="property">cyberMatrix</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="function">CyberMatrix</span>({ <span class="property">neural</span>: <span class="keyword">true</span>, <span class="property">cyberpunk</span>: <span class="keyword">true</span>, <span class="property">advanced</span>: <span class="keyword">true</span> });</span>
                    </div>
                    <div class="code-line">
                        <span class="line-number">13</span>
                        <span class="code-content">    <span class="keyword">this</span><span class="operator">.</span><span class="property">quantumAI</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="function">QuantumAI</span>({ <span class="property">neural</span>: <span class="keyword">true</span>, <span class="property">predictive</span>: <span class="keyword">true</span>, <span class="property">quantum</span>: <span class="keyword">true</span> });</span>
                    </div>
                    <div class="code-line">
                        <span class="line-number">14</span>
                        <span class="code-content">    <span class="keyword">this</span><span class="operator">.</span><span class="property">analytics</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="function">Analytics</span>({ <span class="property">realTime</span>: <span class="keyword">true</span>, <span class="property">cyberpunk</span>: <span class="keyword">true</span>, <span class="property">advanced</span>: <span class="keyword">true</span> });</span>
                    </div>
                    <div class="code-line">
                        <span class="line-number">15</span>
                        <span class="code-content">    <span class="keyword">this</span><span class="operator">.</span><span class="property">dataViz3D</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="function">DataViz3D</span>({ <span class="property">holographic</span>: <span class="keyword">true</span>, <span class="property">interactive</span>: <span class="keyword">true</span>, <span class="property">realTime</span>: <span class="keyword">true</span> });</span>
                    </div>
                    <div class="code-line">
                        <span class="line-number">16</span>
                        <span class="code-content">    <span class="keyword">this</span><span class="operator">.</span><span class="property">monitor</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="function">RealTimeMonitor</span>({ <span class="property">neural</span>: <span class="keyword">true</span>, <span class="property">quantum</span>: <span class="keyword">true</span>, <span class="property">cyberpunk</span>: <span class="keyword">true</span> });</span>
                    </div>
                    <div class="code-line">
                        <span class="line-number">17</span>
                        <span class="code-content">    <span class="keyword">this</span><span class="operator">.</span><span class="property">metricsEngine</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="function">MetricsEngine</span>({ <span class="property">advanced</span>: <span class="keyword">true</span>, <span class="property">realTime</span>: <span class="keyword">true</span> });</span>
                    </div>
                    <div class="code-line">
                        <span class="line-number">18</span>
                        <span class="code-content">    <span class="keyword">this</span><span class="operator">.</span><span class="property">glassMorphism</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="function">GlassMorphism</span>({ <span class="property">blur</span>: <span class="string">'40px'</span>, <span class="property">opacity</span>: <span class="string">0.15</span>, <span class="property">advanced</span>: <span class="keyword">true</span> });</span>
                    </div>
                    <div class="code-line">
                        <span class="line-number">19</span>
                        <span class="code-content">    <span class="keyword">this</span><span class="operator">.</span><span class="property">particles</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="function">ParticleSystem</span>({ <span class="property">neural</span>: <span class="keyword">true</span>, <span class="property">floating</span>: <span class="keyword">true</span>, <span class="property">quantum</span>: <span class="keyword">true</span> });</span>
                    </div>
                    <div class="code-line">
                        <span class="line-number">20</span>
                        <span class="code-content">    <span class="keyword">this</span><span class="operator">.</span><span class="property">glitchEngine</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="function">GlitchEngine</span>({ <span class="property">intensity</span>: <span class="string">'high'</span>, <span class="property">scanLines</span>: <span class="keyword">true</span>, <span class="property">colorShift</span>: <span class="keyword">true</span> });</span>
                    </div>
                    <div class="code-line">
                        <span class="line-number">21</span>
                        <span class="code-content">    <span class="keyword">this</span><span class="operator">.</span><span class="property">holographicUI</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="function">HolographicUI</span>({ <span class="property">dimension</span>: <span class="string">'3D'</span>, <span class="property">interactive</span>: <span class="keyword">true</span>, <span class="property">cyberpunk</span>: <span class="keyword">true</span> });</span>
                    </div>
                    <div class="code-line">
                        <span class="line-number">22</span>
                        <span class="code-content">    <span class="keyword">this</span><span class="operator">.</span><span class="property">neonShaders</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="function">NeonShaders</span>({ <span class="property">neon</span>: <span class="keyword">true</span>, <span class="property">holographic</span>: <span class="keyword">true</span> });</span>
                    </div>
                    <div class="code-line">
                        <span class="line-number">23</span>
                        <span class="code-content">    <span class="keyword">this</span><span class="operator">.</span><span class="property">cyberTheme</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="function">CyberTheme</span>({ <span class="property">mode</span>: <span class="string">'advanced'</span>, <span class="property">holographic</span>: <span class="keyword">true</span> });</span>
                    </div>
                    <div class="code-line">
                        <span class="line-number">24</span>
                        <span class="code-content">    <span class="keyword">this</span><span class="operator">.</span><span class="property">quantumRenderer</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="function">QuantumRenderer</span>({ <span class="property">advanced</span>: <span class="keyword">true</span>, <span class="property">holographic</span>: <span class="keyword">true</span> });</span>
                    </div>
                    <div class="code-line">
                        <span class="line-number">25</span>
                        <span class="code-content">  }</span>
                    </div>
                    <div class="code-line">
                        <span class="line-number">26</span>
                        <span class="code-content"></span>
                    </div>
                    <div class="code-line">
                        <span class="line-number">27</span>
                        <span class="code-content">  <span class="keyword">async</span> <span class="function">initializeNeuralNetwork</span>() {</span>
                    </div>
                    <div class="code-line">
                        <span class="line-number">28</span>
                        <span class="code-content">    <span class="keyword">try</span> {</span>
                    </div>
                    <div class="code-line">
                        <span class="line-number">29</span>
                        <span class="code-content">      <span class="keyword">await</span> <span class="keyword">this</span><span class="operator">.</span><span class="property">neuralProcessor</span><span class="operator">.</span><span class="function">connect</span>();</span>
                    </div>
                    <div class="code-line">
                        <span class="line-number">30</span>
                        <span class="code-content">      <span class="keyword">await</span> <span class="keyword">this</span><span class="operator">.</span><span class="property">holoCore</span><span class="operator">.</span><span class="function">activate</span>();</span>
                    </div>
                    <div class="code-line">
                        <span class="line-number">31</span>
                        <span class="code-content">      <span class="keyword">await</span> <span class="keyword">this</span><span class="operator">.</span><span class="property">cyberMatrix</span><span class="operator">.</span><span class="function">synchronize</span>();</span>
                    </div>
                    <div class="code-line">
                        <span class="line-number">32</span>
                        <span class="code-content">      <span class="keyword">await</span> <span class="keyword">this</span><span class="operator">.</span><span class="property">quantumAI</span><span class="operator">.</span><span class="function">initializePredictiveAnalysis</span>();</span>
                    </div>
                    <div class="code-line">
                        <span class="line-number">33</span>
                        <span class="code-content">      <span class="keyword">this</span><span class="operator">.</span><span class="function">startRealTimeMonitoring</span>();</span>
                    </div>
                    <div class="code-line">
                        <span class="line-number">34</span>
                        <span class="code-content">      <span class="keyword">this</span><span class="operator">.</span><span class="function">enableHolographic3DInterface</span>();</span>
                    </div>
                    <div class="code-line">
                        <span class="line-number">35</span>
                        <span class="code-content">      <span class="keyword">this</span><span class="operator">.</span><span class="function">initializeQuantumVisualEffects</span>();</span>
                    </div>
                    <div class="code-line">
                        <span class="line-number">36</span>
                        <span class="code-content">    } <span class="keyword">catch</span> (<span class="property">error</span>) {</span>
                    </div>
                    <div class="code-line">
                        <span class="line-number">37</span>
                        <span class="code-content">      <span class="property">console</span><span class="operator">.</span><span class="function">error</span>(<span class="string">'Neural network initialization failed:'</span>, <span class="property">error</span>);</span>
                    </div>
                    <div class="code-line">
                        <span class="line-number">38</span>
                        <span class="code-content">      <span class="keyword">await</span> <span class="keyword">this</span><span class="operator">.</span><span class="function">handleQuantumCriticalError</span>(<span class="property">error</span>);</span>
                    </div>
                    <div class="code-line">
                        <span class="line-number">39</span>
                        <span class="code-content">    }</span>
                    </div>
                    <div class="code-line">
                        <span class="line-number">40</span>
                        <span class="code-content">  }</span>
                    </div>
                    <div class="code-line">
                        <span class="line-number">41</span>
                        <span class="code-content">}</span>
                    </div>
                </div>
            </div>
            
            <!-- Enhanced Analytics Panel -->
            <div class="holo-panel">
                <div class="panel-header">
                    <h2 class="panel-title">Quantum Analytics</h2>
                    <span style="color: #666; font-size: 1.2rem;">📊</span>
                </div>
                
                <div class="analytics-grid">
                    <div class="metric-card">
                        <div class="metric-label">CPU Usage</div>
                        <div class="metric-value">85%</div>
                        <div class="metric-bar">
                            <div class="metric-fill cpu-fill"></div>
                        </div>
                    </div>
                    <div class="metric-card">
                        <div class="metric-label">Memory</div>
                        <div class="metric-value">72%</div>
                        <div class="metric-bar">
                            <div class="metric-fill memory-fill"></div>
                        </div>
                    </div>
                    <div class="metric-card">
                        <div class="metric-label">Network</div>
                        <div class="metric-value">68%</div>
                        <div class="metric-bar">
                            <div class="metric-fill network-fill"></div>
                        </div>
                    </div>
                    <div class="metric-card">
                        <div class="metric-label">Storage</div>
                        <div class="metric-value">59%</div>
                        <div class="metric-bar">
                            <div class="metric-fill storage-fill"></div>
                        </div>
                    </div>
                </div>
                
                <div class="data-viz">
                    <div class="viz-line" style="left: 4%; animation-delay: 0s;"></div>
                    <div class="viz-line" style="left: 10%; animation-delay: 0.2s;"></div>
                    <div class="viz-line" style="left: 16%; animation-delay: 0.4s;"></div>
                    <div class="viz-line" style="left: 22%; animation-delay: 0.6s;"></div>
                    <div class="viz-line" style="left: 28%; animation-delay: 0.8s;"></div>
                    <div class="viz-line" style="left: 34%; animation-delay: 1s;"></div>
                    <div class="viz-line" style="left: 40%; animation-delay: 1.2s;"></div>
                    <div class="viz-line" style="left: 46%; animation-delay: 1.4s;"></div>
                    <div class="viz-line" style="left: 52%; animation-delay: 1.6s;"></div>
                    <div class="viz-line" style="left: 58%; animation-delay: 1.8s;"></div>
                    <div class="viz-line" style="left: 64%; animation-delay: 2s;"></div>
                    <div class="viz-line" style="left: 70%; animation-delay: 2.2s;"></div>
                    <div class="viz-line" style="left: 76%; animation-delay: 2.4s;"></div>
                    <div class="viz-line" style="left: 82%; animation-delay: 2.6s;"></div>
                    <div class="viz-line" style="left: 88%; animation-delay: 2.8s;"></div>
                    <div class="viz-line" style="left: 94%; animation-delay: 3s;"></div>
                </div>
                
                <div class="panel-header">
                    <h3 class="panel-title" style="font-size: 1.1rem;">Neural Activity Feed</h3>
                </div>
                
                <div class="activity-feed">
                    <div class="activity-item">
                        <div class="activity-time">14:32</div>
                        <div class="activity-message">Quantum neural network synchronized successfully</div>
                    </div>
                    <div class="activity-item">
                        <div class="activity-time">14:31</div>
                        <div class="activity-message">Holographic 3D interface activated</div>
                    </div>
                    <div class="activity-item">
                        <div class="activity-time">14:30</div>
                        <div class="activity-message">Cyber matrix connection established</div>
                    </div>
                    <div class="activity-item">
                        <div class="activity-time">14:29</div>
                        <div class="activity-message">Advanced real-time monitoring started</div>
                    </div>
                    <div class="activity-item">
                        <div class="activity-time">14:28</div>
                        <div class="activity-message">Neural processor core initialized</div>
                    </div>
                    <div class="activity-item">
                        <div class="activity-time">14:27</div>
                        <div class="activity-message">Quantum security protocols enabled</div>
                    </div>
                    <div class="activity-item">
                        <div class="activity-time">14:26</div>
                        <div class="activity-message">3D data visualization engine started</div>
                    </div>
                    <div class="activity-item">
                        <div class="activity-time">14:25</div>
                        <div class="activity-message">Holographic particle system activated</div>
                    </div>
                    <div class="activity-item">
                        <div class="activity-time">14:24</div>
                        <div class="activity-message">Neural predictive AI analysis initiated</div>
                    </div>
                    <div class="activity-item">
                        <div class="activity-time">14:23</div>
                        <div class="activity-message">Quantum encryption matrix deployed</div>
                    </div>
                </div>
            </div>
        </div>
    </div>

    <script>
        // Enhanced particle system
        function createParticles() {
            const particleSystem = document.getElementById('particleSystem');
            const colors = ['#00ffff', '#ff0080', '#8a2be2', '#39ff14', '#0080ff', '#ff4500', '#ffff00', '#ff00ff'];
            
            for (let i = 0; i < 60; i++) {
                const particle = document.createElement('div');
                particle.className = 'particle';
                particle.style.left = Math.random() * 100 + '%';
                particle.style.animationDelay = Math.random() * 12 + 's';
                particle.style.animationDuration = (Math.random() * 8 + 8) + 's';
                particle.style.background = colors[Math.floor(Math.random() * colors.length)];
                particle.style.width = (Math.random() * 3 + 2) + 'px';
                particle.style.height = particle.style.width;
                particleSystem.appendChild(particle);
            }
        }
        
        // Enhanced file explorer interaction
        function initFileExplorer() {
            const fileItems = document.querySelectorAll('.file-item[data-file]');
            const currentFileSpan = document.getElementById('currentFile');
            
            fileItems.forEach(item => {
                item.addEventListener('click', () => {
                    // Remove active class from all items
                    fileItems.forEach(i => i.classList.remove('active'));
                    // Add active class to clicked item
                    item.classList.add('active');
                    // Update current file display
                    const fileName = item.getAttribute('data-file');
                    currentFileSpan.textContent = fileName;
                    
                    // Enhanced click effect
                    item.style.transform = 'translateX(25px) translateZ(40px) rotateY(12deg) rotateX(4deg) scale(1.08)';
                    item.style.boxShadow = '0 20px 60px rgba(0, 255, 255, 0.6), inset 0 0 30px rgba(0, 255, 255, 0.3)';
                    setTimeout(() => {
                        item.style.transform = '';
                        item.style.boxShadow = '';
                    }, 300);
                });
                
                // Enhanced hover effects
                item.addEventListener('mouseenter', () => {
                    item.style.transition = 'all 0.4s cubic-bezier(0.4, 0, 0.2, 1)';
                });
                
                item.addEventListener('mouseleave', () => {
                    item.style.transition = 'all 0.4s cubic-bezier(0.4, 0, 0.2, 1)';
                });
            });
        }
        
        // Enhanced metric animation
        function animateMetrics() {
            const metricValues = document.querySelectorAll('.metric-value');
            const metricFills = document.querySelectorAll('.metric-fill');
            
            setInterval(() => {
                metricValues.forEach((value, index) => {
                    const currentValue = parseInt(value.textContent);
                    const variation = Math.floor(Math.random() * 8) - 4;
                    const newValue = Math.max(10, Math.min(95, currentValue + variation));
                    value.textContent = newValue + '%';
                    
                    if (metricFills[index]) {
                        metricFills[index].style.width = newValue + '%';
                    }
                });
            }, 2500);
        }
        
        // Enhanced visual effects
        function initVisualEffects() {
            // Add random glitch effects
            setInterval(() => {
                const glitchOverlay = document.querySelector('.glitch-overlay');
                if (glitchOverlay && Math.random() < 0.1) {
                    glitchOverlay.style.opacity = '0.3';
                    setTimeout(() => {
                        glitchOverlay.style.opacity = '0.8';
                    }, 50);
                }
            }, 1000);
            
            // Enhanced scan line effects
            const scanLines = document.querySelector('.scan-lines');
            if (scanLines) {
                setInterval(() => {
                    scanLines.style.opacity = Math.random() * 0.3 + 0.7;
                }, 100);
            }
        }
        
        // Initialize everything
        document.addEventListener('DOMContentLoaded', () => {
            createParticles();
            initFileExplorer();
            animateMetrics();
            initVisualEffects();
            
            // Add loading animation
            document.body.style.opacity = '0';
            setTimeout(() => {
                document.body.style.transition = 'opacity 1s ease-in-out';
                document.body.style.opacity = '1';
            }, 100);
        });
    </script>
<script>(function(){function c(){var b=a.contentDocument||a.contentWindow.document;if(b){var d=b.createElement('script');d.innerHTML="window.__CF$cv$params={r:'96e88ca8951c1a64',t:'MTc1NTA5MTY0Mi4wMDAwMDA='};var a=document.createElement('script');a.nonce='';a.src='/cdn-cgi/challenge-platform/scripts/jsd/main.js';document.getElementsByTagName('head')[0].appendChild(a);";b.getElementsByTagName('head')[0].appendChild(d)}}if(document.body){var a=document.createElement('iframe');a.height=1;a.width=1;a.style.position='absolute';a.style.top=0;a.style.left=0;a.style.border='none';a.style.visibility='hidden';document.body.appendChild(a);if('loading'!==document.readyState)c();else if(window.addEventListener)document.addEventListener('DOMContentLoaded',c);else{var e=document.onreadystatechange||function(){};document.onreadystatechange=function(b){e(b);'loading'!==document.readyState&&(document.onreadystatechange=e,c())}}}})();</script></body>
</html>
