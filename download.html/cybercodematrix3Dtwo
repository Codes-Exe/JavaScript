<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>CyberCode Matrix 3D - Neural IDE</title>
    <style>
        @import url('https://fonts.googleapis.com/css2?family=Orbitron:wght@300;400;700;900&family=Fira+Code:wght@300;400;500;600;700&family=Rajdhani:wght@300;400;500;600;700&display=swap');
        
        :root {
            --neon-cyan: #00ffff;
            --electric-purple: #8a2be2;
            --cyber-pink: #ff0080;
            --neural-green: #39ff14;
            --quantum-blue: #0080ff;
            --solar-orange: #ff4500;
            --void-black: #000000;
            --matrix-red: #ff3333;
            --holo-yellow: #ffff00;
            --glass-primary: rgba(255, 255, 255, 0.15);
            --glass-secondary: rgba(255, 255, 255, 0.08);
            --glass-border: rgba(255, 255, 255, 0.3);
            --glow-intensity: 0 0 40px;
        }
        
        * {
            margin: 0;
            padding: 0;
            box-sizing: border-box;
        }
        
        body {
            font-family: 'Fira Code', monospace;
            background: 
                radial-gradient(ellipse at 15% 15%, rgba(0, 255, 255, 0.35) 0%, transparent 65%),
                radial-gradient(ellipse at 85% 15%, rgba(138, 43, 226, 0.3) 0%, transparent 65%),
                radial-gradient(ellipse at 15% 85%, rgba(255, 0, 128, 0.28) 0%, transparent 65%),
                radial-gradient(ellipse at 85% 85%, rgba(57, 255, 20, 0.25) 0%, transparent 65%),
                radial-gradient(ellipse at 50% 50%, rgba(0, 128, 255, 0.22) 0%, transparent 75%),
                radial-gradient(circle at 25% 75%, rgba(255, 68, 0, 0.18) 0%, transparent 60%),
                radial-gradient(circle at 75% 25%, rgba(255, 255, 0, 0.15) 0%, transparent 55%),
                linear-gradient(135deg, #0a0a0a 0%, #1a0a1a 15%, #0a1a1a 30%, #1a1a0a 45%, #0a0a1a 60%, #1a0a0a 75%, #0a0a0a 100%);
            color: var(--neon-cyan);
            min-height: 100vh;
            overflow-x: hidden;
            position: relative;
            perspective: 3000px;
            transform-style: preserve-3d;
        }
        
        /* Advanced Holographic Grid with 3D Effect */
        body::before {
            content: '';
            position: fixed;
            top: 0;
            left: 0;
            width: 100%;
            height: 100%;
            background-image: 
                linear-gradient(rgba(0, 255, 255, 0.25) 1px, transparent 1px),
                linear-gradient(90deg, rgba(0, 255, 255, 0.25) 1px, transparent 1px),
                linear-gradient(45deg, rgba(138, 43, 226, 0.2) 1px, transparent 1px),
                linear-gradient(135deg, rgba(255, 0, 128, 0.18) 1px, transparent 1px),
                linear-gradient(60deg, rgba(57, 255, 20, 0.15) 1px, transparent 1px),
                linear-gradient(120deg, rgba(255, 68, 0, 0.12) 1px, transparent 1px),
                radial-gradient(circle at 20% 20%, rgba(57, 255, 20, 0.15) 2px, transparent 4px),
                radial-gradient(circle at 80% 80%, rgba(255, 68, 0, 0.12) 2px, transparent 4px),
                radial-gradient(circle at 20% 80%, rgba(255, 255, 0, 0.1) 1px, transparent 3px),
                radial-gradient(circle at 80% 20%, rgba(0, 128, 255, 0.1) 1px, transparent 3px);
            background-size: 50px 50px, 50px 50px, 35px 35px, 35px 35px, 45px 45px, 45px 45px, 70px 70px, 70px 70px, 90px 90px, 90px 90px;
            pointer-events: none;
            z-index: -2;
            animation: holoGrid3D 25s linear infinite;
            filter: blur(0.2px) brightness(1.2);
            transform-style: preserve-3d;
        }
        
        @keyframes holoGrid3D {
            0% { 
                transform: translate3d(0, 0, 0) rotateX(0deg) rotateY(0deg); 
                opacity: 0.5; 
                filter: blur(0.3px) hue-rotate(0deg) brightness(1);
            }
            25% { 
                transform: translate3d(30px, 30px, 20px) rotateX(5deg) rotateY(5deg); 
                opacity: 0.8; 
                filter: blur(0.1px) hue-rotate(90deg) brightness(1.3);
            }
            50% { 
                transform: translate3d(60px, 60px, 40px) rotateX(10deg) rotateY(10deg); 
                opacity: 0.6; 
                filter: blur(0.5px) hue-rotate(180deg) brightness(1.1);
            }
            75% { 
                transform: translate3d(30px, 90px, 20px) rotateX(5deg) rotateY(15deg); 
                opacity: 0.7; 
                filter: blur(0.2px) hue-rotate(270deg) brightness(1.2);
            }
            100% { 
                transform: translate3d(0, 120px, 0) rotateX(0deg) rotateY(20deg); 
                opacity: 0.5; 
                filter: blur(0.3px) hue-rotate(360deg) brightness(1);
            }
        }
        
        /* Enhanced Glitch Effects */
        .glitch-overlay {
            position: fixed;
            top: 0;
            left: 0;
            width: 100%;
            height: 100%;
            pointer-events: none;
            z-index: 5;
            background: 
                linear-gradient(90deg, transparent 97%, rgba(255, 0, 128, 0.15) 98%, rgba(138, 43, 226, 0.12) 99%, transparent 100%),
                linear-gradient(180deg, transparent 96%, rgba(0, 255, 255, 0.12) 97%, rgba(57, 255, 20, 0.1) 98%, transparent 100%),
                linear-gradient(45deg, transparent 98%, rgba(255, 68, 0, 0.08) 99%, transparent 100%),
                linear-gradient(135deg, transparent 98%, rgba(255, 255, 0, 0.06) 99%, transparent 100%);
            background-size: 2px 100%, 100% 3px, 4px 4px, 4px 4px;
            animation: glitchScan 0.08s linear infinite, glitchFlicker 1.5s ease-in-out infinite, glitchDistort 3s ease-in-out infinite;
            mix-blend-mode: screen;
            filter: contrast(1.2) brightness(1.1);
        }
        
        @keyframes glitchScan {
            0% { background-position: 0 0, 0 0; }
            100% { background-position: 3px 0, 0 4px; }
        }
        
        @keyframes glitchFlicker {
            0%, 92%, 94%, 96%, 100% { opacity: 0.8; transform: translate(0); }
            93% { opacity: 0.3; transform: translate(3px, -2px) skew(1deg); }
            95% { opacity: 0.1; transform: translate(-2px, 2px) skew(-1deg); }
            97% { opacity: 1.2; transform: translate(1px, -1px) skew(0.5deg); }
            98% { opacity: 0.6; transform: translate(-1px, 1px) skew(-0.5deg); }
        }
        
        @keyframes glitchDistort {
            0%, 100% { 
                filter: contrast(1.2) brightness(1.1) hue-rotate(0deg);
                transform: scale(1) skew(0deg);
            }
            25% { 
                filter: contrast(1.4) brightness(1.3) hue-rotate(90deg);
                transform: scale(1.002) skew(0.2deg);
            }
            50% { 
                filter: contrast(1.1) brightness(0.9) hue-rotate(180deg);
                transform: scale(0.998) skew(-0.2deg);
            }
            75% { 
                filter: contrast(1.3) brightness(1.2) hue-rotate(270deg);
                transform: scale(1.001) skew(0.1deg);
            }
        }
        
        /* Advanced Scan Lines */
        .scan-lines {
            position: fixed;
            top: 0;
            left: 0;
            width: 100%;
            height: 100%;
            pointer-events: none;
            z-index: 4;
            background: 
                linear-gradient(
                    transparent 96%,
                    rgba(0, 255, 255, 0.12) 97%,
                    rgba(138, 43, 226, 0.08) 98%,
                    rgba(57, 255, 20, 0.06) 99%,
                    transparent 100%
                ),
                linear-gradient(
                    90deg,
                    transparent 97%,
                    rgba(255, 0, 128, 0.08) 98%,
                    rgba(255, 68, 0, 0.05) 99%,
                    transparent 100%
                ),
                linear-gradient(
                    45deg,
                    transparent 98%,
                    rgba(255, 255, 0, 0.04) 99%,
                    transparent 100%
                );
            background-size: 100% 1.5px, 1.5px 100%, 3px 3px;
            animation: scanLines 0.05s linear infinite, scanLinesVertical 0.07s linear infinite, scanLinesDiagonal 0.12s linear infinite;
            mix-blend-mode: screen;
            filter: brightness(1.3) contrast(1.1);
        }
        
        @keyframes scanLines {
            0% { transform: translateY(0); }
            100% { transform: translateY(2px); }
        }
        
        @keyframes scanLinesVertical {
            0% { background-position: 0 0, 0 0, 0 0; }
            100% { background-position: 0 0, 1.5px 0, 0 0; }
        }
        
        @keyframes scanLinesDiagonal {
            0% { background-position: 0 0, 0 0, 0 0; }
            100% { background-position: 0 0, 0 0, 3px 3px; }
        }
        
        .container {
            max-width: 2000px;
            margin: 0 auto;
            padding: 30px;
            position: relative;
            z-index: 10;
        }
        
        /* Enhanced Header with Glitch Effects */
        .cyber-header {
            display: flex;
            justify-content: space-between;
            align-items: center;
            margin-bottom: 35px;
            padding: 40px 60px;
            background: 
                linear-gradient(135deg, var(--glass-primary) 0%, var(--glass-secondary) 100%),
                radial-gradient(circle at 25% 25%, rgba(0, 255, 255, 0.25) 0%, transparent 70%),
                radial-gradient(circle at 75% 75%, rgba(138, 43, 226, 0.2) 0%, transparent 70%),
                rgba(0, 0, 0, 0.5);
            border: 3px solid var(--glass-border);
            border-radius: 30px;
            backdrop-filter: blur(30px) saturate(200%);
            box-shadow: 
                0 15px 50px rgba(0, 0, 0, 0.5),
                inset 0 3px 0 rgba(255, 255, 255, 0.25),
                0 0 80px rgba(0, 255, 255, 0.4);
            position: relative;
            overflow: hidden;
            transform-style: preserve-3d;
        }
        
        .cyber-header::before {
            content: '';
            position: absolute;
            top: 0;
            left: -100%;
            width: 100%;
            height: 4px;
            background: linear-gradient(90deg, transparent, var(--neon-cyan), var(--electric-purple), var(--cyber-pink), transparent);
            animation: headerScan 6s linear infinite;
        }
        
        .cyber-header::after {
            content: '';
            position: absolute;
            top: 0;
            left: 0;
            right: 0;
            bottom: 0;
            background: 
                linear-gradient(45deg, transparent 48%, rgba(255, 255, 255, 0.05) 49%, rgba(255, 255, 255, 0.05) 51%, transparent 52%);
            background-size: 20px 20px;
            animation: headerPattern 15s linear infinite;
            opacity: 0.3;
        }
        
        @keyframes headerScan {
            0% { left: -100%; opacity: 0.7; }
            50% { opacity: 1; }
            100% { left: 100%; opacity: 0.7; }
        }
        
        @keyframes headerPattern {
            0% { transform: translate(0, 0); }
            100% { transform: translate(20px, 20px); }
        }
        
        .cyber-title {
            font-family: 'Orbitron', monospace;
            font-size: 3.5rem;
            font-weight: 900;
            background: linear-gradient(45deg, 
                var(--neon-cyan), var(--electric-purple), var(--cyber-pink), 
                var(--neural-green), var(--quantum-blue), var(--solar-orange)
            );
            background-size: 600% 600%;
            -webkit-background-clip: text;
            -webkit-text-fill-color: transparent;
            background-clip: text;
            animation: titleFlow 8s ease-in-out infinite, titleGlitch 10s ease-in-out infinite;
            text-transform: uppercase;
            letter-spacing: 6px;
            position: relative;
            z-index: 1;
            text-shadow: 0 0 30px rgba(0, 255, 255, 0.5);
        }
        
        @keyframes titleFlow {
            0%, 100% { background-position: 0% 50%; }
            25% { background-position: 100% 25%; }
            50% { background-position: 50% 100%; }
            75% { background-position: 0% 75%; }
        }
        
        @keyframes titleGlitch {
            0%, 90%, 100% { transform: translate(0); }
            91% { transform: translate(2px, -1px); }
            92% { transform: translate(-2px, 1px); }
            93% { transform: translate(1px, 1px); }
            94% { transform: translate(-1px, -1px); }
            95% { transform: translate(0); }
        }
        
        .neural-status {
            display: flex;
            align-items: center;
            gap: 25px;
            background: 
                linear-gradient(135deg, rgba(57, 255, 20, 0.2) 0%, rgba(57, 255, 20, 0.08) 100%),
                rgba(0, 0, 0, 0.4);
            padding: 25px 35px;
            border-radius: 25px;
            border: 3px solid rgba(57, 255, 20, 0.5);
            font-size: 1.1rem;
            color: var(--neural-green);
            backdrop-filter: blur(20px);
            box-shadow: 
                0 8px 30px rgba(57, 255, 20, 0.4),
                inset 0 2px 0 rgba(255, 255, 255, 0.15);
            animation: statusPulse 5s ease-in-out infinite;
            position: relative;
            overflow: hidden;
        }
        
        .neural-status::before {
            content: '';
            position: absolute;
            top: 0;
            left: -100%;
            width: 100%;
            height: 100%;
            background: linear-gradient(90deg, transparent, rgba(57, 255, 20, 0.3), transparent);
            animation: statusSweep 8s linear infinite;
        }
        
        @keyframes statusSweep {
            0% { left: -100%; }
            100% { left: 100%; }
        }
        
        @keyframes statusPulse {
            0%, 100% { 
                box-shadow: 
                    0 8px 30px rgba(57, 255, 20, 0.4),
                    inset 0 2px 0 rgba(255, 255, 255, 0.15);
                transform: scale(1);
            }
            50% { 
                box-shadow: 
                    0 12px 40px rgba(57, 255, 20, 0.6),
                    inset 0 2px 0 rgba(255, 255, 255, 0.25),
                    var(--glow-intensity) var(--neural-green);
                transform: scale(1.08);
            }
        }
        
        /* Main Interface with 3D Layout */
        .cyber-interface {
            display: grid;
            grid-template-columns: 400px 1fr 450px;
            gap: 30px;
            margin-bottom: 30px;
            transform-style: preserve-3d;
        }
        
        /* Enhanced 3D Glass Morphism Panels */
        .holo-panel {
            background: 
                linear-gradient(135deg, var(--glass-primary) 0%, var(--glass-secondary) 100%),
                radial-gradient(circle at 30% 30%, rgba(0, 255, 255, 0.15) 0%, transparent 70%),
                rgba(0, 0, 0, 0.4);
            border: 3px solid var(--glass-border);
            border-radius: 25px;
            padding: 35px;
            backdrop-filter: blur(30px) saturate(200%);
            position: relative;
            overflow: hidden;
            box-shadow: 
                0 15px 50px rgba(0, 0, 0, 0.5),
                inset 0 3px 0 rgba(255, 255, 255, 0.2);
            transition: all 0.5s cubic-bezier(0.4, 0, 0.2, 1);
            transform-style: preserve-3d;
        }
        
        .holo-panel:hover {
            transform: translateY(-12px) rotateX(5deg) rotateY(2deg) scale(1.02);
            box-shadow: 
                0 25px 80px rgba(0, 0, 0, 0.6),
                inset 0 3px 0 rgba(255, 255, 255, 0.3),
                var(--glow-intensity) var(--neon-cyan);
            border-color: rgba(255, 255, 255, 0.5);
        }
        
        .holo-panel::before {
            content: '';
            position: absolute;
            top: 0;
            left: 0;
            right: 0;
            bottom: 0;
            border-radius: 22px;
            padding: 3px;
            background: linear-gradient(135deg, 
                var(--neon-cyan), transparent, var(--electric-purple), 
                transparent, var(--cyber-pink), transparent, var(--neural-green)
            );
            background-size: 600% 600%;
            mask: linear-gradient(#fff 0 0) content-box, linear-gradient(#fff 0 0);
            mask-composite: exclude;
            animation: panelGlow 15s ease-in-out infinite;
        }
        
        @keyframes panelGlow {
            0%, 100% { background-position: 0% 50%; opacity: 0.7; }
            25% { background-position: 100% 25%; opacity: 1; }
            50% { background-position: 50% 100%; opacity: 0.8; }
            75% { background-position: 0% 75%; opacity: 0.9; }
        }
        
        /* 3D Interactive File Explorer */
        .file-explorer-3d {
            perspective: 1000px;
            transform-style: preserve-3d;
        }
        
        .file-tree-3d {
            list-style: none;
            transform-style: preserve-3d;
        }
        
        .file-item-3d {
            padding: 15px 20px;
            margin: 5px 0;
            border-radius: 15px;
            cursor: pointer;
            transition: all 0.4s cubic-bezier(0.4, 0, 0.2, 1);
            display: flex;
            align-items: center;
            gap: 15px;
            position: relative;
            overflow: hidden;
            transform-style: preserve-3d;
            background: 
                linear-gradient(135deg, rgba(0, 0, 0, 0.3) 0%, rgba(0, 0, 0, 0.1) 100%),
                rgba(0, 255, 255, 0.05);
            border: 1px solid rgba(0, 255, 255, 0.2);
        }
        
        .file-item-3d::before {
            content: '';
            position: absolute;
            left: 0;
            top: 0;
            bottom: 0;
            width: 0;
            background: linear-gradient(90deg, var(--neon-cyan), var(--electric-purple));
            transition: width 0.4s ease;
            border-radius: 15px 0 0 15px;
        }
        
        .file-item-3d::after {
            content: '';
            position: absolute;
            top: 0;
            left: 0;
            right: 0;
            bottom: 0;
            background: 
                linear-gradient(45deg, transparent 48%, rgba(255, 255, 255, 0.05) 49%, rgba(255, 255, 255, 0.05) 51%, transparent 52%);
            background-size: 15px 15px;
            opacity: 0;
            transition: opacity 0.4s ease;
            animation: filePattern 20s linear infinite;
        }
        
        @keyframes filePattern {
            0% { transform: translate(0, 0); }
            100% { transform: translate(15px, 15px); }
        }
        
        .file-item-3d:hover {
            background: 
                linear-gradient(135deg, rgba(0, 255, 255, 0.2) 0%, rgba(0, 255, 255, 0.08) 100%),
                rgba(0, 0, 0, 0.3);
            transform: translateX(15px) translateZ(20px) rotateY(5deg) scale(1.05);
            box-shadow: 
                0 10px 30px rgba(0, 255, 255, 0.4),
                inset 0 2px 0 rgba(255, 255, 255, 0.15);
            border-color: rgba(0, 255, 255, 0.6);
        }
        
        .file-item-3d:hover::before {
            width: 6px;
        }
        
        .file-item-3d:hover::after {
            opacity: 1;
        }
        
        .file-item-3d.active {
            background: 
                linear-gradient(135deg, rgba(0, 255, 255, 0.3) 0%, rgba(0, 255, 255, 0.15) 100%),
                rgba(0, 0, 0, 0.4);
            border-left: 6px solid var(--neon-cyan);
            box-shadow: 
                0 12px 40px rgba(0, 255, 255, 0.5),
                inset 0 2px 0 rgba(255, 255, 255, 0.25);
            transform: translateX(10px) translateZ(15px);
        }
        
        .file-icon-3d {
            width: 28px;
            height: 28px;
            display: flex;
            align-items: center;
            justify-content: center;
            font-size: 18px;
            filter: drop-shadow(0 0 12px currentColor) drop-shadow(0 0 6px rgba(255, 255, 255, 0.3));
            transition: all 0.4s cubic-bezier(0.4, 0, 0.2, 1);
            transform-style: preserve-3d;
            animation: iconFloat 8s ease-in-out infinite;
            position: relative;
        }
        
        .file-icon-3d::before {
            content: '';
            position: absolute;
            top: -2px;
            left: -2px;
            right: -2px;
            bottom: -2px;
            background: radial-gradient(circle, rgba(0, 255, 255, 0.2) 0%, transparent 70%);
            border-radius: 50%;
            opacity: 0;
            transition: opacity 0.4s ease;
            z-index: -1;
        }
        
        .file-item-3d:hover .file-icon-3d {
            transform: rotateY(720deg) rotateX(15deg) scale(1.3) translateZ(10px);
            filter: 
                drop-shadow(0 0 20px currentColor) 
                drop-shadow(0 0 10px rgba(255, 255, 255, 0.5))
                drop-shadow(0 5px 15px rgba(0, 0, 0, 0.3));
            animation: iconHover 2s ease-in-out infinite;
        }
        
        .file-item-3d:hover .file-icon-3d::before {
            opacity: 1;
            animation: iconGlow 1.5s ease-in-out infinite;
        }
        
        @keyframes iconFloat {
            0%, 100% { 
                transform: translateY(0) rotateZ(0deg); 
                filter: drop-shadow(0 0 12px currentColor) drop-shadow(0 0 6px rgba(255, 255, 255, 0.3));
            }
            25% { 
                transform: translateY(-2px) rotateZ(1deg); 
                filter: drop-shadow(0 0 15px currentColor) drop-shadow(0 0 8px rgba(255, 255, 255, 0.4));
            }
            50% { 
                transform: translateY(-1px) rotateZ(0deg); 
                filter: drop-shadow(0 0 18px currentColor) drop-shadow(0 0 10px rgba(255, 255, 255, 0.5));
            }
            75% { 
                transform: translateY(-2px) rotateZ(-1deg); 
                filter: drop-shadow(0 0 15px currentColor) drop-shadow(0 0 8px rgba(255, 255, 255, 0.4));
            }
        }
        
        @keyframes iconHover {
            0%, 100% { transform: rotateY(720deg) rotateX(15deg) scale(1.3) translateZ(10px); }
            50% { transform: rotateY(720deg) rotateX(15deg) scale(1.35) translateZ(15px); }
        }
        
        @keyframes iconGlow {
            0%, 100% { 
                background: radial-gradient(circle, rgba(0, 255, 255, 0.2) 0%, transparent 70%);
                transform: scale(1);
            }
            50% { 
                background: radial-gradient(circle, rgba(0, 255, 255, 0.4) 0%, transparent 80%);
                transform: scale(1.2);
            }
        }
        
        .file-name-3d {
            font-weight: 600;
            color: #ddd;
            transition: all 0.3s ease;
            text-shadow: 0 0 5px rgba(255, 255, 255, 0.3);
        }
        
        .file-item-3d:hover .file-name-3d,
        .file-item-3d.active .file-name-3d {
            color: var(--neon-cyan);
            text-shadow: 0 0 15px rgba(0, 255, 255, 0.6);
        }
        
        /* Holographic Code Metrics Overlay */
        .holo-metrics-overlay {
            position: absolute;
            top: 20px;
            right: 20px;
            background: 
                linear-gradient(135deg, rgba(0, 255, 255, 0.15) 0%, rgba(0, 255, 255, 0.05) 100%),
                rgba(0, 0, 0, 0.6);
            border: 2px solid rgba(0, 255, 255, 0.4);
            border-radius: 15px;
            padding: 20px;
            backdrop-filter: blur(20px);
            box-shadow: 
                0 8px 25px rgba(0, 255, 255, 0.3),
                inset 0 1px 0 rgba(255, 255, 255, 0.2);
            z-index: 20;
            animation: holoFloat 6s ease-in-out infinite;
            transform-style: preserve-3d;
        }
        
        @keyframes holoFloat {
            0%, 100% { 
                transform: translateY(0) rotateX(0deg); 
                box-shadow: 
                    0 8px 25px rgba(0, 255, 255, 0.3),
                    inset 0 1px 0 rgba(255, 255, 255, 0.2);
            }
            50% { 
                transform: translateY(-10px) rotateX(5deg); 
                box-shadow: 
                    0 15px 35px rgba(0, 255, 255, 0.5),
                    inset 0 1px 0 rgba(255, 255, 255, 0.3),
                    var(--glow-intensity) var(--neon-cyan);
            }
        }
        
        .metric-item {
            display: flex;
            justify-content: space-between;
            align-items: center;
            margin-bottom: 12px;
            font-size: 0.9rem;
            color: var(--neon-cyan);
            text-shadow: 0 0 8px rgba(0, 255, 255, 0.4);
        }
        
        .metric-value {
            font-weight: 700;
            color: #fff;
            text-shadow: 0 0 10px rgba(255, 255, 255, 0.5);
            animation: metricPulse 3s ease-in-out infinite;
        }
        
        @keyframes metricPulse {
            0%, 100% { 
                text-shadow: 0 0 10px rgba(255, 255, 255, 0.5);
                transform: scale(1);
            }
            50% { 
                text-shadow: 
                    0 0 15px rgba(255, 255, 255, 0.8),
                    0 0 25px rgba(0, 255, 255, 0.4);
                transform: scale(1.1);
            }
        }
        
        /* Enhanced Code Editor with 3D Effects */
        .cyber-code-editor-3d {
            background: 
                linear-gradient(135deg, rgba(0, 0, 0, 0.95) 0%, rgba(0, 40, 20, 0.9) 100%),
                rgba(0, 0, 0, 0.7);
            border: 3px solid var(--neural-green);
            border-radius: 20px;
            padding: 30px;
            font-family: 'Fira Code', monospace;
            font-size: 16px;
            color: var(--neural-green);
            min-height: 800px;
            position: relative;
            overflow: hidden;
            box-shadow: 
                inset 0 0 80px rgba(57, 255, 20, 0.25),
                var(--glow-intensity) var(--neural-green);
            transform-style: preserve-3d;
        }
        
        .cyber-code-editor-3d::before {
            content: '';
            position: absolute;
            top: 0;
            left: -100%;
            width: 100%;
            height: 6px;
            background: linear-gradient(90deg, transparent, var(--neural-green), var(--neon-cyan), var(--electric-purple), transparent);
            animation: codeScan3D 8s linear infinite;
        }
        
        .cyber-code-editor-3d::after {
            content: '';
            position: absolute;
            top: 0;
            left: 0;
            right: 0;
            bottom: 0;
            background: 
                linear-gradient(45deg, transparent 49%, rgba(57, 255, 20, 0.03) 50%, transparent 51%),
                linear-gradient(135deg, transparent 49%, rgba(0, 255, 255, 0.02) 50%, transparent 51%);
            background-size: 25px 25px;
            animation: codePattern 25s linear infinite;
            pointer-events: none;
        }
        
        @keyframes codeScan3D {
            0% { left: -100%; opacity: 0.8; }
            50% { opacity: 1; }
            100% { left: 100%; opacity: 0.8; }
        }
        
        @keyframes codePattern {
            0% { transform: translate(0, 0); }
            100% { transform: translate(25px, 25px); }
        }
        
        .code-line-3d {
            display: flex;
            margin-bottom: 15px;
            padding: 10px 0;
            border-radius: 10px;
            transition: all 0.4s cubic-bezier(0.4, 0, 0.2, 1);
            animation: codeLineAppear3D 2s ease-out;
            position: relative;
            transform-style: preserve-3d;
        }
        
        .code-line-3d::before {
            content: '';
            position: absolute;
            left: -25px;
            top: 0;
            bottom: 0;
            width: 0;
            background: linear-gradient(180deg, transparent, var(--neural-green), var(--neon-cyan), transparent);
            opacity: 0;
            transition: all 0.4s ease;
            border-radius: 2px;
        }
        
        .code-line-3d:hover {
            background: 
                linear-gradient(135deg, rgba(57, 255, 20, 0.25) 0%, rgba(0, 255, 255, 0.15) 100%),
                rgba(0, 0, 0, 0.4);
            transform: translateX(20px) translateZ(10px) rotateY(2deg) scale(1.02);
            box-shadow: 
                0 8px 25px rgba(57, 255, 20, 0.5), 
                inset 0 0 25px rgba(0, 255, 255, 0.3);
            border: 1px solid rgba(57, 255, 20, 0.5);
        }
        
        .code-line-3d:hover::before {
            width: 6px;
            opacity: 1;
        }
        
        @keyframes codeLineAppear3D {
            from { 
                opacity: 0; 
                transform: translateX(-80px) translateZ(-20px) rotateY(-10deg) scale(0.8);
                filter: blur(8px);
            }
            to { 
                opacity: 1; 
                transform: translateX(0) translateZ(0) rotateY(0deg) scale(1);
                filter: blur(0);
            }
        }
        
        .line-number-3d {
            color: rgba(255, 255, 255, 0.6);
            margin-right: 30px;
            width: 60px;
            text-align: right;
            font-weight: 700;
            user-select: none;
            position: relative;
            text-shadow: 0 0 5px rgba(255, 255, 255, 0.3);
        }
        
        .line-number-3d::after {
            content: '';
            position: absolute;
            right: -15px;
            top: 0;
            bottom: 0;
            width: 3px;
            background: linear-gradient(180deg, transparent, rgba(0, 255, 255, 0.6), transparent);
            border-radius: 2px;
        }
        
        /* Enhanced Syntax Highlighting with Glow Effects */
        .keyword-3d { 
            color: #ff6b6b; 
            font-weight: 800;
            text-shadow: 0 0 20px rgba(255, 107, 107, 0.8);
            animation: keywordPulse3D 10s ease-in-out infinite;
            position: relative;
        }
        
        @keyframes keywordPulse3D {
            0%, 100% { 
                text-shadow: 0 0 20px rgba(255, 107, 107, 0.8);
                transform: scale(1);
            }
            50% { 
                text-shadow: 
                    0 0 25px rgba(255, 107, 107, 1),
                    0 0 40px rgba(255, 107, 107, 0.6);
                transform: scale(1.08);
            }
        }
        
        .string-3d { 
            color: #4ecdc4; 
            font-weight: 700;
            text-shadow: 0 0 18px rgba(78, 205, 196, 0.7);
            animation: stringShimmer3D 12s ease-in-out infinite;
        }
        
        @keyframes stringShimmer3D {
            0%, 100% { 
                text-shadow: 0 0 18px rgba(78, 205, 196, 0.7);
                color: #4ecdc4;
            }
            33% { 
                text-shadow: 0 0 25px rgba(78, 205, 196, 0.9);
                color: #5fede6;
            }
            66% { 
                text-shadow: 0 0 22px rgba(78, 205, 196, 0.8);
                color: #3dbcb5;
            }
        }
        
        .function-3d { 
            color: #ffe66d; 
            font-weight: 800;
            text-shadow: 0 0 20px rgba(255, 230, 109, 0.7);
            animation: functionGlow3D 11s ease-in-out infinite;
        }
        
        @keyframes functionGlow3D {
            0%, 100% { 
                text-shadow: 0 0 20px rgba(255, 230, 109, 0.7);
                color: #ffe66d;
            }
            25% { 
                text-shadow: 0 0 28px rgba(255, 230, 109, 0.9);
                color: #ffed7d;
            }
            50% { 
                text-shadow: 0 0 25px rgba(255, 230, 109, 1);
                color: #ffdf5d;
            }
            75% { 
                text-shadow: 0 0 22px rgba(255, 230, 109, 0.8);
                color: #ffe970;
            }
        }
        
        /* Live Coding Terminal with Simulation */
        .live-terminal-3d {
            background: 
                linear-gradient(135deg, rgba(0, 0, 0, 0.95) 0%, rgba(0, 25, 15, 0.9) 100%),
                rgba(0, 0, 0, 0.8);
            border: 3px solid var(--neural-green);
            border-radius: 15px;
            padding: 25px;
            font-family: 'Fira Code', monospace;
            font-size: 14px;
            color: var(--neural-green);
            height: 350px;
            overflow-y: auto;
            position: relative;
            box-shadow: 
                inset 0 0 40px rgba(57, 255, 20, 0.15),
                0 0 30px rgba(57, 255, 20, 0.4);
            transform-style: preserve-3d;
        }
        
        .live-terminal-3d::before {
            content: '';
            position: absolute;
            top: 0;
            left: 0;
            right: 0;
            height: 3px;
            background: linear-gradient(90deg, transparent, var(--neural-green), var(--neon-cyan), transparent);
            animation: terminalScan3D 5s linear infinite;
        }
        
        @keyframes terminalScan3D {
            0% { transform: translateX(-100%); opacity: 0.7; }
            50% { opacity: 1; }
            100% { transform: translateX(100%); opacity: 0.7; }
        }
        
        .terminal-line-3d {
            margin-bottom: 10px;
            display: flex;
            align-items: center;
            animation: terminalLineAppear3D 1.5s ease-out;
            position: relative;
            padding: 5px 0;
            border-radius: 5px;
            transition: all 0.3s ease;
        }
        
        .terminal-line-3d:hover {
            background: rgba(57, 255, 20, 0.1);
            transform: translateX(10px);
            box-shadow: 0 0 15px rgba(57, 255, 20, 0.3);
        }
        
        @keyframes terminalLineAppear3D {
            from { 
                opacity: 0; 
                transform: translateX(-30px) scale(0.9);
                filter: blur(3px);
            }
            to { 
                opacity: 1; 
                transform: translateX(0) scale(1);
                filter: blur(0);
            }
        }
        
        .terminal-prompt-3d {
            color: var(--cyber-pink);
            margin-right: 12px;
            font-weight: 700;
            text-shadow: 0 0 12px rgba(255, 0, 128, 0.6);
            animation: promptPulse 4s ease-in-out infinite;
        }
        
        @keyframes promptPulse {
            0%, 100% { 
                text-shadow: 0 0 12px rgba(255, 0, 128, 0.6);
                transform: scale(1);
            }
            50% { 
                text-shadow: 0 0 18px rgba(255, 0, 128, 0.9);
                transform: scale(1.05);
            }
        }
        
        .terminal-cursor-3d {
            display: inline-block;
            width: 12px;
            height: 18px;
            background: var(--neural-green);
            animation: cursorBlink3D 1.2s infinite;
            box-shadow: 0 0 15px var(--neural-green);
            border-radius: 2px;
        }
        
        @keyframes cursorBlink3D {
            0%, 50% { opacity: 1; transform: scale(1); }
            51%, 100% { opacity: 0; transform: scale(1.1); }
        }
        
        /* Responsive Design */
        @media (max-width: 1600px) {
            .cyber-interface {
                grid-template-columns: 350px 1fr 400px;
                gap: 25px;
            }
        }
        
        @media (max-width: 1400px) {
            .cyber-interface {
                grid-template-columns: 320px 1fr 360px;
                gap: 20px;
            }
            
            .cyber-title {
                font-size: 3rem;
            }
        }
        
        @media (max-width: 1200px) {
            .cyber-interface {
                grid-template-columns: 280px 1fr 320px;
                gap: 18px;
            }
            
            .cyber-title {
                font-size: 2.5rem;
                letter-spacing: 4px;
            }
        }
        
        @media (max-width: 900px) {
            .cyber-interface {
                grid-template-columns: 1fr;
                gap: 25px;
            }
            
            .cyber-header {
                flex-direction: column;
                gap: 30px;
                padding: 35px;
            }
            
            .cyber-title {
                font-size: 2rem;
                letter-spacing: 3px;
            }
        }
        
        /* Missing CSS Styles */
        .panel-header {
            display: flex;
            justify-content: space-between;
            align-items: center;
            margin-bottom: 25px;
            padding-bottom: 15px;
            border-bottom: 2px solid rgba(0, 255, 255, 0.3);
            position: relative;
        }
        
        .panel-header::after {
            content: '';
            position: absolute;
            bottom: -2px;
            left: 0;
            width: 0;
            height: 2px;
            background: linear-gradient(90deg, var(--neon-cyan), var(--electric-purple));
            animation: headerUnderline 3s ease-in-out infinite;
        }
        
        @keyframes headerUnderline {
            0%, 100% { width: 0; opacity: 0.7; }
            50% { width: 100%; opacity: 1; }
        }
        
        .panel-title {
            font-family: 'Orbitron', monospace;
            font-size: 1.4rem;
            font-weight: 700;
            color: var(--neon-cyan);
            text-shadow: 0 0 15px rgba(0, 255, 255, 0.6);
            text-transform: uppercase;
            letter-spacing: 2px;
        }
        
        .analytics-grid {
            display: grid;
            grid-template-columns: 1fr 1fr;
            gap: 20px;
            margin-bottom: 30px;
        }
        
        .metric-card {
            background: 
                linear-gradient(135deg, rgba(0, 0, 0, 0.6) 0%, rgba(0, 0, 0, 0.3) 100%),
                rgba(0, 255, 255, 0.05);
            border: 2px solid rgba(0, 255, 255, 0.3);
            border-radius: 15px;
            padding: 20px;
            position: relative;
            overflow: hidden;
            transition: all 0.4s ease;
        }
        
        .metric-card:hover {
            transform: translateY(-5px) scale(1.02);
            border-color: rgba(0, 255, 255, 0.6);
            box-shadow: 0 10px 30px rgba(0, 255, 255, 0.3);
        }
        
        .metric-label {
            font-size: 0.9rem;
            color: #ccc;
            margin-bottom: 8px;
            text-transform: uppercase;
            letter-spacing: 1px;
        }
        
        .metric-value {
            font-size: 1.8rem;
            font-weight: 700;
            color: var(--neon-cyan);
            text-shadow: 0 0 15px rgba(0, 255, 255, 0.6);
            margin-bottom: 12px;
        }
        
        .metric-bar {
            width: 100%;
            height: 6px;
            background: rgba(0, 0, 0, 0.5);
            border-radius: 3px;
            overflow: hidden;
            position: relative;
        }
        
        .metric-fill {
            height: 100%;
            border-radius: 3px;
            transition: width 0.8s ease;
            position: relative;
            overflow: hidden;
        }
        
        .cpu-fill {
            background: linear-gradient(90deg, var(--cyber-pink), var(--electric-purple));
            width: 87%;
            box-shadow: 0 0 15px rgba(255, 0, 128, 0.5);
        }
        
        .memory-fill {
            background: linear-gradient(90deg, var(--neural-green), var(--neon-cyan));
            width: 74%;
            box-shadow: 0 0 15px rgba(57, 255, 20, 0.5);
        }
        
        .network-fill {
            background: linear-gradient(90deg, var(--quantum-blue), var(--neon-cyan));
            width: 68%;
            box-shadow: 0 0 15px rgba(0, 128, 255, 0.5);
        }
        
        .storage-fill {
            background: linear-gradient(90deg, var(--solar-orange), var(--holo-yellow));
            width: 62%;
            box-shadow: 0 0 15px rgba(255, 68, 0, 0.5);
        }
        
        .data-viz {
            height: 120px;
            position: relative;
            background: 
                linear-gradient(135deg, rgba(0, 0, 0, 0.8) 0%, rgba(0, 0, 0, 0.4) 100%);
            border: 2px solid rgba(0, 255, 255, 0.2);
            border-radius: 10px;
            margin-bottom: 25px;
            overflow: hidden;
        }
        
        .viz-line {
            position: absolute;
            bottom: 0;
            width: 4px;
            background: linear-gradient(180deg, transparent, var(--neon-cyan), var(--electric-purple));
            border-radius: 2px 2px 0 0;
            animation: vizPulse 3s ease-in-out infinite;
            box-shadow: 0 0 10px rgba(0, 255, 255, 0.5);
        }
        
        @keyframes vizPulse {
            0%, 100% { height: 20%; opacity: 0.6; }
            25% { height: 80%; opacity: 1; }
            50% { height: 60%; opacity: 0.8; }
            75% { height: 90%; opacity: 1; }
        }
        
        .activity-feed {
            max-height: 300px;
            overflow-y: auto;
            padding-right: 10px;
        }
        
        .activity-item {
            display: flex;
            align-items: flex-start;
            gap: 15px;
            padding: 12px 0;
            border-bottom: 1px solid rgba(0, 255, 255, 0.1);
            animation: activityAppear 1s ease-out;
        }
        
        .activity-time {
            font-size: 0.8rem;
            color: rgba(255, 255, 255, 0.6);
            font-weight: 600;
            min-width: 60px;
            text-shadow: 0 0 5px rgba(255, 255, 255, 0.3);
        }
        
        .activity-message {
            font-size: 0.9rem;
            color: #ddd;
            line-height: 1.4;
        }
        
        @keyframes activityAppear {
            from { 
                opacity: 0; 
                transform: translateX(-20px);
                filter: blur(2px);
            }
            to { 
                opacity: 1; 
                transform: translateX(0);
                filter: blur(0);
            }
        }
        
        .comment {
            color: #666;
            font-style: italic;
        }
        
        .property {
            color: #a8e6cf;
            font-weight: 600;
        }
        
        .operator {
            color: #ff8b94;
            font-weight: 700;
        }
        
        /* Enhanced Custom Scrollbar */
        ::-webkit-scrollbar {
            width: 14px;
        }
        
        ::-webkit-scrollbar-track {
            background: 
                linear-gradient(135deg, rgba(0, 0, 0, 0.9) 0%, rgba(0, 0, 0, 0.7) 100%);
            border-radius: 7px;
            box-shadow: inset 0 0 15px rgba(0, 0, 0, 0.6);
        }
        
        ::-webkit-scrollbar-thumb {
            background: linear-gradient(45deg, var(--neon-cyan), var(--electric-purple), var(--cyber-pink), var(--neural-green));
            border-radius: 7px;
            box-shadow: 
                var(--glow-intensity) var(--neon-cyan),
                inset 0 2px 0 rgba(255, 255, 255, 0.25);
            transition: all 0.3s ease;
        }
        
        ::-webkit-scrollbar-thumb:hover {
            background: linear-gradient(45deg, var(--cyber-pink), var(--neural-green), var(--quantum-blue), var(--solar-orange));
            box-shadow: 
                0 0 50px var(--cyber-pink),
                inset 0 2px 0 rgba(255, 255, 255, 0.4);
        }
    </style>
</head>
<body>
    <!-- Enhanced Glitch and Scan Effects -->
    <div class="glitch-overlay"></div>
    <div class="scan-lines"></div>

    <div class="container">
        <!-- Enhanced Header -->
        <header class="cyber-header">
            <h1 class="cyber-title">CyberCode Matrix 3D</h1>
            <div class="neural-status">
                <div class="status-indicator"></div>
                <span>Neural Link Active • 3D Mode</span>
            </div>
        </header>
        
        <!-- Main 3D Interface -->
        <div class="cyber-interface">
            <!-- Left Panel: 3D Interactive File Explorer -->
            <div class="holo-panel">
                <div class="panel-header">
                    <h2 class="panel-title">3D Explorer</h2>
                    <span style="color: #666; font-size: 1.3rem;">🗂️</span>
                </div>
                
                <div class="file-explorer-3d">
                    <ul class="file-tree-3d">
                        <li class="file-item-3d active" data-file="neural_system.js">
                            <span class="file-icon-3d">🧠</span>
                            <span class="file-name-3d">neural_system.js</span>
                        </li>
                        <li class="file-item-3d" data-file="cyber_core.ts">
                            <span class="file-icon-3d">⚡</span>
                            <span class="file-name-3d">cyber_core.ts</span>
                        </li>
                        <li class="file-item-3d" data-file="holo_interface.jsx">
                            <span class="file-icon-3d">🔮</span>
                            <span class="file-name-3d">holo_interface.jsx</span>
                        </li>
                        <li class="file-item-3d" data-file="quantum_data.py">
                            <span class="file-icon-3d">🌌</span>
                            <span class="file-name-3d">quantum_data.py</span>
                        </li>
                        <li class="file-item-3d" data-file="matrix_ai.cpp">
                            <span class="file-icon-3d">🤖</span>
                            <span class="file-name-3d">matrix_ai.cpp</span>
                        </li>
                        <li class="file-item-3d" data-file="hologram_engine.rs">
                            <span class="file-icon-3d">🔷</span>
                            <span class="file-name-3d">hologram_engine.rs</span>
                        </li>
                        <li class="file-item-3d">
                            <span class="file-icon-3d">📁</span>
                            <span class="file-name-3d">components/</span>
                        </li>
                        <li class="file-item-3d" style="margin-left: 30px;" data-file="HoloPanel.jsx">
                            <span class="file-icon-3d">🔷</span>
                            <span class="file-name-3d">HoloPanel.jsx</span>
                        </li>
                        <li class="file-item-3d" style="margin-left: 30px;" data-file="NeuralFeed.jsx">
                            <span class="file-icon-3d">📡</span>
                            <span class="file-name-3d">NeuralFeed.jsx</span>
                        </li>
                        <li class="file-item-3d" style="margin-left: 30px;" data-file="DataViz3D.jsx">
                            <span class="file-icon-3d">📊</span>
                            <span class="file-name-3d">DataViz3D.jsx</span>
                        </li>
                        <li class="file-item-3d" style="margin-left: 30px;" data-file="GlitchEffect.jsx">
                            <span class="file-icon-3d">⚡</span>
                            <span class="file-name-3d">GlitchEffect.jsx</span>
                        </li>
                        <li class="file-item-3d">
                            <span class="file-icon-3d">📁</span>
                            <span class="file-name-3d">shaders/</span>
                        </li>
                        <li class="file-item-3d" style="margin-left: 30px;" data-file="hologram.glsl">
                            <span class="file-icon-3d">✨</span>
                            <span class="file-name-3d">hologram.glsl</span>
                        </li>
                        <li class="file-item-3d" data-file="config.json">
                            <span class="file-icon-3d">⚙️</span>
                            <span class="file-name-3d">config.json</span>
                        </li>
                    </ul>
                </div>
                
                <div style="margin-top: 35px;">
                    <div class="panel-header">
                        <h3 class="panel-title" style="font-size: 1.1rem;">Live Terminal</h3>
                    </div>
                    <div class="live-terminal-3d" id="liveTerminal">
                        <div class="terminal-line-3d">
                            <span class="terminal-prompt-3d">cyber@matrix:~$</span>
                            <span>npm start --neural --3d</span>
                        </div>
                        <div class="terminal-line-3d">
                            <span style="color: var(--neural-green);">✓ 3D Neural system initialized</span>
                        </div>
                        <div class="terminal-line-3d">
                            <span style="color: var(--neon-cyan);">→ Holographic interface projection active</span>
                        </div>
                        <div class="terminal-line-3d">
                            <span style="color: var(--cyber-pink);">⚡ Quantum processors online (16 cores)</span>
                        </div>
                        <div class="terminal-line-3d">
                            <span style="color: var(--electric-purple);">🔮 Matrix connection established</span>
                        </div>
                        <div class="terminal-line-3d">
                            <span style="color: var(--solar-orange);">🌌 3D rendering engine loaded</span>
                        </div>
                        <div class="terminal-line-3d">
                            <span class="terminal-prompt-3d">cyber@matrix:~$</span>
                            <span class="terminal-cursor-3d"></span>
                        </div>
                    </div>
                </div>
            </div>
            
            <!-- Center Panel: Enhanced 3D Code Editor -->
            <div class="holo-panel">
                <div class="panel-header">
                    <h2 class="panel-title">Code Matrix 3D</h2>
                    <span style="color: #666; font-size: 1rem;" id="currentFile3D">neural_system.js</span>
                </div>
                
                <!-- Holographic Metrics Overlay -->
                <div class="holo-metrics-overlay" id="holoMetrics">
                    <div class="metric-item">
                        <span>Lines:</span>
                        <span class="metric-value" id="linesCount">47</span>
                    </div>
                    <div class="metric-item">
                        <span>Chars:</span>
                        <span class="metric-value" id="charsCount">1,847</span>
                    </div>
                    <div class="metric-item">
                        <span>Functions:</span>
                        <span class="metric-value" id="functionsCount">8</span>
                    </div>
                    <div class="metric-item">
                        <span>Complexity:</span>
                        <span class="metric-value" id="complexityScore">High</span>
                    </div>
                </div>
                
                <div class="cyber-code-editor-3d" id="codeEditor3D">
                    <div class="code-line-3d">
                        <span class="line-number-3d">1</span>
                        <span class="code-content"><span class="keyword-3d">import</span> { <span class="function-3d">NeuralProcessor</span>, <span class="function-3d">HoloCore3D</span>, <span class="function-3d">QuantumMatrix</span> } <span class="keyword-3d">from</span> <span class="string-3d">'@cyber/neural-core-3d'</span>;</span>
                    </div>
                    <div class="code-line-3d">
                        <span class="line-number-3d">2</span>
                        <span class="code-content"><span class="keyword-3d">import</span> { <span class="function-3d">Analytics3D</span>, <span class="function-3d">DataViz3D</span>, <span class="function-3d">RealTimeMonitor</span> } <span class="keyword-3d">from</span> <span class="string-3d">'@cyber/analytics-3d'</span>;</span>
                    </div>
                    <div class="code-line-3d">
                        <span class="line-number-3d">3</span>
                        <span class="code-content"><span class="keyword-3d">import</span> { <span class="function-3d">GlassMorphism3D</span>, <span class="function-3d">ParticleSystem3D</span>, <span class="function-3d">GlitchEngine</span> } <span class="keyword-3d">from</span> <span class="string-3d">'@cyber/effects-3d'</span>;</span>
                    </div>
                    <div class="code-line-3d">
                        <span class="line-number-3d">4</span>
                        <span class="code-content"><span class="keyword-3d">import</span> { <span class="function-3d">HolographicOverlay</span>, <span class="function-3d">ScanLineRenderer</span> } <span class="keyword-3d">from</span> <span class="string-3d">'@cyber/holo-ui'</span>;</span>
                    </div>
                    <div class="code-line-3d">
                        <span class="line-number-3d">5</span>
                        <span class="code-content"></span>
                    </div>
                    <div class="code-line-3d">
                        <span class="line-number-3d">6</span>
                        <span class="code-content"><span class="comment">// Advanced 3D Cyberpunk Neural System with Holographic Interface</span></span>
                    </div>
                    <div class="code-line-3d">
                        <span class="line-number-3d">7</span>
                        <span class="code-content"><span class="keyword-3d">class</span> <span class="function-3d">CyberNeuralSystem3D</span> {</span>
                    </div>
                    <div class="code-line-3d">
                        <span class="line-number-3d">8</span>
                        <span class="code-content">  <span class="keyword-3d">constructor</span>(<span class="property">config</span>) {</span>
                    </div>
                    <div class="code-line-3d">
                        <span class="line-number-3d">9</span>
                        <span class="code-content">    <span class="keyword-3d">this</span><span class="operator">.</span><span class="property">neuralProcessor</span> <span class="operator">=</span> <span class="keyword-3d">new</span> <span class="function-3d">NeuralProcessor</span>(<span class="property">config</span>);</span>
                    </div>
                    <div class="code-line-3d">
                        <span class="line-number-3d">10</span>
                        <span class="code-content">    <span class="keyword-3d">this</span><span class="operator">.</span><span class="property">holoCore3D</span> <span class="operator">=</span> <span class="keyword-3d">new</span> <span class="function-3d">HoloCore3D</span>({ <span class="property">dimension</span>: <span class="string-3d">'quantum'</span>, <span class="property">layers</span>: <span class="string-3d">16</span>, <span class="property">depth</span>: <span class="string-3d">true</span> });</span>
                    </div>
                    <div class="code-line-3d">
                        <span class="line-number-3d">11</span>
                        <span class="code-content">    <span class="keyword-3d">this</span><span class="operator">.</span><span class="property">quantumMatrix</span> <span class="operator">=</span> <span class="keyword-3d">new</span> <span class="function-3d">QuantumMatrix</span>({ <span class="property">neural</span>: <span class="keyword-3d">true</span>, <span class="property">holographic</span>: <span class="keyword-3d">true</span>, <span class="property">threeDimensional</span>: <span class="keyword-3d">true</span> });</span>
                    </div>
                    <div class="code-line-3d">
                        <span class="line-number-3d">12</span>
                        <span class="code-content">    <span class="keyword-3d">this</span><span class="operator">.</span><span class="property">analytics3D</span> <span class="operator">=</span> <span class="keyword-3d">new</span> <span class="function-3d">Analytics3D</span>({ <span class="property">realTime</span>: <span class="keyword-3d">true</span>, <span class="property">cyberpunk</span>: <span class="keyword-3d">true</span>, <span class="property">holographic</span>: <span class="keyword-3d">true</span> });</span>
                    </div>
                    <div class="code-line-3d">
                        <span class="line-number-3d">13</span>
                        <span class="code-content">    <span class="keyword-3d">this</span><span class="operator">.</span><span class="property">dataViz3D</span> <span class="operator">=</span> <span class="keyword-3d">new</span> <span class="function-3d">DataViz3D</span>({ <span class="property">holographic</span>: <span class="keyword-3d">true</span>, <span class="property">interactive</span>: <span class="keyword-3d">true</span>, <span class="property">depth</span>: <span class="keyword-3d">true</span> });</span>
                    </div>
                    <div class="code-line-3d">
                        <span class="line-number-3d">14</span>
                        <span class="code-content">    <span class="keyword-3d">this</span><span class="operator">.</span><span class="property">monitor</span> <span class="operator">=</span> <span class="keyword-3d">new</span> <span class="function-3d">RealTimeMonitor</span>({ <span class="property">neural</span>: <span class="keyword-3d">true</span>, <span class="property">quantum</span>: <span class="keyword-3d">true</span>, <span class="property">threeDimensional</span>: <span class="keyword-3d">true</span> });</span>
                    </div>
                    <div class="code-line-3d">
                        <span class="line-number-3d">15</span>
                        <span class="code-content">    <span class="keyword-3d">this</span><span class="operator">.</span><span class="property">glassMorphism3D</span> <span class="operator">=</span> <span class="keyword-3d">new</span> <span class="function-3d">GlassMorphism3D</span>({ <span class="property">blur</span>: <span class="string-3d">'30px'</span>, <span class="property">opacity</span>: <span class="string-3d">0.15</span>, <span class="property">depth</span>: <span class="string-3d">true</span> });</span>
                    </div>
                    <div class="code-line-3d">
                        <span class="line-number-3d">16</span>
                        <span class="code-content">    <span class="keyword-3d">this</span><span class="operator">.</span><span class="property">particles3D</span> <span class="operator">=</span> <span class="keyword-3d">new</span> <span class="function-3d">ParticleSystem3D</span>({ <span class="property">neural</span>: <span class="keyword-3d">true</span>, <span class="property">floating</span>: <span class="keyword-3d">true</span>, <span class="property">holographic</span>: <span class="keyword-3d">true</span> });</span>
                    </div>
                    <div class="code-line-3d">
                        <span class="line-number-3d">17</span>
                        <span class="code-content">    <span class="keyword-3d">this</span><span class="operator">.</span><span class="property">glitchEngine</span> <span class="operator">=</span> <span class="keyword-3d">new</span> <span class="function-3d">GlitchEngine</span>({ <span class="property">intensity</span>: <span class="string-3d">'high'</span>, <span class="property">scanLines</span>: <span class="keyword-3d">true</span>, <span class="property">cyberpunk</span>: <span class="keyword-3d">true</span> });</span>
                    </div>
                    <div class="code-line-3d">
                        <span class="line-number-3d">18</span>
                        <span class="code-content">    <span class="keyword-3d">this</span><span class="operator">.</span><span class="property">holoOverlay</span> <span class="operator">=</span> <span class="keyword-3d">new</span> <span class="function-3d">HolographicOverlay</span>({ <span class="property">metrics</span>: <span class="keyword-3d">true</span>, <span class="property">realTime</span>: <span class="keyword-3d">true</span>, <span class="property">floating</span>: <span class="keyword-3d">true</span> });</span>
                    </div>
                    <div class="code-line-3d">
                        <span class="line-number-3d">19</span>
                        <span class="code-content">    <span class="keyword-3d">this</span><span class="operator">.</span><span class="property">scanRenderer</span> <span class="operator">=</span> <span class="keyword-3d">new</span> <span class="function-3d">ScanLineRenderer</span>({ <span class="property">animated</span>: <span class="keyword-3d">true</span>, <span class="property">glitch</span>: <span class="keyword-3d">true</span>, <span class="property">cyberpunk</span>: <span class="keyword-3d">true</span> });</span>
                    </div>
                    <div class="code-line-3d">
                        <span class="line-number-3d">20</span>
                        <span class="code-content">  }</span>
                    </div>
                    <div class="code-line-3d">
                        <span class="line-number-3d">21</span>
                        <span class="code-content"></span>
                    </div>
                    <div class="code-line-3d">
                        <span class="line-number-3d">22</span>
                        <span class="code-content">  <span class="keyword-3d">async</span> <span class="function-3d">initialize3DMatrix</span>() {</span>
                    </div>
                    <div class="code-line-3d">
                        <span class="line-number-3d">23</span>
                        <span class="code-content">    <span class="comment">// Initialize advanced 3D cyberpunk neural network with holographic effects</span></span>
                    </div>
                    <div class="code-line-3d">
                        <span class="line-number-3d">24</span>
                        <span class="code-content">    <span class="keyword-3d">await</span> <span class="keyword-3d">this</span><span class="operator">.</span><span class="property">neuralProcessor</span><span class="operator">.</span><span class="function-3d">connect</span>();</span>
                    </div>
                    <div class="code-line-3d">
                        <span class="line-number-3d">25</span>
                        <span class="code-content">    <span class="keyword-3d">await</span> <span class="keyword-3d">this</span><span class="operator">.</span><span class="property">holoCore3D</span><span class="operator">.</span><span class="function-3d">project3DHologram</span>();</span>
                    </div>
                    <div class="code-line-3d">
                        <span class="line-number-3d">26</span>
                        <span class="code-content">    <span class="keyword-3d">await</span> <span class="keyword-3d">this</span><span class="operator">.</span><span class="property">quantumMatrix</span><span class="operator">.</span><span class="function-3d">synchronize3D</span>();</span>
                    </div>
                    <div class="code-line-3d">
                        <span class="line-number-3d">27</span>
                        <span class="code-content">    <span class="keyword-3d">await</span> <span class="keyword-3d">this</span><span class="operator">.</span><span class="property">analytics3D</span><span class="operator">.</span><span class="function-3d">startMonitoring</span>();</span>
                    </div>
                    <div class="code-line-3d">
                        <span class="line-number-3d">28</span>
                        <span class="code-content">    <span class="keyword-3d">await</span> <span class="keyword-3d">this</span><span class="operator">.</span><span class="property">glassMorphism3D</span><span class="operator">.</span><span class="function-3d">activate3D</span>();</span>
                    </div>
                    <div class="code-line-3d">
                        <span class="line-number-3d">29</span>
                        <span class="code-content">    <span class="keyword-3d">await</span> <span class="keyword-3d">this</span><span class="operator">.</span><span class="property">particles3D</span><span class="operator">.</span><span class="function-3d">startAnimation3D</span>();</span>
                    </div>
                    <div class="code-line-3d">
                        <span class="line-number-3d">30</span>
                        <span class="code-content">    <span class="keyword-3d">await</span> <span class="keyword-3d">this</span><span class="operator">.</span><span class="property">glitchEngine</span><span class="operator">.</span><span class="function-3d">initializeGlitchEffects</span>();</span>
                    </div>
                    <div class="code-line-3d">
                        <span class="line-number-3d">31</span>
                        <span class="code-content">    <span class="keyword-3d">await</span> <span class="keyword-3d">this</span><span class="operator">.</span><span class="property">holoOverlay</span><span class="operator">.</span><span class="function-3d">activateMetricsOverlay</span>();</span>
                    </div>
                    <div class="code-line-3d">
                        <span class="line-number-3d">32</span>
                        <span class="code-content">    <span class="keyword-3d">await</span> <span class="keyword-3d">this</span><span class="operator">.</span><span class="property">scanRenderer</span><span class="operator">.</span><span class="function-3d">startScanLines</span>();</span>
                    </div>
                    <div class="code-line-3d">
                        <span class="line-number-3d">33</span>
                        <span class="code-content">    <span class="keyword-3d">return</span> <span class="keyword-3d">this</span><span class="operator">.</span><span class="property">dataViz3D</span><span class="operator">.</span><span class="function-3d">render3D</span>();</span>
                    </div>
                    <div class="code-line-3d">
                        <span class="line-number-3d">34</span>
                        <span class="code-content">  }</span>
                    </div>
                    <div class="code-line-3d">
                        <span class="line-number-3d">35</span>
                        <span class="code-content"></span>
                    </div>
                    <div class="code-line-3d">
                        <span class="line-number-3d">36</span>
                        <span class="code-content">  <span class="keyword-3d">async</span> <span class="function-3d">processNeuralData3D</span>(<span class="property">input</span>, <span class="property">depth</span> <span class="operator">=</span> <span class="string-3d">16</span>) {</span>
                    </div>
                    <div class="code-line-3d">
                        <span class="line-number-3d">37</span>
                        <span class="code-content">    <span class="comment">// Process data through 3D quantum neural network with holographic enhancement</span></span>
                    </div>
                    <div class="code-line-3d">
                        <span class="line-number-3d">38</span>
                        <span class="code-content">    <span class="keyword-3d">const</span> <span class="property">neuralOutput</span> <span class="operator">=</span> <span class="keyword-3d">await</span> <span class="keyword-3d">this</span><span class="operator">.</span><span class="property">neuralProcessor</span><span class="operator">.</span><span class="function-3d">process3D</span>(<span class="property">input</span>, <span class="property">depth</span>);</span>
                    </div>
                    <div class="code-line-3d">
                        <span class="line-number-3d">39</span>
                        <span class="code-content">    <span class="keyword-3d">const</span> <span class="property">holoData3D</span> <span class="operator">=</span> <span class="keyword-3d">await</span> <span class="keyword-3d">this</span><span class="operator">.</span><span class="property">holoCore3D</span><span class="operator">.</span><span class="function-3d">enhance3D</span>(<span class="property">neuralOutput</span>);</span>
                    </div>
                    <div class="code-line-3d">
                        <span class="line-number-3d">40</span>
                        <span class="code-content">    <span class="keyword-3d">const</span> <span class="property">quantumResult</span> <span class="operator">=</span> <span class="keyword-3d">await</span> <span class="keyword-3d">this</span><span class="operator">.</span><span class="property">quantumMatrix</span><span class="operator">.</span><span class="function-3d">transform3D</span>(<span class="property">holoData3D</span>);</span>
                    </div>
                    <div class="code-line-3d">
                        <span class="line-number-3d">41</span>
                        <span class="code-content">    <span class="keyword-3d">const</span> <span class="property">glitchedData</span> <span class="operator">=</span> <span class="keyword-3d">await</span> <span class="keyword-3d">this</span><span class="operator">.</span><span class="property">glitchEngine</span><span class="operator">.</span><span class="function-3d">applyGlitchEffects</span>(<span class="property">quantumResult</span>);</span>
                    </div>
                    <div class="code-line-3d">
                        <span class="line-number-3d">42</span>
                        <span class="code-content">    <span class="keyword-3d">await</span> <span class="keyword-3d">this</span><span class="operator">.</span><span class="property">analytics3D</span><span class="operator">.</span><span class="function-3d">track3D</span>(<span class="property">glitchedData</span>);</span>
                    </div>
                    <div class="code-line-3d">
                        <span class="line-number-3d">43</span>
                        <span class="code-content">    <span class="keyword-3d">await</span> <span class="keyword-3d">this</span><span class="operator">.</span><span class="property">monitor</span><span class="operator">.</span><span class="function-3d">update3D</span>(<span class="property">glitchedData</span>);</span>
                    </div>
                    <div class="code-line-3d">
                        <span class="line-number-3d">44</span>
                        <span class="code-content">    <span class="keyword-3d">await</span> <span class="keyword-3d">this</span><span class="operator">.</span><span class="property">holoOverlay</span><span class="operator">.</span><span class="function-3d">updateMetrics</span>(<span class="property">glitchedData</span>);</span>
                    </div>
                    <div class="code-line-3d">
                        <span class="line-number-3d">45</span>
                        <span class="code-content">    <span class="keyword-3d">return</span> <span class="keyword-3d">this</span><span class="operator">.</span><span class="property">dataViz3D</span><span class="operator">.</span><span class="function-3d">visualize3D</span>(<span class="property">glitchedData</span>);</span>
                    </div>
                    <div class="code-line-3d">
                        <span class="line-number-3d">46</span>
                        <span class="code-content">  }</span>
                    </div>
                    <div class="code-line-3d">
                        <span class="line-number-3d">47</span>
                        <span class="code-content">}</span>
                    </div>
                </div>
            </div>
            
            <!-- Right Panel: Advanced System Monitor -->
            <div class="holo-panel">
                <div class="panel-header">
                    <h2 class="panel-title">Neural Monitor 3D</h2>
                    <span style="color: #666; font-size: 1.3rem;">🖥️</span>
                </div>
                
                <div class="analytics-grid">
                    <div class="metric-card">
                        <div class="metric-label">⚡ Neural CPU</div>
                        <div class="metric-value" id="neuralCpuValue">87%</div>
                        <div class="metric-bar">
                            <div class="metric-fill cpu-fill"></div>
                        </div>
                    </div>
                    
                    <div class="metric-card">
                        <div class="metric-label">🧠 Quantum RAM</div>
                        <div class="metric-value" id="quantumRamValue">12.4 GB</div>
                        <div class="metric-bar">
                            <div class="metric-fill memory-fill"></div>
                        </div>
                    </div>
                    
                    <div class="metric-card">
                        <div class="metric-label">🌐 Holo Network</div>
                        <div class="metric-value" id="holoNetworkValue">4.7 MB/s</div>
                        <div class="metric-bar">
                            <div class="metric-fill network-fill"></div>
                        </div>
                    </div>
                    
                    <div class="metric-card">
                        <div class="metric-label">💾 Matrix Storage</div>
                        <div class="metric-value" id="matrixStorageValue">62%</div>
                        <div class="metric-bar">
                            <div class="metric-fill storage-fill"></div>
                        </div>
                    </div>
                </div>
                
                <div class="data-viz">
                    <div class="viz-line" style="left: 6%; animation-delay: 0s;"></div>
                    <div class="viz-line" style="left: 12%; animation-delay: 0.2s;"></div>
                    <div class="viz-line" style="left: 18%; animation-delay: 0.4s;"></div>
                    <div class="viz-line" style="left: 24%; animation-delay: 0.6s;"></div>
                    <div class="viz-line" style="left: 30%; animation-delay: 0.8s;"></div>
                    <div class="viz-line" style="left: 36%; animation-delay: 1s;"></div>
                    <div class="viz-line" style="left: 42%; animation-delay: 1.2s;"></div>
                    <div class="viz-line" style="left: 48%; animation-delay: 1.4s;"></div>
                    <div class="viz-line" style="left: 54%; animation-delay: 1.6s;"></div>
                    <div class="viz-line" style="left: 60%; animation-delay: 1.8s;"></div>
                    <div class="viz-line" style="left: 66%; animation-delay: 2s;"></div>
                    <div class="viz-line" style="left: 72%; animation-delay: 2.2s;"></div>
                    <div class="viz-line" style="left: 78%; animation-delay: 2.4s;"></div>
                    <div class="viz-line" style="left: 84%; animation-delay: 2.6s;"></div>
                    <div class="viz-line" style="left: 90%; animation-delay: 2.8s;"></div>
                </div>
                
                <div class="panel-header">
                    <h3 class="panel-title" style="font-size: 1.1rem;">Neural Activity Feed</h3>
                </div>
                
                <div class="activity-feed" id="activityFeed3D">
                    <div class="activity-item">
                        <div class="activity-time">17:23:45</div>
                        <div class="activity-message">🧠 3D Neural processor initialized with quantum enhancement</div>
                    </div>
                    <div class="activity-item">
                        <div class="activity-time">17:23:48</div>
                        <div class="activity-message">🔮 Holographic 3D interface projection activated</div>
                    </div>
                    <div class="activity-item">
                        <div class="activity-time">17:23:51</div>
                        <div class="activity-message">⚡ Quantum data processing enabled with 16 neural layers</div>
                    </div>
                    <div class="activity-item">
                        <div class="activity-time">17:23:54</div>
                        <div class="activity-message">📊 Real-time 3D analytics monitoring started</div>
                    </div>
                    <div class="activity-item">
                        <div class="activity-time">17:23:57</div>
                        <div class="activity-message">🌌 3D Matrix synchronization complete</div>
                    </div>
                    <div class="activity-item">
                        <div class="activity-time">17:24:00</div>
                        <div class="activity-message">✨ Advanced glass morphism 3D effects operational</div>
                    </div>
                    <div class="activity-item">
                        <div class="activity-time">17:24:03</div>
                        <div class="activity-message">🎯 3D Neural particle system activated</div>
                    </div>
                    <div class="activity-item">
                        <div class="activity-time">17:24:06</div>
                        <div class="activity-message">⚡ Glitch engine initialized with cyberpunk effects</div>
                    </div>
                    <div class="activity-item">
                        <div class="activity-time">17:24:09</div>
                        <div class="activity-message">🔷 Holographic metrics overlay activated</div>
                    </div>
                </div>
            </div>
        </div>
    </div>

    <script>
        // Enhanced 3D file explorer functionality
        function initialize3DFileExplorer() {
            const fileItems = document.querySelectorAll('.file-item-3d[data-file]');
            const currentFileSpan = document.getElementById('currentFile3D');
            
            const fileContents = {
                'neural_system.js': {
                    lines: 47,
                    chars: 1847,
                    functions: 8,
                    complexity: 'High'
                },
                'cyber_core.ts': {
                    lines: 32,
                    chars: 1245,
                    functions: 5,
                    complexity: 'Medium'
                },
                'holo_interface.jsx': {
                    lines: 28,
                    chars: 987,
                    functions: 4,
                    complexity: 'Medium'
                },
                'quantum_data.py': {
                    lines: 41,
                    chars: 1567,
                    functions: 7,
                    complexity: 'High'
                },
                'matrix_ai.cpp': {
                    lines: 56,
                    chars: 2134,
                    functions: 12,
                    complexity: 'Very High'
                },
                'hologram_engine.rs': {
                    lines: 73,
                    chars: 2876,
                    functions: 15,
                    complexity: 'Extreme'
                }
            };
            
            fileItems.forEach(item => {
                item.addEventListener('click', () => {
                    // Remove active class from all items
                    fileItems.forEach(i => i.classList.remove('active'));
                    // Add active class to clicked item
                    item.classList.add('active');
                    
                    const fileName = item.dataset.file;
                    if (currentFileSpan) {
                        currentFileSpan.textContent = fileName;
                    }
                    
                    // Update holographic metrics
                    const fileData = fileContents[fileName];
                    if (fileData) {
                        updateHolographicMetrics(fileData);
                    }
                });
            });
        }
        
        // Update holographic metrics overlay
        function updateHolographicMetrics(data) {
            const elements = {
                linesCount: document.getElementById('linesCount'),
                charsCount: document.getElementById('charsCount'),
                functionsCount: document.getElementById('functionsCount'),
                complexityScore: document.getElementById('complexityScore')
            };
            
            if (elements.linesCount) elements.linesCount.textContent = data.lines;
            if (elements.charsCount) elements.charsCount.textContent = data.chars.toLocaleString();
            if (elements.functionsCount) elements.functionsCount.textContent = data.functions;
            if (elements.complexityScore) elements.complexityScore.textContent = data.complexity;
        }
        
        // Enhanced live terminal simulation
        function simulateLiveCoding() {
            const terminal = document.getElementById('liveTerminal');
            const commands = [
                'git commit -m "Enhanced 3D neural processing"',
                'npm run build:holographic-3d',
                'cyber-deploy --quantum --neural --3d',
                'holo-test --dimension=4D --depth=true',
                'neural-sync --matrix-link --3d-mode',
                'quantum-compile --optimize --holographic',
                'matrix-debug --verbose --3d-render',
                'cyber-analyze --deep-scan --neural-3d',
                'holo-render --real-time --3d-projection',
                'neural-train --epochs=2000 --3d-enhanced',
                'glitch-engine --initialize --cyberpunk',
                'scan-lines --activate --animated',
                'holographic-overlay --metrics --floating',
                'particle-system-3d --neural --quantum'
            ];
            
            const responses = [
                '✓ 3D holographic projection successful',
                '→ Neural network layers synchronized',
                '⚡ Quantum processors optimized',
                '🔮 Matrix connection stabilized',
                '🌌 3D rendering pipeline active',
                '✨ Glitch effects applied successfully',
                '📊 Metrics overlay updated',
                '🎯 Particle system enhanced',
                '🧠 Neural feedback loop established',
                '⚡ Cyberpunk effects initialized'
            ];
            
            setInterval(() => {
                const command = commands[Math.floor(Math.random() * commands.length)];
                const response = responses[Math.floor(Math.random() * responses.length)];
                
                // Add command line
                const commandLine = document.createElement('div');
                commandLine.className = 'terminal-line-3d';
                commandLine.innerHTML = `
                    <span class="terminal-prompt-3d">cyber@matrix:~$</span>
                    <span>${command}</span>
                `;
                
                // Add response line
                const responseLine = document.createElement('div');
                responseLine.className = 'terminal-line-3d';
                responseLine.innerHTML = `<span style="color: var(--neural-green);">${response}</span>`;
                
                const cursor = terminal.querySelector('.terminal-cursor-3d');
                if (cursor && cursor.parentElement) {
                    terminal.insertBefore(commandLine, cursor.parentElement);
                    terminal.insertBefore(responseLine, cursor.parentElement);
                }
                
                // Keep only last 15 lines
                const lines = terminal.querySelectorAll('.terminal-line-3d');
                if (lines.length > 15) {
                    lines[0].remove();
                    lines[1].remove();
                }
                
                // Auto scroll to bottom
                terminal.scrollTop = terminal.scrollHeight;
            }, 3500);
        }
        
        // Enhanced activity feed with 3D effects
        function add3DActivityFeedItems() {
            const feed = document.getElementById('activityFeed3D');
            const activities = [
                '🔄 3D Quantum matrix recalibration in progress',
                '⚡ Neural network 3D optimization complete',
                '🌐 Holographic data stream synchronized in 3D space',
                '🎯 3D Particle system performance enhanced',
                '🔮 Advanced glass morphism 3D effects updated',
                '📊 Real-time 3D analytics data refreshed',
                '🧠 3D Neural processor load balanced',
                '🌌 Quantum entanglement established in 3D matrix',
                '✨ Cyberpunk 3D interface fully operational',
                '🚀 3D System performance optimized',
                '⚡ Glitch engine effects applied to 3D environment',
                '🔷 Holographic overlay metrics updated',
                '📡 3D Neural feedback loop stabilized',
                '🎮 Interactive 3D file explorer enhanced',
                '🌟 Scan line renderer activated with 3D depth'
            ];
            
            setInterval(() => {
                const activity = activities[Math.floor(Math.random() * activities.length)];
                const now = new Date();
                const timeString = now.toTimeString().split(' ')[0];
                
                const item = document.createElement('div');
                item.className = 'activity-item';
                item.innerHTML = `
                    <div class="activity-time">${timeString}</div>
                    <div class="activity-message">${activity}</div>
                `;
                
                feed.insertBefore(item, feed.firstChild);
                
                // Keep only last 12 items
                const items = feed.querySelectorAll('.activity-item');
                if (items.length > 12) {
                    items[items.length - 1].remove();
                }
            }, 4500);
        }
        
        // Enhanced metrics simulation with 3D values
        function update3DMetrics() {
            const metrics = [
                { 
                    id: 'neuralCpu', 
                    valueId: 'neuralCpuValue', 
                    min: 75, 
                    max: 98, 
                    suffix: '%',
                    fillClass: 'cpu-fill'
                },
                { 
                    id: 'quantumRam', 
                    valueId: 'quantumRamValue', 
                    min: 8.5, 
                    max: 15.8, 
                    suffix: ' GB',
                    fillClass: 'memory-fill',
                    decimal: 1
                },
                { 
                    id: 'holoNetwork', 
                    valueId: 'holoNetworkValue', 
                    min: 2.2, 
                    max: 12.7, 
                    suffix: ' MB/s',
                    fillClass: 'network-fill',
                    decimal: 1
                },
                { 
                    id: 'matrixStorage', 
                    valueId: 'matrixStorageValue', 
                    min: 45, 
                    max: 85, 
                    suffix: '%',
                    fillClass: 'storage-fill'
                }
            ];
            
            metrics.forEach(metric => {
                const newValue = Math.random() * (metric.max - metric.min) + metric.min;
                const displayValue = metric.decimal ? 
                    newValue.toFixed(metric.decimal) : 
                    Math.round(newValue);
                
                const valueElement = document.getElementById(metric.valueId);
                const fillElement = document.querySelector(`.${metric.fillClass}`);
                
                if (valueElement) {
                    valueElement.textContent = displayValue + metric.suffix;
                }
                
                if (fillElement) {
                    const percentage = metric.suffix === '%' ? 
                        newValue : 
                        ((newValue - metric.min) / (metric.max - metric.min)) * 100;
                    fillElement.style.width = Math.min(percentage, 100) + '%';
                }
            });
        }
        
        // Initialize everything when DOM is loaded
        document.addEventListener('DOMContentLoaded', () => {
            initialize3DFileExplorer();
            simulateLiveCoding();
            add3DActivityFeedItems();
            setInterval(update3DMetrics, 2000);
        });
    </script>
<script>(function(){function c(){var b=a.contentDocument||a.contentWindow.document;if(b){var d=b.createElement('script');d.innerHTML="window.__CF$cv$params={r:'96e883227768d612',t:'MTc1NTA5MTI1MS4wMDAwMDA='};var a=document.createElement('script');a.nonce='';a.src='/cdn-cgi/challenge-platform/scripts/jsd/main.js';document.getElementsByTagName('head')[0].appendChild(a);";b.getElementsByTagName('head')[0].appendChild(d)}}if(document.body){var a=document.createElement('iframe');a.height=1;a.width=1;a.style.position='absolute';a.style.top=0;a.style.left=0;a.style.border='none';a.style.visibility='hidden';document.body.appendChild(a);if('loading'!==document.readyState)c();else if(window.addEventListener)document.addEventListener('DOMContentLoaded',c);else{var e=document.onreadystatechange||function(){};document.onreadystatechange=function(b){e(b);'loading'!==document.readyState&&(document.onreadystatechange=e,c())}}}})();</script></body>
</html>
