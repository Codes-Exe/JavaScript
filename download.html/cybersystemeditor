<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>CyberSystem Code Editor</title>
    <style>
        @import url('https://fonts.googleapis.com/css2?family=Orbitron:wght@400;700;900&family=Fira+Code:wght@300;400;500;600;700&display=swap');
        
        * {
            margin: 0;
            padding: 0;
            box-sizing: border-box;
        }
        
        body {
            font-family: 'Fira Code', monospace;
            background: linear-gradient(135deg, #0a0a0a 0%, #1a0033 25%, #000a1a 50%, #001a33 75%, #0a0a0a 100%);
            color: #00ffff;
            overflow-x: hidden;
            min-height: 100vh;
            position: relative;
        }
        
        body::before {
            content: '';
            position: fixed;
            top: 0;
            left: 0;
            width: 100%;
            height: 100%;
            background: 
                radial-gradient(circle at 20% 80%, rgba(0, 255, 255, 0.1) 0%, transparent 50%),
                radial-gradient(circle at 80% 20%, rgba(255, 0, 255, 0.1) 0%, transparent 50%),
                radial-gradient(circle at 40% 40%, rgba(0, 255, 0, 0.05) 0%, transparent 50%);
            pointer-events: none;
            z-index: -1;
        }
        
        .container {
            max-width: 1600px;
            margin: 0 auto;
            padding: 30px;
        }
        
        .header {
            text-align: center;
            margin-bottom: 50px;
            position: relative;
        }
        
        .title {
            font-family: 'Orbitron', monospace;
            font-size: 3.5rem;
            font-weight: 900;
            background: linear-gradient(45deg, #00ffff, #ff00ff, #ffff00, #00ff00);
            background-size: 400% 400%;
            -webkit-background-clip: text;
            -webkit-text-fill-color: transparent;
            background-clip: text;
            animation: gradientShift 3s ease-in-out infinite, titleGlow 2s ease-in-out infinite alternate;
            text-transform: uppercase;
            letter-spacing: 4px;
        }
        
        @keyframes gradientShift {
            0%, 100% { background-position: 0% 50%; }
            50% { background-position: 100% 50%; }
        }
        
        @keyframes titleGlow {
            from { 
                filter: brightness(1) drop-shadow(0 0 20px rgba(0, 255, 255, 0.3));
                transform: scale(1);
            }
            to { 
                filter: brightness(1.3) drop-shadow(0 0 40px rgba(0, 255, 255, 0.8));
                transform: scale(1.02);
            }
        }
        
        .subtitle {
            font-size: 1.4rem;
            color: #888;
            margin-top: 15px;
            font-weight: 300;
            text-transform: uppercase;
            letter-spacing: 2px;
        }
        
        .main-interface {
            display: grid;
            grid-template-columns: 2fr 1fr;
            gap: 40px;
            margin-bottom: 40px;
        }
        
        .code-panel {
            background: rgba(0, 10, 20, 0.9);
            border: 3px solid #00ffff;
            border-radius: 20px;
            padding: 30px;
            backdrop-filter: blur(15px);
            box-shadow: 
                0 0 50px rgba(0, 255, 255, 0.2),
                inset 0 0 50px rgba(0, 255, 255, 0.05);
            position: relative;
            overflow: hidden;
        }
        
        .code-panel::before {
            content: '';
            position: absolute;
            top: 0;
            left: -100%;
            width: 100%;
            height: 3px;
            background: linear-gradient(90deg, transparent, #00ffff, #ff00ff, #00ffff, transparent);
            animation: borderScan 4s linear infinite;
        }
        
        @keyframes borderScan {
            0% { left: -100%; }
            100% { left: 100%; }
        }
        
        .panel-header {
            display: flex;
            align-items: center;
            justify-content: space-between;
            margin-bottom: 25px;
            padding-bottom: 15px;
            border-bottom: 2px solid rgba(0, 255, 255, 0.3);
        }
        
        .panel-title {
            font-family: 'Orbitron', monospace;
            font-size: 1.6rem;
            color: #00ffff;
            text-transform: uppercase;
            letter-spacing: 3px;
            font-weight: 700;
        }
        
        .file-info {
            display: flex;
            align-items: center;
            gap: 15px;
            font-size: 0.9rem;
            color: #888;
        }
        
        .file-status {
            padding: 5px 12px;
            background: rgba(0, 255, 0, 0.2);
            border: 1px solid #00ff00;
            border-radius: 15px;
            color: #00ff00;
            font-weight: 600;
        }
        
        .code-editor {
            background: linear-gradient(135deg, #000000 0%, #001122 100%);
            border: 2px solid #333;
            border-radius: 15px;
            padding: 25px;
            font-family: 'Fira Code', monospace;
            font-size: 16px;
            color: #00ff00;
            min-height: 400px;
            position: relative;
            overflow: auto;
            box-shadow: inset 0 0 30px rgba(0, 255, 255, 0.1);
        }
        
        .code-line {
            display: flex;
            margin-bottom: 8px;
            padding: 2px 0;
            border-radius: 4px;
            transition: background-color 0.3s ease;
            animation: codeAppear 0.8s ease-out;
        }
        
        .code-line:hover {
            background: rgba(0, 255, 255, 0.05);
        }
        
        @keyframes codeAppear {
            from { 
                opacity: 0; 
                transform: translateX(-20px);
            }
            to { 
                opacity: 1; 
                transform: translateX(0);
            }
        }
        
        .line-number {
            color: #666;
            margin-right: 20px;
            width: 40px;
            text-align: right;
            font-weight: 500;
            user-select: none;
        }
        
        .code-content {
            flex: 1;
            font-weight: 400;
        }
        
        .keyword { 
            color: #ff6b6b; 
            font-weight: 600;
            text-shadow: 0 0 5px rgba(255, 107, 107, 0.3);
        }
        .string { 
            color: #4ecdc4; 
            font-weight: 500;
            text-shadow: 0 0 5px rgba(78, 205, 196, 0.3);
        }
        .comment { 
            color: #95a5a6; 
            font-style: italic;
            opacity: 0.8;
        }
        .function { 
            color: #f39c12; 
            font-weight: 600;
            text-shadow: 0 0 5px rgba(243, 156, 18, 0.3);
        }
        .property {
            color: #e74c3c;
            font-weight: 500;
        }
        .operator {
            color: #9b59b6;
            font-weight: 600;
        }
        
        .control-section {
            background: rgba(0, 20, 40, 0.9);
            border: 3px solid #ff00ff;
            border-radius: 20px;
            padding: 30px;
            backdrop-filter: blur(15px);
            box-shadow: 
                0 0 50px rgba(255, 0, 255, 0.2),
                inset 0 0 50px rgba(255, 0, 255, 0.05);
            position: relative;
            overflow: hidden;
        }
        
        .control-section::before {
            content: '';
            position: absolute;
            top: 0;
            left: -100%;
            width: 100%;
            height: 3px;
            background: linear-gradient(90deg, transparent, #ff00ff, #00ffff, #ff00ff, transparent);
            animation: borderScan 4s linear infinite reverse;
        }
        
        .deploy-button {
            width: 100%;
            background: linear-gradient(45deg, #00ffff, #ff00ff, #ffff00);
            background-size: 300% 300%;
            border: none;
            padding: 20px 40px;
            border-radius: 30px;
            color: #000;
            font-family: 'Orbitron', monospace;
            font-weight: 900;
            font-size: 1.4rem;
            cursor: pointer;
            position: relative;
            overflow: hidden;
            transition: all 0.4s ease;
            text-transform: uppercase;
            letter-spacing: 2px;
            margin-bottom: 30px;
            animation: buttonPulse 2s ease-in-out infinite;
        }
        
        @keyframes buttonPulse {
            0%, 100% { 
                background-position: 0% 50%;
                transform: scale(1);
                box-shadow: 0 5px 25px rgba(0, 255, 255, 0.3);
            }
            50% { 
                background-position: 100% 50%;
                transform: scale(1.05);
                box-shadow: 0 10px 40px rgba(255, 0, 255, 0.5);
            }
        }
        
        .deploy-button:hover {
            transform: scale(1.08) translateY(-3px);
            box-shadow: 0 15px 50px rgba(0, 255, 255, 0.6);
        }
        
        .deploy-button::before {
            content: '';
            position: absolute;
            top: 0;
            left: -100%;
            width: 100%;
            height: 100%;
            background: linear-gradient(90deg, transparent, rgba(255, 255, 255, 0.4), transparent);
            transition: left 0.6s;
        }
        
        .deploy-button:hover::before {
            left: 100%;
        }
        
        .status-indicators {
            display: grid;
            grid-template-columns: 1fr 1fr;
            gap: 15px;
            margin-bottom: 25px;
        }
        
        .status-item {
            background: rgba(0, 255, 255, 0.1);
            padding: 15px;
            border-radius: 12px;
            border-left: 4px solid #00ffff;
            text-align: center;
        }
        
        .status-value {
            font-size: 1.8rem;
            font-weight: 700;
            color: #00ffff;
            font-family: 'Orbitron', monospace;
        }
        
        .status-label {
            font-size: 0.8rem;
            color: #888;
            text-transform: uppercase;
            margin-top: 5px;
        }
        
        .terminal {
            background: linear-gradient(135deg, #000000 0%, #001a00 100%);
            border: 3px solid #00ff00;
            border-radius: 20px;
            padding: 25px;
            margin-top: 40px;
            font-family: 'Fira Code', monospace;
            min-height: 300px;
            box-shadow: 
                0 0 50px rgba(0, 255, 0, 0.2),
                inset 0 0 30px rgba(0, 255, 0, 0.05);
            position: relative;
            overflow: hidden;
        }
        
        .terminal::before {
            content: '';
            position: absolute;
            top: 0;
            left: -100%;
            width: 100%;
            height: 3px;
            background: linear-gradient(90deg, transparent, #00ff00, #00ffff, #00ff00, transparent);
            animation: borderScan 3s linear infinite;
        }
        
        .terminal-header {
            display: flex;
            align-items: center;
            margin-bottom: 20px;
            padding-bottom: 15px;
            border-bottom: 2px solid rgba(0, 255, 0, 0.3);
        }
        
        .terminal-dots {
            display: flex;
            gap: 10px;
        }
        
        .dot {
            width: 14px;
            height: 14px;
            border-radius: 50%;
            animation: dotPulse 2s ease-in-out infinite;
        }
        
        .dot.red { 
            background: #ff5f56; 
            animation-delay: 0s;
        }
        .dot.yellow { 
            background: #ffbd2e; 
            animation-delay: 0.3s;
        }
        .dot.green { 
            background: #27ca3f; 
            animation-delay: 0.6s;
        }
        
        @keyframes dotPulse {
            0%, 100% { opacity: 1; transform: scale(1); }
            50% { opacity: 0.6; transform: scale(1.2); }
        }
        
        .terminal-title {
            margin-left: 20px;
            color: #00ff00;
            font-size: 1.1rem;
            font-weight: 600;
            font-family: 'Orbitron', monospace;
            text-transform: uppercase;
        }
        
        .terminal-content {
            color: #00ff00;
            font-size: 15px;
            line-height: 1.8;
            font-weight: 400;
        }
        
        .prompt {
            color: #00ffff;
            font-weight: 600;
        }
        
        .cursor {
            background: #00ff00;
            color: #000;
            animation: cursorBlink 1.2s infinite;
            font-weight: 900;
        }
        
        @keyframes cursorBlink {
            0%, 50% { opacity: 1; }
            51%, 100% { opacity: 0; }
        }
        
        .deployment-progress {
            margin-top: 20px;
            display: none;
        }
        
        .progress-bar {
            width: 100%;
            height: 8px;
            background: rgba(0, 255, 255, 0.2);
            border-radius: 4px;
            overflow: hidden;
            margin-bottom: 10px;
        }
        
        .progress-fill {
            height: 100%;
            background: linear-gradient(90deg, #00ffff, #ff00ff);
            width: 0%;
            transition: width 0.3s ease;
            animation: progressGlow 2s ease-in-out infinite;
        }
        
        @keyframes progressGlow {
            0%, 100% { box-shadow: 0 0 10px rgba(0, 255, 255, 0.5); }
            50% { box-shadow: 0 0 20px rgba(255, 0, 255, 0.8); }
        }
        
        @media (max-width: 1200px) {
            .main-interface {
                grid-template-columns: 1fr;
            }
            
            .title {
                font-size: 2.5rem;
            }
        }
        
        @media (max-width: 768px) {
            .container {
                padding: 20px;
            }
            
            .code-editor {
                font-size: 14px;
                padding: 20px;
            }
            
            .deploy-button {
                font-size: 1.2rem;
                padding: 15px 30px;
            }
        }
    </style>
</head>
<body>
    <div class="container">
        <header class="header">
            <h1 class="title">CyberSystem Editor</h1>
            <p class="subtitle">Quantum Code Deployment Interface</p>
        </header>
        
        <div class="main-interface">
            <div class="code-panel">
                <div class="panel-header">
                    <h2 class="panel-title">Code Editor</h2>
                    <div class="file-info">
                        <span>CyberSystem.js</span>
                        <div class="file-status">READY</div>
                    </div>
                </div>
                
                <div class="code-editor" id="codeEditor">
                    <div class="code-line">
                        <span class="line-number">1</span>
                        <span class="code-content"><span class="keyword">import</span> { <span class="function">NeuralNetwork</span> } <span class="keyword">from</span> <span class="string">'./ai-core'</span>;</span>
                    </div>
                    <div class="code-line">
                        <span class="line-number">2</span>
                        <span class="code-content"></span>
                    </div>
                    <div class="code-line">
                        <span class="line-number">3</span>
                        <span class="code-content"><span class="keyword">class</span> <span class="function">CyberSystem</span> {</span>
                    </div>
                    <div class="code-line">
                        <span class="line-number">4</span>
                        <span class="code-content">  <span class="keyword">constructor</span>() {</span>
                    </div>
                    <div class="code-line">
                        <span class="line-number">5</span>
                        <span class="code-content">    <span class="keyword">this</span><span class="operator">.</span><span class="property">network</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="function">NeuralNetwork</span>();</span>
                    </div>
                    <div class="code-line">
                        <span class="line-number">6</span>
                        <span class="code-content">    <span class="keyword">this</span><span class="operator">.</span><span class="property">status</span> <span class="operator">=</span> <span class="string">'ONLINE'</span>;</span>
                    </div>
                    <div class="code-line">
                        <span class="line-number">7</span>
                        <span class="code-content">  }</span>
                    </div>
                    <div class="code-line">
                        <span class="line-number">8</span>
                        <span class="code-content"></span>
                    </div>
                    <div class="code-line">
                        <span class="line-number">9</span>
                        <span class="code-content">  <span class="function">deploy</span>() {</span>
                    </div>
                    <div class="code-line">
                        <span class="line-number">10</span>
                        <span class="code-content">    <span class="comment">// Initiating quantum deployment...</span></span>
                    </div>
                    <div class="code-line">
                        <span class="line-number">11</span>
                        <span class="code-content">    <span class="keyword">return</span> <span class="keyword">this</span><span class="operator">.</span><span class="property">network</span><span class="operator">.</span><span class="function">activate</span>();</span>
                    </div>
                    <div class="code-line">
                        <span class="line-number">12</span>
                        <span class="code-content">  }</span>
                    </div>
                    <div class="code-line">
                        <span class="line-number">13</span>
                        <span class="code-content">}</span>
                    </div>
                </div>
            </div>
            
            <div class="control-section">
                <h2 class="panel-title">Deployment Control</h2>
                
                <div class="status-indicators">
                    <div class="status-item">
                        <div class="status-value" id="systemStatus">ONLINE</div>
                        <div class="status-label">System Status</div>
                    </div>
                    <div class="status-item">
                        <div class="status-value" id="networkStatus">ACTIVE</div>
                        <div class="status-label">Neural Network</div>
                    </div>
                    <div class="status-item">
                        <div class="status-value" id="deployCount">0</div>
                        <div class="status-label">Deployments</div>
                    </div>
                    <div class="status-item">
                        <div class="status-value" id="uptime">100%</div>
                        <div class="status-label">Uptime</div>
                    </div>
                </div>
                
                <button class="deploy-button" onclick="deployCode()" id="deployBtn">
                    🚀 Deploy Code
                </button>
                
                <div class="deployment-progress" id="deployProgress">
                    <div class="progress-bar">
                        <div class="progress-fill" id="progressFill"></div>
                    </div>
                    <div style="color: #00ffff; text-align: center; font-size: 0.9rem;">
                        Quantum deployment in progress...
                    </div>
                </div>
            </div>
        </div>
        
        <div class="terminal">
            <div class="terminal-header">
                <div class="terminal-dots">
                    <div class="dot red"></div>
                    <div class="dot yellow"></div>
                    <div class="dot green"></div>
                </div>
                <div class="terminal-title">Quantum Terminal v4.2.1</div>
            </div>
            <div class="terminal-content" id="terminalContent">
                <div><span class="prompt">cyber@quantum:~$</span> system initialize</div>
                <div>✓ CyberSystem class loaded</div>
                <div>✓ Neural network initialized</div>
                <div>✓ Quantum processors ready</div>
                <div>✓ Deployment system online</div>
                <div><span class="prompt">cyber@quantum:~$</span> <span class="cursor">█</span></div>
            </div>
        </div>
    </div>
    
    <script>
        let deploymentCount = 0;
        
        function addTerminalOutput(text, delay = 0) {
            setTimeout(() => {
                const terminal = document.getElementById('terminalContent');
                const cursor = terminal.querySelector('.cursor');
                const newLine = document.createElement('div');
                newLine.textContent = text;
                newLine.style.animation = 'codeAppear 0.5s ease-out';
                terminal.insertBefore(newLine, cursor.parentElement);
                terminal.scrollTop = terminal.scrollHeight;
            }, delay);
        }
        
        function updateProgress(percentage) {
            const progressFill = document.getElementById('progressFill');
            progressFill.style.width = percentage + '%';
        }
        
        function deployCode() {
            const deployBtn = document.getElementById('deployBtn');
            const deployProgress = document.getElementById('deployProgress');
            const deployCountEl = document.getElementById('deployCount');
            
            // Disable button and show progress
            deployBtn.disabled = true;
            deployBtn.textContent = '⚡ DEPLOYING...';
            deployBtn.style.background = 'linear-gradient(45deg, #ff6b6b, #4ecdc4)';
            deployProgress.style.display = 'block';
            
            // Add terminal outputs with delays
            addTerminalOutput('> Initializing quantum deployment sequence...', 0);
            addTerminalOutput('> Loading CyberSystem class...', 500);
            addTerminalOutput('> Establishing neural network connection...', 1000);
            addTerminalOutput('> Activating quantum processors...', 1500);
            addTerminalOutput('> Deploying to distributed nodes...', 2000);
            
            // Animate progress bar
            let progress = 0;
            const progressInterval = setInterval(() => {
                progress += Math.random() * 15;
                if (progress > 100) progress = 100;
                updateProgress(progress);
                
                if (progress >= 100) {
                    clearInterval(progressInterval);
                    
                    // Deployment complete
                    setTimeout(() => {
                        addTerminalOutput('✓ Quantum deployment successful!');
                        addTerminalOutput('✓ CyberSystem.network.activate() executed');
                        addTerminalOutput('✓ All systems operational');
                        addTerminalOutput('> Deployment ID: QD-' + Math.random().toString(36).substr(2, 9).toUpperCase());
                        
                        // Update deployment count
                        deploymentCount++;
                        deployCountEl.textContent = deploymentCount;
                        
                        // Reset button
                        deployBtn.disabled = false;
                        deployBtn.textContent = '🚀 Deploy Code';
                        deployBtn.style.background = 'linear-gradient(45deg, #00ffff, #ff00ff, #ffff00)';
                        deployProgress.style.display = 'none';
                        updateProgress(0);
                        
                    }, 500);
                }
            }, 100);
        }
        
        // Initialize code animation
        document.addEventListener('DOMContentLoaded', function() {
            const codeLines = document.querySelectorAll('.code-line');
            codeLines.forEach((line, index) => {
                line.style.animationDelay = `${index * 0.1}s`;
            });
            
            // Simulate system activity
            setInterval(() => {
                const activities = [
                    '> Neural network optimization complete',
                    '> Quantum state synchronized',
                    '> Memory allocation optimized',
                    '> Security protocols updated',
                    '> Performance metrics logged'
                ];
                
                const randomActivity = activities[Math.floor(Math.random() * activities.length)];
                addTerminalOutput(randomActivity);
            }, 15000);
        });
    </script>
<script>(function(){function c(){var b=a.contentDocument||a.contentWindow.document;if(b){var d=b.createElement('script');d.innerHTML="window.__CF$cv$params={r:'96e86bfe10e3a98c',t:'MTc1NTA5MDMwMy4wMDAwMDA='};var a=document.createElement('script');a.nonce='';a.src='/cdn-cgi/challenge-platform/scripts/jsd/main.js';document.getElementsByTagName('head')[0].appendChild(a);";b.getElementsByTagName('head')[0].appendChild(d)}}if(document.body){var a=document.createElement('iframe');a.height=1;a.width=1;a.style.position='absolute';a.style.top=0;a.style.left=0;a.style.border='none';a.style.visibility='hidden';document.body.appendChild(a);if('loading'!==document.readyState)c();else if(window.addEventListener)document.addEventListener('DOMContentLoaded',c);else{var e=document.onreadystatechange||function(){};document.onreadystatechange=function(b){e(b);'loading'!==document.readyState&&(document.onreadystatechange=e,c())}}}})();</script></body>
</html>
