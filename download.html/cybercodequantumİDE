<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>NeuroCode Quantum IDE - Advanced Neural Analytics</title>
    <style>
        @import url('https://fonts.googleapis.com/css2?family=Orbitron:wght@300;400;700;900&family=Fira+Code:wght@300;400;500;600;700&family=Rajdhani:wght@300;400;500;600;700&display=swap');
        
        :root {
            --neon-blue: #00d4ff;
            --electric-pink: #ff0080;
            --cyber-green: #39ff14;
            --quantum-purple: #8a2be2;
            --solar-orange: #ff4500;
            --neural-cyan: #00ffff;
            --void-black: #0a0a0a;
            --panel-glass: rgba(0, 0, 0, 0.85);
            --glow-effect: 0 0 30px;
        }
        
        * {
            margin: 0;
            padding: 0;
            box-sizing: border-box;
        }
        
        body {
            font-family: 'Fira Code', monospace;
            background: 
                radial-gradient(ellipse at 20% 20%, rgba(0, 212, 255, 0.2) 0%, transparent 50%),
                radial-gradient(ellipse at 80% 20%, rgba(255, 0, 128, 0.2) 0%, transparent 50%),
                radial-gradient(ellipse at 20% 80%, rgba(57, 255, 20, 0.15) 0%, transparent 50%),
                radial-gradient(ellipse at 80% 80%, rgba(138, 43, 226, 0.15) 0%, transparent 50%),
                radial-gradient(ellipse at 50% 50%, rgba(255, 68, 0, 0.1) 0%, transparent 60%),
                linear-gradient(135deg, #000000 0%, #0a0a2a 20%, #2a0a2a 40%, #0a2a2a 60%, #2a2a0a 80%, #000000 100%);
            color: var(--neon-blue);
            min-height: 100vh;
            overflow-x: hidden;
            position: relative;
        }
        
        /* Enhanced Animated Grid Background */
        body::before {
            content: '';
            position: fixed;
            top: 0;
            left: 0;
            width: 100%;
            height: 100%;
            background-image: 
                linear-gradient(rgba(0, 212, 255, 0.15) 1px, transparent 1px),
                linear-gradient(90deg, rgba(0, 212, 255, 0.15) 1px, transparent 1px),
                linear-gradient(45deg, rgba(255, 0, 128, 0.08) 1px, transparent 1px),
                linear-gradient(135deg, rgba(57, 255, 20, 0.06) 1px, transparent 1px);
            background-size: 60px 60px, 60px 60px, 40px 40px, 40px 40px;
            pointer-events: none;
            z-index: -2;
            animation: gridFlow 20s linear infinite;
        }
        
        @keyframes gridFlow {
            0% { transform: translate(0, 0); opacity: 0.4; }
            25% { transform: translate(30px, 30px); opacity: 0.7; }
            50% { transform: translate(0, 60px); opacity: 0.5; }
            75% { transform: translate(-30px, 90px); opacity: 0.8; }
            100% { transform: translate(0, 120px); opacity: 0.4; }
        }
        
        /* Advanced Neural Particles */
        .neural-particle {
            position: fixed;
            width: 8px;
            height: 8px;
            background: var(--neon-blue);
            border-radius: 50%;
            pointer-events: none;
            z-index: 1;
            animation: neuralDrift 20s linear infinite;
            box-shadow: 
                var(--glow-effect) currentColor,
                0 0 60px rgba(0, 212, 255, 0.3);
        }
        
        @keyframes neuralDrift {
            0% { 
                transform: translateY(100vh) translateX(0) scale(0) rotate(0deg);
                opacity: 0;
            }
            5% {
                opacity: 1;
                transform: scale(1) rotate(45deg);
            }
            25% {
                transform: translateY(75vh) translateX(150px) scale(1.5) rotate(180deg);
            }
            50% {
                transform: translateY(50vh) translateX(-100px) scale(1.2) rotate(270deg);
            }
            75% {
                transform: translateY(25vh) translateX(200px) scale(1.8) rotate(360deg);
            }
            95% {
                opacity: 1;
                transform: translateY(5vh) translateX(-50px) scale(0.8) rotate(450deg);
            }
            100% { 
                transform: translateY(-100px) translateX(300px) scale(0) rotate(540deg);
                opacity: 0;
            }
        }
        
        /* Floating Code Fragments */
        .code-fragment {
            position: fixed;
            pointer-events: none;
            z-index: 2;
            font-family: 'Fira Code', monospace;
            font-size: 14px;
            color: var(--cyber-green);
            text-shadow: var(--glow-effect) currentColor;
            animation: codeFloat 25s linear infinite;
            opacity: 0.7;
        }
        
        @keyframes codeFloat {
            0% { 
                transform: translateY(100vh) translateX(0) rotate(0deg) scale(0);
                opacity: 0;
            }
            10% {
                opacity: 0.7;
                transform: scale(1) rotate(30deg);
            }
            30% {
                transform: translateY(70vh) translateX(200px) rotate(120deg) scale(1.3);
            }
            50% {
                transform: translateY(50vh) translateX(-150px) rotate(240deg) scale(0.9);
            }
            70% {
                transform: translateY(30vh) translateX(250px) rotate(360deg) scale(1.1);
            }
            90% {
                opacity: 0.7;
                transform: translateY(10vh) translateX(-100px) rotate(480deg) scale(0.8);
            }
            100% { 
                transform: translateY(-150px) translateX(400px) rotate(600deg) scale(0);
                opacity: 0;
            }
        }
        
        .container {
            max-width: 2000px;
            margin: 0 auto;
            padding: 40px;
            position: relative;
        }
        
        /* Enhanced Holographic Header */
        .quantum-header {
            display: flex;
            justify-content: space-between;
            align-items: center;
            margin-bottom: 50px;
            padding: 40px 50px;
            background: 
                linear-gradient(135deg, var(--panel-glass) 0%, rgba(0, 60, 120, 0.9) 100%),
                radial-gradient(circle at 30% 30%, rgba(0, 212, 255, 0.2) 0%, transparent 70%),
                radial-gradient(circle at 70% 70%, rgba(255, 0, 128, 0.15) 0%, transparent 70%);
            border: 3px solid transparent;
            border-radius: 25px;
            backdrop-filter: blur(20px);
            position: relative;
            overflow: hidden;
        }
        
        .quantum-header::before {
            content: '';
            position: absolute;
            top: 0;
            left: 0;
            right: 0;
            bottom: 0;
            border-radius: 25px;
            padding: 3px;
            background: linear-gradient(45deg, var(--neon-blue), var(--electric-pink), var(--cyber-green), var(--quantum-purple), var(--solar-orange), var(--neural-cyan));
            background-size: 600% 600%;
            mask: linear-gradient(#fff 0 0) content-box, linear-gradient(#fff 0 0);
            mask-composite: exclude;
            animation: holoBorder 12s ease-in-out infinite;
        }
        
        @keyframes holoBorder {
            0%, 100% { background-position: 0% 50%; }
            16% { background-position: 100% 50%; }
            33% { background-position: 50% 100%; }
            50% { background-position: 0% 0%; }
            66% { background-position: 100% 100%; }
            83% { background-position: 25% 75%; }
        }
        
        .quantum-title {
            font-family: 'Orbitron', monospace;
            font-size: 3.5rem;
            font-weight: 900;
            background: linear-gradient(45deg, var(--neon-blue), var(--electric-pink), var(--cyber-green), var(--quantum-purple), var(--solar-orange), var(--neural-cyan));
            background-size: 600% 600%;
            -webkit-background-clip: text;
            -webkit-text-fill-color: transparent;
            background-clip: text;
            animation: titleShift 8s ease-in-out infinite, titleGlitch 6s ease-in-out infinite alternate;
            text-transform: uppercase;
            letter-spacing: 6px;
            position: relative;
            z-index: 1;
        }
        
        @keyframes titleShift {
            0%, 100% { background-position: 0% 50%; }
            16% { background-position: 100% 50%; }
            33% { background-position: 50% 100%; }
            50% { background-position: 0% 0%; }
            66% { background-position: 100% 100%; }
            83% { background-position: 25% 75%; }
        }
        
        @keyframes titleGlitch {
            0%, 94%, 100% { 
                text-shadow: 
                    0 0 20px rgba(0, 212, 255, 0.8),
                    0 0 40px rgba(255, 0, 128, 0.6),
                    0 0 60px rgba(57, 255, 20, 0.4);
                transform: scale(1);
            }
            1% { 
                text-shadow: 
                    4px 0 0 rgba(255, 0, 128, 1),
                    -4px 0 0 rgba(0, 212, 255, 1);
                transform: scale(1.02);
            }
            2% { 
                text-shadow: 
                    -3px 0 0 rgba(57, 255, 20, 1),
                    3px 0 0 rgba(138, 43, 226, 1);
                transform: scale(0.98);
            }
            3% { 
                text-shadow: 
                    2px 0 0 rgba(255, 68, 0, 1),
                    -2px 0 0 rgba(0, 212, 255, 1);
                transform: scale(1.01);
            }
        }
        
        .neural-status-panel {
            display: flex;
            align-items: center;
            gap: 20px;
            background: rgba(0, 255, 65, 0.15);
            padding: 20px 30px;
            border-radius: 20px;
            border: 3px solid var(--cyber-green);
            font-size: 1.1rem;
            color: var(--cyber-green);
            animation: statusPulse 4s ease-in-out infinite;
            backdrop-filter: blur(15px);
            position: relative;
            z-index: 1;
        }
        
        @keyframes statusPulse {
            0%, 100% { 
                box-shadow: var(--glow-effect) var(--cyber-green);
                transform: scale(1);
            }
            50% { 
                box-shadow: 0 0 50px var(--cyber-green);
                transform: scale(1.05);
            }
        }
        
        .status-indicator {
            width: 12px;
            height: 12px;
            background: var(--cyber-green);
            border-radius: 50%;
            animation: indicatorPulse 2s infinite;
        }
        
        @keyframes indicatorPulse {
            0%, 100% { 
                opacity: 1; 
                transform: scale(1);
                box-shadow: 0 0 15px var(--cyber-green);
            }
            50% { 
                opacity: 0.3; 
                transform: scale(1.5);
                box-shadow: 0 0 25px var(--cyber-green);
            }
        }
        
        /* Enhanced Interface Layout */
        .quantum-interface {
            display: grid;
            grid-template-columns: 1fr 2fr 1fr;
            gap: 40px;
            margin-bottom: 40px;
        }
        
        /* Advanced Holographic Panels */
        .holo-panel {
            background: 
                linear-gradient(135deg, var(--panel-glass) 0%, rgba(0, 60, 120, 0.9) 100%),
                radial-gradient(circle at 50% 50%, rgba(0, 212, 255, 0.1) 0%, transparent 70%),
                radial-gradient(circle at 25% 75%, rgba(255, 0, 128, 0.08) 0%, transparent 60%),
                radial-gradient(circle at 75% 25%, rgba(57, 255, 20, 0.06) 0%, transparent 65%);
            border: 3px solid transparent;
            border-radius: 25px;
            padding: 40px;
            backdrop-filter: blur(20px);
            position: relative;
            overflow: hidden;
        }
        
        .holo-panel::before {
            content: '';
            position: absolute;
            top: 0;
            left: 0;
            right: 0;
            bottom: 0;
            border-radius: 25px;
            padding: 3px;
            background: linear-gradient(135deg, var(--neon-blue), transparent, var(--electric-pink), transparent, var(--cyber-green), transparent, var(--quantum-purple));
            background-size: 600% 600%;
            mask: linear-gradient(#fff 0 0) content-box, linear-gradient(#fff 0 0);
            mask-composite: exclude;
            animation: panelGlow 15s ease-in-out infinite;
        }
        
        @keyframes panelGlow {
            0%, 100% { background-position: 0% 50%; opacity: 0.7; }
            25% { background-position: 100% 25%; opacity: 1; }
            50% { background-position: 50% 100%; opacity: 0.8; }
            75% { background-position: 25% 0%; opacity: 0.9; }
        }
        
        .panel-header {
            display: flex;
            justify-content: space-between;
            align-items: center;
            margin-bottom: 30px;
            padding-bottom: 20px;
            border-bottom: 3px solid rgba(0, 212, 255, 0.5);
            position: relative;
            z-index: 1;
        }
        
        .panel-title {
            font-family: 'Orbitron', monospace;
            font-size: 1.6rem;
            color: var(--neon-blue);
            text-transform: uppercase;
            letter-spacing: 3px;
            font-weight: 800;
            text-shadow: var(--glow-effect) currentColor;
            animation: titleFlicker 7s ease-in-out infinite;
        }
        
        @keyframes titleFlicker {
            0%, 100% { opacity: 1; }
            1% { opacity: 0.8; }
            2% { opacity: 1; }
            3% { opacity: 0.9; }
            4% { opacity: 1; }
        }
        
        /* Enhanced Code Editor */
        .quantum-code-editor {
            background: 
                linear-gradient(135deg, rgba(0, 0, 0, 0.98) 0%, rgba(0, 40, 20, 0.95) 100%),
                radial-gradient(circle at 80% 80%, rgba(0, 255, 65, 0.08) 0%, transparent 70%),
                radial-gradient(circle at 20% 20%, rgba(0, 212, 255, 0.06) 0%, transparent 60%);
            border: 3px solid var(--cyber-green);
            border-radius: 20px;
            padding: 30px;
            font-family: 'Fira Code', monospace;
            font-size: 15px;
            color: var(--cyber-green);
            min-height: 650px;
            position: relative;
            overflow: hidden;
            box-shadow: 
                inset 0 0 50px rgba(0, 255, 65, 0.2),
                var(--glow-effect) var(--cyber-green);
        }
        
        .quantum-code-editor::before {
            content: '';
            position: absolute;
            top: 0;
            left: -100%;
            width: 100%;
            height: 3px;
            background: linear-gradient(90deg, transparent, var(--cyber-green), var(--neon-blue), var(--electric-pink), transparent);
            animation: codeScanLine 6s linear infinite;
        }
        
        @keyframes codeScanLine {
            0% { left: -100%; }
            100% { left: 100%; }
        }
        
        .code-line {
            display: flex;
            margin-bottom: 14px;
            padding: 10px 0;
            border-radius: 10px;
            transition: all 0.4s ease;
            animation: codeLineAppear 1.2s ease-out;
        }
        
        .code-line:hover {
            background: rgba(0, 255, 65, 0.2);
            transform: translateX(15px) scale(1.02);
            box-shadow: 0 8px 25px rgba(0, 255, 65, 0.4), inset 0 0 15px rgba(0, 212, 255, 0.2);
        }
        
        @keyframes codeLineAppear {
            from { 
                opacity: 0; 
                transform: translateX(-60px) scale(0.9);
                filter: blur(3px);
            }
            to { 
                opacity: 1; 
                transform: translateX(0) scale(1);
                filter: blur(0);
            }
        }
        
        .line-number {
            color: rgba(255, 255, 255, 0.6);
            margin-right: 25px;
            width: 50px;
            text-align: right;
            font-weight: 700;
            user-select: none;
        }
        
        .code-content {
            flex: 1;
            font-weight: 600;
        }
        
        /* Enhanced Syntax Highlighting */
        .keyword { 
            color: #ff3366; 
            font-weight: 800;
            text-shadow: 0 0 15px rgba(255, 51, 102, 0.9);
            animation: keywordPulse 5s ease-in-out infinite;
        }
        
        @keyframes keywordPulse {
            0%, 100% { 
                text-shadow: 0 0 15px rgba(255, 51, 102, 0.9);
                transform: scale(1);
            }
            50% { 
                text-shadow: 0 0 25px rgba(255, 51, 102, 1), 0 0 35px rgba(255, 0, 128, 0.6);
                transform: scale(1.02);
            }
        }
        
        .string { 
            color: #00ffcc; 
            font-weight: 700;
            text-shadow: 0 0 12px rgba(0, 255, 204, 0.8);
            animation: stringShimmer 6s ease-in-out infinite;
        }
        
        @keyframes stringShimmer {
            0%, 100% { 
                text-shadow: 0 0 12px rgba(0, 255, 204, 0.8);
                color: #00ffcc;
            }
            33% { 
                text-shadow: 0 0 20px rgba(0, 255, 204, 1), 0 0 30px rgba(0, 212, 255, 0.6);
                color: #00d4ff;
            }
            66% { 
                text-shadow: 0 0 18px rgba(0, 212, 255, 1), 0 0 28px rgba(57, 255, 20, 0.5);
                color: #39ff14;
            }
        }
        
        .comment { 
            color: #888888; 
            font-style: italic;
            opacity: 0.8;
        }
        
        .function { 
            color: #ffaa00; 
            font-weight: 800;
            text-shadow: 0 0 15px rgba(255, 170, 0, 0.9);
            animation: functionGlow 7s ease-in-out infinite;
        }
        
        @keyframes functionGlow {
            0%, 100% { 
                text-shadow: 0 0 15px rgba(255, 170, 0, 0.9);
                color: #ffaa00;
            }
            25% { 
                text-shadow: 0 0 20px rgba(255, 170, 0, 1), 0 0 30px rgba(255, 68, 0, 0.6);
                color: #ff4500;
            }
            50% { 
                text-shadow: 0 0 18px rgba(255, 68, 0, 1), 0 0 28px rgba(255, 0, 128, 0.5);
                color: #ff0080;
            }
            75% { 
                text-shadow: 0 0 22px rgba(255, 0, 128, 0.9), 0 0 32px rgba(138, 43, 226, 0.6);
                color: #8a2be2;
            }
        }
        
        .property {
            color: #ff4444;
            font-weight: 700;
            text-shadow: 0 0 10px rgba(255, 68, 68, 0.7);
        }
        
        .operator {
            color: #cc66ff;
            font-weight: 800;
            text-shadow: 0 0 8px currentColor;
        }
        
        /* Advanced Neural Analytics */
        .analytics-grid {
            display: grid;
            grid-template-columns: 1fr 1fr;
            gap: 25px;
            margin-bottom: 30px;
        }
        
        .metric-card {
            background: rgba(0, 0, 0, 0.85);
            padding: 25px;
            border-radius: 15px;
            border: 3px solid rgba(0, 212, 255, 0.4);
            transition: all 0.4s ease;
            position: relative;
            overflow: hidden;
        }
        
        .metric-card::before {
            content: '';
            position: absolute;
            top: 0;
            left: -100%;
            width: 100%;
            height: 2px;
            background: linear-gradient(90deg, transparent, var(--neon-blue), transparent);
            animation: metricScan 8s linear infinite;
        }
        
        @keyframes metricScan {
            0% { left: -100%; }
            100% { left: 100%; }
        }
        
        .metric-card:hover {
            border-color: var(--neon-blue);
            box-shadow: var(--glow-effect) var(--neon-blue);
            transform: translateY(-8px) scale(1.05);
        }
        
        .metric-label {
            color: var(--neon-blue);
            font-size: 1rem;
            margin-bottom: 10px;
            text-transform: uppercase;
            letter-spacing: 2px;
            font-weight: 600;
        }
        
        .metric-value {
            font-size: 2rem;
            font-weight: 900;
            color: #fff;
            margin-bottom: 15px;
            text-shadow: 0 0 10px rgba(255, 255, 255, 0.5);
        }
        
        .metric-bar {
            width: 100%;
            height: 8px;
            background: rgba(0, 212, 255, 0.2);
            border-radius: 4px;
            overflow: hidden;
            position: relative;
        }
        
        .metric-fill {
            height: 100%;
            border-radius: 4px;
            transition: width 2s ease;
            position: relative;
        }
        
        .neural-fill {
            background: linear-gradient(90deg, var(--neon-blue), var(--cyber-green), var(--neural-cyan));
            width: 89%;
            animation: neuralMetricPulse 4s ease-in-out infinite;
        }
        
        .quantum-fill {
            background: linear-gradient(90deg, var(--electric-pink), var(--quantum-purple), var(--solar-orange));
            width: 96%;
            animation: quantumMetricPulse 3s ease-in-out infinite;
        }
        
        .data-fill {
            background: linear-gradient(90deg, var(--cyber-green), var(--neural-cyan), var(--neon-blue));
            width: 78%;
            animation: dataMetricPulse 3.5s ease-in-out infinite;
        }
        
        .system-fill {
            background: linear-gradient(90deg, var(--solar-orange), var(--electric-pink), var(--quantum-purple));
            width: 93%;
            animation: systemMetricPulse 4.5s ease-in-out infinite;
        }
        
        @keyframes neuralMetricPulse {
            0%, 100% { 
                width: 89%; 
                box-shadow: 0 0 15px rgba(0, 212, 255, 0.6);
            }
            50% { 
                width: 94%; 
                box-shadow: 0 0 25px rgba(0, 212, 255, 1);
            }
        }
        
        @keyframes quantumMetricPulse {
            0%, 100% { 
                width: 96%; 
                box-shadow: 0 0 15px rgba(255, 0, 128, 0.6);
            }
            50% { 
                width: 99%; 
                box-shadow: 0 0 25px rgba(255, 0, 128, 1);
            }
        }
        
        @keyframes dataMetricPulse {
            0%, 100% { 
                width: 78%; 
                box-shadow: 0 0 15px rgba(57, 255, 20, 0.6);
            }
            50% { 
                width: 85%; 
                box-shadow: 0 0 25px rgba(57, 255, 20, 1);
            }
        }
        
        @keyframes systemMetricPulse {
            0%, 100% { 
                width: 93%; 
                box-shadow: 0 0 15px rgba(255, 68, 0, 0.6);
            }
            50% { 
                width: 97%; 
                box-shadow: 0 0 25px rgba(255, 68, 0, 1);
            }
        }
        
        /* Quantum Status Panel */
        .quantum-status-panel {
            background: rgba(0, 0, 0, 0.9);
            padding: 25px;
            border-radius: 20px;
            border: 3px solid var(--quantum-purple);
            margin-bottom: 30px;
            position: relative;
            overflow: hidden;
        }
        
        .quantum-status-panel::before {
            content: '';
            position: absolute;
            top: 0;
            left: 0;
            right: 0;
            bottom: 0;
            background: linear-gradient(45deg, transparent 30%, rgba(138, 43, 226, 0.1) 50%, transparent 70%);
            animation: quantumWave 10s ease-in-out infinite;
        }
        
        @keyframes quantumWave {
            0%, 100% { transform: translateX(-100%); }
            50% { transform: translateX(100%); }
        }
        
        .status-item {
            display: flex;
            justify-content: space-between;
            align-items: center;
            margin-bottom: 15px;
            padding: 10px 0;
            position: relative;
            z-index: 1;
        }
        
        .status-label {
            color: #ddd;
            font-size: 1rem;
            font-weight: 500;
        }
        
        .status-value {
            font-weight: 800;
            font-size: 1.1rem;
        }
        
        .status-active {
            color: var(--cyber-green);
            animation: statusActiveGlow 3s ease-in-out infinite;
        }
        
        .status-optimal {
            color: var(--neon-blue);
            animation: statusOptimalGlow 2.5s ease-in-out infinite;
        }
        
        .status-transcendent {
            color: var(--electric-pink);
            animation: statusTranscendentGlow 4s ease-in-out infinite;
        }
        
        @keyframes statusActiveGlow {
            0%, 100% { 
                text-shadow: 0 0 10px currentColor;
                transform: scale(1);
            }
            50% { 
                text-shadow: 0 0 20px currentColor, 0 0 30px currentColor;
                transform: scale(1.05);
            }
        }
        
        @keyframes statusOptimalGlow {
            0%, 100% { 
                text-shadow: 0 0 12px currentColor;
                transform: scale(1);
            }
            50% { 
                text-shadow: 0 0 22px currentColor, 0 0 32px currentColor;
                transform: scale(1.03);
            }
        }
        
        @keyframes statusTranscendentGlow {
            0%, 100% { 
                text-shadow: 0 0 15px currentColor;
                transform: scale(1);
            }
            50% { 
                text-shadow: 0 0 25px currentColor, 0 0 35px currentColor;
                transform: scale(1.04);
            }
        }
        
        /* Neural Feed */
        .neural-feed {
            max-height: 400px;
            overflow-y: auto;
            padding-right: 15px;
        }
        
        .feed-item {
            background: rgba(0, 212, 255, 0.12);
            padding: 20px;
            border-radius: 12px;
            margin-bottom: 15px;
            border-left: 5px solid var(--neon-blue);
            animation: feedItemAppear 1.5s ease-out;
            transition: all 0.3s ease;
            position: relative;
            overflow: hidden;
        }
        
        .feed-item::before {
            content: '';
            position: absolute;
            top: 0;
            left: -100%;
            width: 100%;
            height: 100%;
            background: linear-gradient(90deg, transparent, rgba(0, 212, 255, 0.2), transparent);
            animation: feedGlow 8s linear infinite;
        }
        
        @keyframes feedGlow {
            0% { left: -100%; }
            100% { left: 100%; }
        }
        
        .feed-item:hover {
            background: rgba(0, 212, 255, 0.25);
            transform: translateX(15px) scale(1.02);
            box-shadow: 0 5px 20px rgba(0, 212, 255, 0.3);
        }
        
        @keyframes feedItemAppear {
            from { 
                opacity: 0; 
                transform: translateX(-40px) scale(0.9);
                filter: blur(2px);
            }
            to { 
                opacity: 1; 
                transform: translateX(0) scale(1);
                filter: blur(0);
            }
        }
        
        .feed-time {
            color: var(--neon-blue);
            font-size: 0.9rem;
            font-weight: 700;
            position: relative;
            z-index: 1;
        }
        
        .feed-message {
            color: #eee;
            margin-top: 8px;
            line-height: 1.5;
            font-weight: 500;
            position: relative;
            z-index: 1;
        }
        
        /* Deploy Section */
        .deploy-section {
            background: rgba(255, 0, 128, 0.12);
            padding: 30px;
            border-radius: 20px;
            border: 3px solid var(--electric-pink);
            margin-bottom: 30px;
            text-align: center;
            position: relative;
            overflow: hidden;
        }
        
        .deploy-section::before {
            content: '';
            position: absolute;
            top: 0;
            left: 0;
            right: 0;
            bottom: 0;
            background: linear-gradient(45deg, transparent 30%, rgba(255, 0, 128, 0.1) 50%, transparent 70%);
            animation: deployWave 12s ease-in-out infinite;
        }
        
        @keyframes deployWave {
            0%, 100% { transform: translateX(-100%) rotate(0deg); }
            50% { transform: translateX(100%) rotate(180deg); }
        }
        
        .deploy-btn {
            width: 100%;
            background: linear-gradient(45deg, var(--electric-pink), var(--neon-blue), var(--cyber-green), var(--quantum-purple), var(--solar-orange), var(--neural-cyan));
            background-size: 600% 600%;
            border: none;
            padding: 25px 50px;
            border-radius: 20px;
            color: #000;
            font-family: 'Orbitron', monospace;
            font-weight: 900;
            font-size: 1.2rem;
            cursor: pointer;
            text-transform: uppercase;
            letter-spacing: 3px;
            transition: all 0.4s ease;
            animation: deployBtnGlow 6s ease-in-out infinite;
            position: relative;
            z-index: 1;
        }
        
        .deploy-btn:hover {
            transform: scale(1.08);
            box-shadow: 0 15px 40px rgba(255, 0, 128, 0.6);
        }
        
        @keyframes deployBtnGlow {
            0%, 100% { background-position: 0% 50%; }
            16% { background-position: 100% 50%; }
            33% { background-position: 50% 100%; }
            50% { background-position: 0% 0%; }
            66% { background-position: 100% 100%; }
            83% { background-position: 25% 75%; }
        }
        
        /* Responsive Design */
        @media (max-width: 1400px) {
            .quantum-interface {
                grid-template-columns: 1fr 2fr 1fr;
            }
        }
        
        @media (max-width: 1000px) {
            .quantum-interface {
                grid-template-columns: 1fr 1fr;
            }
        }
        
        @media (max-width: 700px) {
            .quantum-interface {
                grid-template-columns: 1fr;
            }
            
            .quantum-header {
                flex-direction: column;
                gap: 25px;
            }
            
            .quantum-title {
                font-size: 2.5rem;
            }
            
            .analytics-grid {
                grid-template-columns: 1fr;
            }
        }
        
        /* Enhanced Scrollbar */
        ::-webkit-scrollbar {
            width: 10px;
        }
        
        ::-webkit-scrollbar-track {
            background: rgba(0, 0, 0, 0.6);
            border-radius: 5px;
        }
        
        ::-webkit-scrollbar-thumb {
            background: linear-gradient(45deg, var(--neon-blue), var(--electric-pink));
            border-radius: 5px;
            box-shadow: var(--glow-effect) var(--neon-blue);
        }
        
        ::-webkit-scrollbar-thumb:hover {
            background: linear-gradient(45deg, var(--electric-pink), var(--cyber-green));
            box-shadow: var(--glow-effect) var(--electric-pink);
        }
    </style>
</head>
<body>
    <div class="container">
        <!-- Enhanced Quantum Header -->
        <header class="quantum-header">
            <h1 class="quantum-title">NeuroCode Quantum IDE</h1>
            <div class="neural-status-panel">
                <div class="status-indicator"></div>
                <span>Neural Matrix Connected</span>
            </div>
        </header>
        
        <!-- Main Quantum Interface -->
        <div class="quantum-interface">
            <!-- Left Panel: Advanced Neural Analytics -->
            <div class="holo-panel">
                <div class="panel-header">
                    <h2 class="panel-title">Neural Analytics</h2>
                </div>
                
                <div class="analytics-grid">
                    <div class="metric-card">
                        <div class="metric-label">⚡ Neural Load</div>
                        <div class="metric-value" id="neuralLoad">89%</div>
                        <div class="metric-bar">
                            <div class="metric-fill neural-fill"></div>
                        </div>
                    </div>
                    
                    <div class="metric-card">
                        <div class="metric-label">🔮 Quantum State</div>
                        <div class="metric-value" id="quantumState">96%</div>
                        <div class="metric-bar">
                            <div class="metric-fill quantum-fill"></div>
                        </div>
                    </div>
                    
                    <div class="metric-card">
                        <div class="metric-label">📊 Data Flow</div>
                        <div class="metric-value" id="dataFlow">3.2 GB/s</div>
                        <div class="metric-bar">
                            <div class="metric-fill data-fill"></div>
                        </div>
                    </div>
                    
                    <div class="metric-card">
                        <div class="metric-label">🖥️ System Load</div>
                        <div class="metric-value" id="systemLoad">93%</div>
                        <div class="metric-bar">
                            <div class="metric-fill system-fill"></div>
                        </div>
                    </div>
                </div>
                
                <div class="quantum-status-panel">
                    <h3 style="color: var(--quantum-purple); margin-bottom: 20px; font-size: 1.2rem; text-shadow: var(--glow-effect) currentColor;">🔗 Quantum Status</h3>
                    <div class="status-item">
                        <span class="status-label">Matrix Link:</span>
                        <span class="status-value status-active" id="matrixLink">ACTIVE</span>
                    </div>
                    <div class="status-item">
                        <span class="status-label">Neural Sync:</span>
                        <span class="status-value status-optimal" id="neuralSync">OPTIMAL</span>
                    </div>
                    <div class="status-item">
                        <span class="status-label">Quantum Core:</span>
                        <span class="status-value status-transcendent" id="quantumCore">TRANSCENDENT</span>
                    </div>
                    <div class="status-item">
                        <span class="status-label">Data Integrity:</span>
                        <span class="status-value status-active" id="dataIntegrity">99.9%</span>
                    </div>
                </div>
                
                <div class="deploy-section">
                    <h3 style="color: var(--electric-pink); margin-bottom: 20px; font-size: 1.3rem; text-shadow: var(--glow-effect) currentColor; position: relative; z-index: 1;">🚀 Neural Deploy</h3>
                    <button class="deploy-btn" onclick="deployQuantumSystem()" id="deployBtn">
                        Deploy to Cyberspace
                    </button>
                </div>
            </div>
            
            <!-- Center Panel: Quantum Code Editor -->
            <div class="holo-panel">
                <div class="panel-header">
                    <h2 class="panel-title">Quantum Code Matrix</h2>
                    <div style="font-size: 1rem; color: #aaa;">neural_quantum_system.js</div>
                </div>
                
                <div class="quantum-code-editor" id="quantumCodeEditor">
                    <div class="code-line">
                        <span class="line-number">1</span>
                        <span class="code-content"><span class="keyword">import</span> { <span class="function">QuantumNeuralProcessor</span>, <span class="function">HolographicCore</span> } <span class="keyword">from</span> <span class="string">'@quantum/neural-core'</span>;</span>
                    </div>
                    <div class="code-line">
                        <span class="line-number">2</span>
                        <span class="code-content"><span class="keyword">import</span> { <span class="function">AdvancedAnalytics</span>, <span class="function">RealTimeMonitor</span> } <span class="keyword">from</span> <span class="string">'@neural/analytics'</span>;</span>
                    </div>
                    <div class="code-line">
                        <span class="line-number">3</span>
                        <span class="code-content"><span class="keyword">import</span> { <span class="function">CyberInterface</span>, <span class="function">DataStream</span> } <span class="keyword">from</span> <span class="string">'@holo/interface'</span>;</span>
                    </div>
                    <div class="code-line">
                        <span class="line-number">4</span>
                        <span class="code-content"></span>
                    </div>
                    <div class="code-line">
                        <span class="line-number">5</span>
                        <span class="code-content"><span class="comment">// Advanced Quantum Neural IDE with Holographic Analytics</span></span>
                    </div>
                    <div class="code-line">
                        <span class="line-number">6</span>
                        <span class="code-content"><span class="keyword">class</span> <span class="function">QuantumNeuralIDE</span> {</span>
                    </div>
                    <div class="code-line">
                        <span class="line-number">7</span>
                        <span class="code-content">  <span class="keyword">constructor</span>(<span class="property">quantumConfig</span>) {</span>
                    </div>
                    <div class="code-line">
                        <span class="line-number">8</span>
                        <span class="code-content">    <span class="keyword">this</span><span class="operator">.</span><span class="property">neuralProcessor</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="function">QuantumNeuralProcessor</span>(<span class="property">quantumConfig</span>);</span>
                    </div>
                    <div class="code-line">
                        <span class="line-number">9</span>
                        <span class="code-content">    <span class="keyword">this</span><span class="operator">.</span><span class="property">holoCore</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="function">HolographicCore</span>({ <span class="property">dimensions</span>: <span class="string">'infinite'</span> });</span>
                    </div>
                    <div class="code-line">
                        <span class="line-number">10</span>
                        <span class="code-content">    <span class="keyword">this</span><span class="operator">.</span><span class="property">analytics</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="function">AdvancedAnalytics</span>({ <span class="property">realTime</span>: <span class="string">true</span> });</span>
                    </div>
                    <div class="code-line">
                        <span class="line-number">11</span>
                        <span class="code-content">    <span class="keyword">this</span><span class="operator">.</span><span class="property">monitor</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="function">RealTimeMonitor</span>({ <span class="property">quantum</span>: <span class="string">true</span> });</span>
                    </div>
                    <div class="code-line">
                        <span class="line-number">12</span>
                        <span class="code-content">    <span class="keyword">this</span><span class="operator">.</span><span class="property">cyberInterface</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="function">CyberInterface</span>({ <span class="property">neonAccents</span>: <span class="string">true</span> });</span>
                    </div>
                    <div class="code-line">
                        <span class="line-number">13</span>
                        <span class="code-content">    <span class="keyword">this</span><span class="operator">.</span><span class="property">dataStream</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="function">DataStream</span>({ <span class="property">throughput</span>: <span class="string">'maximum'</span> });</span>
                    </div>
                    <div class="code-line">
                        <span class="line-number">14</span>
                        <span class="code-content">  }</span>
                    </div>
                    <div class="code-line">
                        <span class="line-number">15</span>
                        <span class="code-content"></span>
                    </div>
                    <div class="code-line">
                        <span class="line-number">16</span>
                        <span class="code-content">  <span class="keyword">async</span> <span class="function">initializeQuantumMatrix</span>() {</span>
                    </div>
                    <div class="code-line">
                        <span class="line-number">17</span>
                        <span class="code-content">    <span class="comment">// Initialize quantum neural network with holographic analytics</span></span>
                    </div>
                    <div class="code-line">
                        <span class="line-number">18</span>
                        <span class="code-content">    <span class="keyword">await</span> <span class="keyword">this</span><span class="operator">.</span><span class="property">neuralProcessor</span><span class="operator">.</span><span class="function">connect</span>();</span>
                    </div>
                    <div class="code-line">
                        <span class="line-number">19</span>
                        <span class="code-content">    <span class="keyword">await</span> <span class="keyword">this</span><span class="operator">.</span><span class="property">holoCore</span><span class="operator">.</span><span class="function">project</span>();</span>
                    </div>
                    <div class="code-line">
                        <span class="line-number">20</span>
                        <span class="code-content">    <span class="keyword">await</span> <span class="keyword">this</span><span class="operator">.</span><span class="property">analytics</span><span class="operator">.</span><span class="function">startMonitoring</span>();</span>
                    </div>
                    <div class="code-line">
                        <span class="line-number">21</span>
                        <span class="code-content">    <span class="keyword">await</span> <span class="keyword">this</span><span class="operator">.</span><span class="property">monitor</span><span class="operator">.</span><span class="function">enableRealTime</span>();</span>
                    </div>
                    <div class="code-line">
                        <span class="line-number">22</span>
                        <span class="code-content">    <span class="keyword">return</span> <span class="keyword">this</span><span class="operator">.</span><span class="property">dataStream</span><span class="operator">.</span><span class="function">activate</span>();</span>
                    </div>
                    <div class="code-line">
                        <span class="line-number">23</span>
                        <span class="code-content">  }</span>
                    </div>
                    <div class="code-line">
                        <span class="line-number">24</span>
                        <span class="code-content"></span>
                    </div>
                    <div class="code-line">
                        <span class="line-number">25</span>
                        <span class="code-content">  <span class="keyword">async</span> <span class="function">deployToCyberspace</span>() {</span>
                    </div>
                    <div class="code-line">
                        <span class="line-number">26</span>
                        <span class="code-content">    <span class="comment">// Deploy quantum neural system with advanced analytics</span></span>
                    </div>
                    <div class="code-line">
                        <span class="line-number">27</span>
                        <span class="code-content">    <span class="keyword">const</span> <span class="property">quantumMatrix</span> <span class="operator">=</span> <span class="keyword">await</span> <span class="keyword">this</span><span class="operator">.</span><span class="function">initializeQuantumMatrix</span>();</span>
                    </div>
                    <div class="code-line">
                        <span class="line-number">28</span>
                        <span class="code-content">    <span class="keyword">const</span> <span class="property">holoAnalytics</span> <span class="operator">=</span> <span class="keyword">await</span> <span class="keyword">this</span><span class="operator">.</span><span class="property">analytics</span><span class="operator">.</span><span class="function">createHolographicDashboard</span>();</span>
                    </div>
                    <div class="code-line">
                        <span class="line-number">29</span>
                        <span class="code-content">    <span class="keyword">const</span> <span class="property">neuralFlow</span> <span class="operator">=</span> <span class="keyword">await</span> <span class="keyword">this</span><span class="operator">.</span><span class="property">monitor</span><span class="operator">.</span><span class="function">startQuantumMonitoring</span>();</span>
                    </div>
                    <div class="code-line">
                        <span class="line-number">30</span>
                        <span class="code-content">    <span class="keyword">return</span> [<span class="property">quantumMatrix</span>, <span class="property">holoAnalytics</span>, <span class="property">neuralFlow</span>]<span class="operator">.</span><span class="function">transcend</span>();</span>
                    </div>
                    <div class="code-line">
                        <span class="line-number">31</span>
                        <span class="code-content">  }</span>
                    </div>
                    <div class="code-line">
                        <span class="line-number">32</span>
                        <span class="code-content">}</span>
                    </div>
                </div>
            </div>
            
            <!-- Right Panel: System Monitor -->
            <div class="holo-panel">
                <div class="panel-header">
                    <h2 class="panel-title">System Monitor</h2>
                </div>
                
                <div class="neural-feed">
                    <div class="feed-item">
                        <div class="feed-time">14:32:18</div>
                        <div class="feed-message">🧠 Quantum neural processor initialized with holographic core</div>
                    </div>
                    <div class="feed-item">
                        <div class="feed-time">14:32:21</div>
                        <div class="feed-message">🔮 Advanced analytics monitoring enabled with real-time data</div>
                    </div>
                    <div class="feed-item">
                        <div class="feed-time">14:32:24</div>
                        <div class="feed-message">📊 Neural load optimization active - 89% efficiency achieved</div>
                    </div>
                    <div class="feed-item">
                        <div class="feed-time">14:32:27</div>
                        <div class="feed-message">⚡ Data stream throughput enhanced to 3.2 GB/s sustained</div>
                    </div>
                    <div class="feed-item">
                        <div class="feed-time">14:32:30</div>
                        <div class="feed-message">🌐 Quantum matrix synchronization complete across dimensions</div>
                    </div>
                    <div class="feed-item">
                        <div class="feed-time">14:32:33</div>
                        <div class="feed-message">🔗 Neural link established with cyberspace infrastructure</div>
                    </div>
                    <div class="feed-item">
                        <div class="feed-time">14:32:36</div>
                        <div class="feed-message">✨ Holographic interface projection active with neon accents</div>
                    </div>
                    <div class="feed-item">
                        <div class="feed-time">14:32:39</div>
                        <div class="feed-message">🚀 System ready for quantum deployment to neural matrix</div>
                    </div>
                </div>
            </div>
        </div>
    </div>
    
    <script>
        let deploymentCount = 0;
        let particleCount = 0;
        
        // Create enhanced neural particles
        function createNeuralParticle() {
            const particle = document.createElement('div');
            particle.className = 'neural-particle';
            particle.style.left = Math.random() * 100 + 'vw';
            particle.style.animationDelay = Math.random() * 20 + 's';
            particle.style.animationDuration = (20 + Math.random() * 10) + 's';
            
            // Enhanced cyberpunk colors
            const neuralColors = [
                '#00d4ff', '#ff0080', '#39ff14', '#8a2be2', '#ff4500', 
                '#00ffff', '#ff3366', '#00ffcc', '#ffaa00', '#cc66ff'
            ];
            const color = neuralColors[Math.floor(Math.random() * neuralColors.length)];
            particle.style.background = color;
            particle.style.boxShadow = `0 0 30px ${color}, 0 0 60px rgba(${parseInt(color.slice(1, 3), 16)}, ${parseInt(color.slice(3, 5), 16)}, ${parseInt(color.slice(5, 7), 16)}, 0.3)`;
            
            document.body.appendChild(particle);
            
            // Remove particle after animation
            setTimeout(() => {
                if (particle.parentNode) {
                    particle.parentNode.removeChild(particle);
                }
            }, 30000);
        }
        
        // Create floating code fragments
        function createCodeFragment() {
            const codeSnippets = [
                'neural.connect()',
                'quantum.entangle()',
                'holo.project()',
                'matrix.sync()',
                'cyber.transcend()',
                'data.stream()',
                'analytics.monitor()',
                'void.traverse()',
                'reality.bend()',
                'consciousness.expand()'
            ];
            
            const fragment = document.createElement('div');
            fragment.className = 'code-fragment';
            fragment.textContent = codeSnippets[Math.floor(Math.random() * codeSnippets.length)];
            fragment.style.left = Math.random() * 100 + 'vw';
            fragment.style.animationDelay = Math.random() * 25 + 's';
            fragment.style.animationDuration = (25 + Math.random() * 15) + 's';
            
            // Random colors for code fragments
            const colors = ['#00d4ff', '#ff0080', '#39ff14', '#8a2be2', '#ff4500', '#00ffff'];
            const color = colors[Math.floor(Math.random() * colors.length)];
            fragment.style.color = color;
            fragment.style.textShadow = `0 0 30px ${color}`;
            
            document.body.appendChild(fragment);
            
            // Remove fragment after animation
            setTimeout(() => {
                if (fragment.parentNode) {
                    fragment.parentNode.removeChild(fragment);
                }
            }, 40000);
        }
        
        // Deploy quantum system
        function deployQuantumSystem() {
            const deployBtn = document.getElementById('deployBtn');
            
            deployBtn.disabled = true;
            deployBtn.textContent = 'Deploying Quantum System...';
            deployBtn.style.background = 'linear-gradient(45deg, #ff3366, #00ffcc, #ffaa00, #cc66ff)';
            
            const deploymentSteps = [
                '🔍 Initializing quantum neural matrix...',
                '🧠 Connecting to holographic neural processors...',
                '🔮 Activating advanced analytics monitoring...',
                '📊 Starting real-time data visualization...',
                '⚡ Optimizing neural load balancing...',
                '🌐 Synchronizing with quantum cyberspace...',
                '🌊 Enabling floating neural particle effects...',
                '✨ Activating holographic interface projection...',
                '🚀 Deploying to neural matrix...',
                '💫 Quantum deployment complete!'
            ];
            
            deploymentSteps.forEach((step, index) => {
                setTimeout(() => {
                    console.log(step);
                }, index * 1000);
            });
            
            setTimeout(() => {
                deploymentCount++;
                console.log('🌟 QUANTUM NEURAL SYSTEM DEPLOYED TO CYBERSPACE!');
                console.log(`🆔 Quantum ID: QNX-${Math.random().toString(36).substr(2, 16).toUpperCase()}`);
                console.log(`🌌 Neural dimensions: ${Math.floor(Math.random() * 500) + 200}`);
                console.log(`🔗 Quantum links: ${Math.floor(Math.random() * 5000) + 2000}`);
                console.log(`📊 Analytics nodes: ${Math.floor(Math.random() * 100) + 50}`);
                console.log(`⚡ Data throughput: ${(Math.random() * 5 + 2).toFixed(1)} GB/s`);
                console.log(`🧠 Neural efficiency: ${(Math.random() * 20 + 80).toFixed(1)}%`);
                console.log(`🔮 Total deployments: ${deploymentCount}`);
                console.log('🎯 Advanced holographic analytics active');
                
                deployBtn.disabled = false;
                deployBtn.textContent = 'Deploy to Cyberspace';
                deployBtn.style.background = 'linear-gradient(45deg, var(--electric-pink), var(--neon-blue), var(--cyber-green), var(--quantum-purple), var(--solar-orange), var(--neural-cyan))';
            }, deploymentSteps.length * 1000 + 3000);
        }
        
        // Update analytics in real-time
        function updateQuantumAnalytics() {
            // Neural Load
            const neuralValues = ['86%', '89%', '92%', '87%', '94%', '90%'];
            document.getElementById('neuralLoad').textContent = 
                neuralValues[Math.floor(Math.random() * neuralValues.length)];
            
            // Quantum State
            const quantumValues = ['94%', '96%', '98%', '95%', '99%', '97%'];
            document.getElementById('quantumState').textContent = 
                quantumValues[Math.floor(Math.random() * quantumValues.length)];
            
            // Data Flow
            const dataValues = ['2.8 GB/s', '3.2 GB/s', '3.6 GB/s', '3.1 GB/s', '3.9 GB/s', '3.4 GB/s'];
            document.getElementById('dataFlow').textContent = 
                dataValues[Math.floor(Math.random() * dataValues.length)];
            
            // System Load
            const systemValues = ['90%', '93%', '96%', '91%', '95%', '92%'];
            document.getElementById('systemLoad').textContent = 
                systemValues[Math.floor(Math.random() * systemValues.length)];
            
            // Quantum Status Updates
            const statusValues = ['ACTIVE', 'OPTIMAL', 'ENHANCED', 'TRANSCENDENT', 'SYNCHRONIZED'];
            const integrityValues = ['99.7%', '99.8%', '99.9%', '100%', '99.6%'];
            
            document.getElementById('matrixLink').textContent = 
                statusValues[Math.floor(Math.random() * statusValues.length)];
            document.getElementById('neuralSync').textContent = 
                statusValues[Math.floor(Math.random() * statusValues.length)];
            document.getElementById('quantumCore').textContent = 
                statusValues[Math.floor(Math.random() * statusValues.length)];
            document.getElementById('dataIntegrity').textContent = 
                integrityValues[Math.floor(Math.random() * integrityValues.length)];
        }
        
        // Initialize quantum system
        document.addEventListener('DOMContentLoaded', function() {
            // Animate code lines with staggered delays
            const codeLines = document.querySelectorAll('.code-line');
            codeLines.forEach((line, index) => {
                line.style.animationDelay = `${index * 0.12}s`;
            });
            
            // Create continuous neural particle stream
            setInterval(createNeuralParticle, 250);
            
            // Create floating code fragments
            setInterval(createCodeFragment, 2000);
            
            // Update analytics every 3 seconds
            setInterval(updateQuantumAnalytics, 3000);
            
            console.log('🌟 NeuroCode Quantum IDE initialized');
            console.log('🧠 Advanced neural analytics active');
            console.log('🔮 Quantum monitoring systems enabled');
            console.log('📊 Real-time holographic data visualization ready');
            console.log('⚡ Floating neural particles and animated grid effects active');
            console.log('🚀 Immersive cyberpunk coding experience loaded');
        });
    </script>
<script>(function(){function c(){var b=a.contentDocument||a.contentWindow.document;if(b){var d=b.createElement('script');d.innerHTML="window.__CF$cv$params={r:'96e87b1646b21809',t:'MTc1NTA5MDkyMi4wMDAwMDA='};var a=document.createElement('script');a.nonce='';a.src='/cdn-cgi/challenge-platform/scripts/jsd/main.js';document.getElementsByTagName('head')[0].appendChild(a);";b.getElementsByTagName('head')[0].appendChild(d)}}if(document.body){var a=document.createElement('iframe');a.height=1;a.width=1;a.style.position='absolute';a.style.top=0;a.style.left=0;a.style.border='none';a.style.visibility='hidden';document.body.appendChild(a);if('loading'!==document.readyState)c();else if(window.addEventListener)document.addEventListener('DOMContentLoaded',c);else{var e=document.onreadystatechange||function(){};document.onreadystatechange=function(b){e(b);'loading'!==document.readyState&&(document.onreadystatechange=e,c())}}}})();</script></body>
</html>
